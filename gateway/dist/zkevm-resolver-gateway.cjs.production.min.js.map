{"version":3,"file":"zkevm-resolver-gateway.cjs.production.min.js","sources":["../src/index.ts"],"sourcesContent":["import { Server } from \"@chainlink/ccip-read-server\";\nimport { Command } from \"commander\";\nimport { ethers } from \"ethers\";\n\nconst IResolverAbi =\n  require(\"@ensdomains/arb-resolver-contracts/artifacts/contracts/l1/ArbitrumResolverStub.sol/IResolverService.json\").abi;\nconst helperAbi =\n  require(\"@ensdomains/arb-resolver-contracts/artifacts/contracts/l1/AssertionHelper.sol/AssertionHelper.json\").abi;\n\nconst rollupAbi = require(\"./rollup.json\");\nconst { BigNumber } = ethers;\nconst program = new Command();\nprogram\n  .option(\"-r --l2_resolver_address <address>\", \"RESOLVER_ADDRESS\")\n  .option(\"-h --helper_address <helper_address>\", \"HELPER_ADDRESS\")\n  .option(\n    \"-l1p --l1_provider_url <url1>\",\n    \"L1_PROVIDER_URL\",\n    \"http://localhost:8545\"\n  )\n  .option(\n    \"-l2p --l2_provider_url <url2>\",\n    \"L2_PROVIDER_URL\",\n    \"http://localhost:8545\"\n  )\n  .option(\"-l1c --l1_chain_id <chain1>\", \"L1_CHAIN_ID\", \"1337\")\n  .option(\"-l2c --l2_chain_id <chain2>\", \"L2_CHAIN_ID\", \"412346\")\n  .option(\n    \"-ru --rollup_address <rollup_address>\",\n    \"ROLLUP_ADDRESS\",\n    \"0xE87d317eB8dcc9afE24d9f63D6C760e52Bc18A40\"\n  )\n  .option(\"-d --debug\", \"debug\", false)\n  .option(\"-p --port <number>\", \"Port number to serve on\", \"8081\");\nprogram.parse(process.argv);\nconst options = program.opts();\nconsole.log({ options });\nconst {\n  l1_provider_url,\n  l2_provider_url,\n  rollup_address,\n  helper_address,\n  l2_resolver_address,\n  l1_chain_id,\n  l2_chain_id,\n  debug,\n} = options;\nif (helper_address === undefined || l2_resolver_address === undefined) {\n  throw \"Must specify --l2_resolver_address and --helper_address\";\n}\n\nconst l1provider = new ethers.providers.JsonRpcProvider(l1_provider_url);\nconst l2provider = new ethers.providers.JsonRpcProvider(l2_provider_url);\nconst rollup = new ethers.Contract(rollup_address, rollupAbi, l1provider);\nconst helper = new ethers.Contract(helper_address, helperAbi, l1provider);\nconst server = new Server();\n\nserver.add(IResolverAbi, [\n  {\n    type: \"addr(bytes32)\",\n    func: async ([node], { to, data: _callData }) => {\n      const addrSlot = ethers.utils.keccak256(node + \"00\".repeat(31) + \"01\");\n      if (debug) {\n        console.log(1, {\n          node,\n          to,\n          _callData,\n          l1_provider_url,\n          l2_provider_url,\n          l2_resolver_address,\n          l1_chain_id,\n          l2_chain_id,\n        });\n        const blockNumber = (await l2provider.getBlock(\"latest\")).number;\n        console.log(2, { blockNumber, addrSlot });\n        let addressData;\n        try {\n          addressData = await l2provider.getStorageAt(\n            l2_resolver_address,\n            addrSlot\n          );\n        } catch (e) {\n          console.log(3, { e });\n        }\n        console.log(4, {\n          addressData,\n        });\n      }\n      const nodeIndex = await rollup.lastFinalizedStateRootHash();\n      console.log({\n        nodeIndex: nodeIndex.toString(),\n      });\n      const nodeEventFilter = await rollup.filters.NodeCreated(nodeIndex);\n      const nodeEvents = await rollup.queryFilter(nodeEventFilter);\n      const assertion = nodeEvents[0].args!.assertion;\n      const sendRoot = await helper.getSendRoot(assertion);\n      const blockHash = await helper.getBlockHash(assertion);\n      const l2blockRaw = await l2provider.send(\"eth_getBlockByHash\", [\n        blockHash,\n        false,\n      ]);\n      console.log(5, { l2blockRaw });\n      const stateRoot = l2blockRaw.stateRoot;\n      const blockarray = [\n        l2blockRaw.parentHash,\n        l2blockRaw.sha3Uncles,\n        l2blockRaw.miner,\n        l2blockRaw.stateRoot,\n        l2blockRaw.transactionsRoot,\n        l2blockRaw.receiptsRoot,\n        l2blockRaw.logsBloom,\n        BigNumber.from(l2blockRaw.difficulty).toHexString(),\n        BigNumber.from(l2blockRaw.number).toHexString(),\n        BigNumber.from(l2blockRaw.gasLimit).toHexString(),\n        BigNumber.from(l2blockRaw.gasUsed).toHexString(),\n        BigNumber.from(l2blockRaw.timestamp).toHexString(),\n        l2blockRaw.extraData,\n        l2blockRaw.mixHash,\n        l2blockRaw.nonce,\n        BigNumber.from(l2blockRaw.baseFeePerGas).toHexString(),\n      ];\n      const encodedBlockArray = ethers.utils.RLP.encode(blockarray);\n      const slot = ethers.utils.keccak256(node + \"00\".repeat(31) + \"01\");\n      const proof = await l2provider.send(\"eth_getProof\", [\n        l2_resolver_address,\n        [slot],\n        { blockHash },\n      ]);\n      console.log(6, JSON.stringify(proof, null, 2));\n      const accountProof = ethers.utils.RLP.encode(proof.accountProof);\n      const storageProof = ethers.utils.RLP.encode(\n        (proof.storageProof as any[]).filter((x) => x.key === slot)[0].proof\n      );\n      const finalProof = {\n        nodeIndex,\n        blockHash,\n        sendRoot,\n        encodedBlockArray,\n        stateTrieWitness: accountProof,\n        stateRoot,\n        storageTrieWitness: storageProof,\n      };\n      console.log(7, { finalProof });\n      return [finalProof];\n    },\n  },\n]);\nconst app = server.makeApp(\"/\");\napp.listen(options.port);\n"],"names":["IResolverAbi","require","abi","helperAbi","rollupAbi","BigNumber","ethers","program","Command","option","parse","process","argv","options","opts","console","log","l1_provider_url","l2_provider_url","rollup_address","helper_address","l2_resolver_address","l1_chain_id","l2_chain_id","debug","undefined","_func","l1provider","providers","JsonRpcProvider","l2provider","rollup","Contract","helper","server","Server","add","type","func","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_ref","_ref2","node","to","_callData","addrSlot","addressData","nodeIndex","nodeEventFilter","assertion","sendRoot","blockHash","l2blockRaw","stateRoot","blockarray","encodedBlockArray","slot","proof","accountProof","storageProof","finalProof","wrap","_context","prev","next","data","utils","keccak256","repeat","getBlock","blockNumber","sent","number","getStorageAt","t0","e","lastFinalizedStateRootHash","toString","filters","NodeCreated","queryFilter","args","getSendRoot","getBlockHash","send","parentHash","sha3Uncles","miner","transactionsRoot","receiptsRoot","logsBloom","from","difficulty","toHexString","gasLimit","gasUsed","timestamp","extraData","mixHash","nonce","baseFeePerGas","RLP","encode","JSON","stringify","filter","x","key","stateTrieWitness","storageTrieWitness","abrupt","stop","_x","_x2","apply","arguments","makeApp","listen","port"],"mappings":"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"}