{
  "address": "0x17ae342421717BC3c13C44Db4622F73f50842286",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "urls",
          "type": "string[]"
        },
        {
          "internalType": "address",
          "name": "rollup",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        }
      ],
      "name": "InvalidSlotSize",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "UnknownOpcode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_gatewayURLs",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_rollup",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gatewayURLs",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "bytes32[]",
          "name": "commands",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes[]",
          "name": "constants",
          "type": "bytes[]"
        },
        {
          "internalType": "bytes",
          "name": "proof",
          "type": "bytes"
        }
      ],
      "name": "getStorageValues",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "values",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x28fe3b77c6ec22d854048c7f3af26b2561c3b61895a299549064e3fa46186d8f",
  "receipt": {
    "to": null,
    "from": "0x644e1ce71A6AfF1Fc52955214DF978DBB28f7a97",
    "contractAddress": "0x17ae342421717BC3c13C44Db4622F73f50842286",
    "transactionIndex": 13,
    "gasUsed": "1540296",
    "logsBloom": "0x
    "blockHash": "0x2a36d3ad1497fe8f471faf224d71b15ac41512cb846fa09c6b01e9d645d094db",
    "transactionHash": "0x28fe3b77c6ec22d854048c7f3af26b2561c3b61895a299549064e3fa46186d8f",
    "logs": [],
    "blockNumber": 20289075,
    "cumulativeGasUsed": "3733803",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "https://linea-ccip-gateway.linea.build/{sender}/{data}.json"
    ],
    "0xd19d4B5d358258f05D7B411E21A1460D11B0876F"
  ],
  "numDeployments": 1,
  "solcInputHash": "d13382c7f2c737d7a236359664939f38",
  "metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"urls\",\"type\":\"string[]\"},{\"internalType\":\"address\",\"name\":\"rollup\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"InvalidSlotSize\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"UnknownOpcode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_gatewayURLs\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rollup\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gatewayURLs\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"commands\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"constants\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"}],\"name\":\"getStorageValues\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"values\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"linea-state-verifier/contracts/LineaSparseProofVerifier.sol\":\"LineaSparseProofVerifier\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"linea-state-verifier/contracts/IEVMVerifier.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.25;\\n\\ninterface IEVMVerifier {\\n    function gatewayURLs() external view returns (string[] memory);\\n\\n    function getStorageValues(\\n        address target,\\n        bytes32[] memory commands,\\n        bytes[] memory constants,\\n        bytes memory proof\\n    ) external view returns (bytes[] memory values);\\n}\\n\",\"keccak256\":\"0xccdb86958ebee2d7bb79f790b24dc08d9c94fa9154c0231de0e0644d08ef2b0e\",\"license\":\"MIT\"},\"linea-state-verifier/contracts/LineaProofHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.25;\\nimport {SparseMerkleProof} from \\\"./lib/SparseMerkleProof.sol\\\";\\n\\nuint256 constant LAST_LEAF_INDEX = 41;\\n\\nstruct AccountProof {\\n    bytes value;\\n    bytes[] proofRelatedNodes;\\n}\\n\\nstruct StorageProof {\\n    bytes32 value;\\n    bytes[] proofRelatedNodes;\\n}\\n\\nstruct AccountProofStruct {\\n    address key;\\n    uint256 leafIndex;\\n    AccountProof proof;\\n}\\n\\nstruct StorageProofStruct {\\n    bytes32 key;\\n    uint256 leafIndex;\\n    StorageProof proof;\\n    bool initialized;\\n}\\n\\nuint8 constant OP_CONSTANT = 0x00;\\nuint8 constant OP_BACKREF = 0x20;\\nuint8 constant FLAG_DYNAMIC = 0x01;\\n\\nlibrary LineaProofHelper {\\n    error UnknownOpcode(uint8);\\n    error InvalidSlotSize(uint256 size);\\n\\n    function executeOperation(\\n        bytes1 operation,\\n        bytes[] memory constants,\\n        bytes[] memory values\\n    ) private pure returns (bytes memory) {\\n        uint8 opcode = uint8(operation) & 0xe0;\\n        uint8 operand = uint8(operation) & 0x1f;\\n\\n        if (opcode == OP_CONSTANT) {\\n            return constants[operand];\\n        } else if (opcode == OP_BACKREF) {\\n            return values[operand];\\n        } else {\\n            revert UnknownOpcode(opcode);\\n        }\\n    }\\n\\n    function computeFirstSlot(\\n        bytes32 command,\\n        bytes[] memory constants,\\n        bytes[] memory values\\n    ) private pure returns (bool isDynamic, uint256 slot) {\\n        uint8 flags = uint8(command[0]);\\n        isDynamic = (flags & FLAG_DYNAMIC) != 0;\\n\\n        bytes memory slotData = executeOperation(command[1], constants, values);\\n        require(slotData.length == 32, \\\"First path element must be 32 bytes\\\");\\n        slot = uint256(bytes32(slotData));\\n\\n        for (uint256 j = 2; j < 32 && command[j] != 0xff; j++) {\\n            bytes memory index = executeOperation(\\n                command[j],\\n                constants,\\n                values\\n            );\\n            slot = uint256(keccak256(abi.encodePacked(index, slot)));\\n        }\\n    }\\n\\n    function getDynamicValue(\\n        uint256 slot,\\n        uint256 proofIdx,\\n        StorageProofStruct[] memory storageProofs,\\n        SparseMerkleProof.Account memory account\\n    ) private pure returns (bytes memory value, uint256 newProofIdx) {\\n        if (!storageProofs[proofIdx].initialized) {\\n            return (\\\"\\\", proofIdx++);\\n        }\\n        verifyStorageProof(\\n            account,\\n            storageProofs[proofIdx].leafIndex,\\n            storageProofs[proofIdx].proof.proofRelatedNodes,\\n            storageProofs[proofIdx].proof.value,\\n            bytes32(slot)\\n        );\\n        uint256 firstValue = uint256(storageProofs[proofIdx++].proof.value);\\n        if (firstValue & 0x01 == 0x01) {\\n            // Long value: first slot is `length * 2 + 1`, following slots are data.\\n            slot = uint256(keccak256(abi.encodePacked(slot)));\\n            value = new bytes(firstValue >> 1);\\n            uint256 off;\\n            while (off < value.length) {\\n                verifyStorageProof(\\n                    account,\\n                    storageProofs[proofIdx].leafIndex,\\n                    storageProofs[proofIdx].proof.proofRelatedNodes,\\n                    storageProofs[proofIdx].proof.value,\\n                    bytes32(slot++)\\n                );\\n                off += 32;\\n                bytes32 temp = storageProofs[proofIdx++].proof.value;\\n                assembly {\\n                    mstore(add(value, off), temp)\\n                }\\n            }\\n            return (value, proofIdx);\\n        } else {\\n            uint256 length = (firstValue & 0xFF) >> 1;\\n            return (sliceBytes(abi.encode(firstValue), 0, length), proofIdx);\\n        }\\n    }\\n\\n    function sliceBytes(\\n        bytes memory data,\\n        uint256 start,\\n        uint256 length\\n    ) public pure returns (bytes memory) {\\n        require(start + length <= data.length, \\\"sliceBytes: out of range\\\");\\n\\n        bytes memory result = new bytes(length);\\n        for (uint256 i = 0; i < length; i++) {\\n            result[i] = data[i + start];\\n        }\\n\\n        return result;\\n    }\\n\\n    function verifyAccountProof(\\n        address target,\\n        AccountProofStruct memory accountProof,\\n        bytes32 stateRoot\\n    ) private pure returns (bool) {\\n        // Verify the target contract first against the account proof's last leaf node's hkey\\n        bytes32 targetHash = SparseMerkleProof.mimcHash(abi.encode(target));\\n        SparseMerkleProof.Leaf memory accountLeaf = SparseMerkleProof.getLeaf(\\n            accountProof.proof.proofRelatedNodes[LAST_LEAF_INDEX]\\n        );\\n        bytes32 hKey = accountLeaf.hKey;\\n\\n        require(targetHash == hKey, \\\"LineaProofHelper: wrong target\\\");\\n\\n        // Verify the account's proof itself\\n        bool accountProofVerified = SparseMerkleProof.verifyProof(\\n            accountProof.proof.proofRelatedNodes,\\n            accountProof.leafIndex,\\n            stateRoot\\n        );\\n\\n        bytes32 hAccountValue = SparseMerkleProof.hashAccountValue(\\n            accountProof.proof.value\\n        );\\n\\n        require(\\n            accountProofVerified && accountLeaf.hValue == hAccountValue,\\n            \\\"LineaProofHelper: invalid account proof\\\"\\n        );\\n\\n        return true;\\n    }\\n\\n    function verifyStorageProof(\\n        SparseMerkleProof.Account memory account,\\n        uint256 leafIndex,\\n        bytes[] memory proof,\\n        bytes32 value,\\n        bytes32 key\\n    ) private pure {\\n        bool storageProofVerified = SparseMerkleProof.verifyProof(\\n            proof,\\n            leafIndex,\\n            account.storageRoot\\n        );\\n\\n        SparseMerkleProof.Leaf memory storageLeaf = SparseMerkleProof.getLeaf(\\n            proof[LAST_LEAF_INDEX]\\n        );\\n\\n        // Verify the key\\n        bytes32 hKey = SparseMerkleProof.hashStorageValue(key);\\n\\n        // Verify the storage value\\n        bytes32 hValue = SparseMerkleProof.hashStorageValue(value);\\n        require(\\n            storageProofVerified &&\\n                storageLeaf.hKey == hKey &&\\n                storageLeaf.hValue == hValue,\\n            \\\"LineaProofHelper: invalid storage proof\\\"\\n        );\\n    }\\n\\n    function getStorageValues(\\n        address target,\\n        bytes32[] memory commands,\\n        bytes[] memory constants,\\n        bytes32 stateRoot,\\n        AccountProofStruct memory accountProof,\\n        StorageProofStruct[] memory storageProofs\\n    ) internal pure returns (bytes[] memory values) {\\n        require(\\n            commands.length <= storageProofs.length,\\n            \\\"LineaProofHelper: commands number > storage proofs number\\\"\\n        );\\n        verifyAccountProof(target, accountProof, stateRoot);\\n        SparseMerkleProof.Account memory account = SparseMerkleProof.getAccount(\\n            accountProof.proof.value\\n        );\\n        uint256 proofIdx = 0;\\n        values = new bytes[](commands.length);\\n        for (uint256 i = 0; i < commands.length; i++) {\\n            bytes32 command = commands[i];\\n            (bool isDynamic, uint256 slot) = computeFirstSlot(\\n                command,\\n                constants,\\n                values\\n            );\\n            if (!isDynamic) {\\n                if (!storageProofs[proofIdx].initialized) {\\n                    values[i] = abi.encode(0);\\n                    proofIdx++;\\n                } else {\\n                    verifyStorageProof(\\n                        account,\\n                        storageProofs[proofIdx].leafIndex,\\n                        storageProofs[proofIdx].proof.proofRelatedNodes,\\n                        storageProofs[proofIdx].proof.value,\\n                        bytes32(slot)\\n                    );\\n\\n                    values[i] = abi.encode(\\n                        storageProofs[proofIdx++].proof.value\\n                    );\\n\\n                    if (values[i].length > 32) {\\n                        revert InvalidSlotSize(values[i].length);\\n                    }\\n                }\\n            } else {\\n                (values[i], proofIdx) = getDynamicValue(\\n                    slot,\\n                    proofIdx,\\n                    storageProofs,\\n                    account\\n                );\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3ae8167e864cd8ae1e6804d3555c7df29142d1ae1347d1f74fe0c5dcd44368d5\",\"license\":\"MIT\"},\"linea-state-verifier/contracts/LineaSparseProofVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.25;\\n\\nimport {IEVMVerifier} from \\\"./IEVMVerifier.sol\\\";\\nimport {StorageProofStruct, AccountProofStruct, LineaProofHelper} from \\\"./LineaProofHelper.sol\\\";\\n\\ninterface IRollup {\\n    function stateRootHashes(\\n        uint256 l2blockNumber\\n    ) external view returns (bytes32);\\n\\n    function currentL2BlockNumber() external view returns (uint256);\\n}\\n\\ncontract LineaSparseProofVerifier is IEVMVerifier {\\n    string[] public _gatewayURLs;\\n    address public _rollup;\\n\\n    constructor(string[] memory urls, address rollup) {\\n        _gatewayURLs = urls;\\n        _rollup = rollup;\\n    }\\n\\n    function getStorageValues(\\n        address target,\\n        bytes32[] memory commands,\\n        bytes[] memory constants,\\n        bytes memory proof\\n    ) external view returns (bytes[] memory values) {\\n        (\\n            uint256 blockNo,\\n            AccountProofStruct memory accountProof,\\n            StorageProofStruct[] memory storageProofs\\n        ) = abi.decode(\\n                proof,\\n                (uint256, AccountProofStruct, StorageProofStruct[])\\n            );\\n\\n        // Check that the L2 block number used is the most recent one\\n        require(\\n            blockNo == IRollup(_rollup).currentL2BlockNumber(),\\n            \\\"LineaSparseProofVerifier: not latest finalized block\\\"\\n        );\\n\\n        bytes32 stateRoot = IRollup(_rollup).stateRootHashes(blockNo);\\n        require(\\n            stateRoot != bytes32(0),\\n            \\\"LineaSparseProofVerifier: invalid state root\\\"\\n        );\\n\\n        return\\n            LineaProofHelper.getStorageValues(\\n                target,\\n                commands,\\n                constants,\\n                stateRoot,\\n                accountProof,\\n                storageProofs\\n            );\\n    }\\n\\n    function gatewayURLs() external view override returns (string[] memory) {\\n        return _gatewayURLs;\\n    }\\n}\\n\",\"keccak256\":\"0xa9e200883ca6528b01665b2e25340af7054fa6ca226961e07e32b010b280e64c\",\"license\":\"MIT\"},\"linea-state-verifier/contracts/lib/Mimc.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n// Copyright 2023 Consensys Software Inc.\\n//\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n// you may not use this file except in compliance with the License.\\n// You may obtain a copy of the License at\\n//\\n//     http://www.apache.org/licenses/LICENSE-2.0\\n//\\n// Unless required by applicable law or agreed to in writing, software\\n// distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n// See the License for the specific language governing permissions and\\n// limitations under the License.\\n\\n// Code generated by gnark DO NOT EDIT\\npragma solidity 0.8.25;\\n\\n/**\\n * @title Library to perform MiMC hashing\\n * @author ConsenSys Software Inc.\\n * @custom:security-contact security-report@linea.build\\n */\\nlibrary Mimc {\\n    /**\\n     * Thrown when the data is not provided\\n     */\\n    error DataMissing();\\n\\n    /**\\n     * Thrown when the data is not purely in 32 byte chunks\\n     */\\n    error DataIsNotMod32();\\n\\n    uint256 constant FR_FIELD =\\n        8444461749428370424248824938781546531375899335154063827935233455917409239041;\\n    /**\\n     * @notice Performs a MiMC hash on the data provided\\n     * @param _msg The data to be hashed\\n     * @dev Only data that has length modulus 32 is hashed, reverts otherwise\\n     * @return mimcHash The computed MiMC hash\\n     */\\n    function hash(\\n        bytes calldata _msg\\n    ) external pure returns (bytes32 mimcHash) {\\n        if (_msg.length == 0) {\\n            revert DataMissing();\\n        }\\n\\n        if (_msg.length % 0x20 != 0) {\\n            revert DataIsNotMod32();\\n        }\\n\\n        assembly {\\n            let chunks := div(add(_msg.length, 0x1f), 0x20)\\n\\n            for {\\n                let i := 0\\n            } lt(i, chunks) {\\n                i := add(i, 1)\\n            } {\\n                let offset := add(_msg.offset, mul(i, 0x20))\\n                let chunk := calldataload(offset)\\n\\n                let r := encrypt(mimcHash, chunk)\\n                mimcHash := addmod(\\n                    addmod(mimcHash, r, FR_FIELD),\\n                    chunk,\\n                    FR_FIELD\\n                )\\n            }\\n\\n            function encrypt(h, chunk) -> output {\\n                let frField := FR_FIELD\\n                let tmpSum := 0\\n\\n                tmpSum := addmod(\\n                    addmod(chunk, h, frField),\\n                    6780559962679281898511952483033644312910028090361101779689089025541625982996,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    2327326745520207001136649348523057964841679868424949608370212081331899020358,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    6201177823658417253260885485467023993767823924255470286063250782233002635405,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    3401276671970505639801802718275229999176446092725813928949571059366811327963,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    796636033841689627732941016044857384234234277501564259311815186813195010627,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    159507412325830262114089631199386481336725966652415909300570415682233424809,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    1669348614406363339435491723584591316524711695667693315027811919444714635748,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    2220664510675218580883672035712942523468288190837741520497926350441362544422,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    1294712289478715410717626660893541311126892630747701030449280341780183665665,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    6758843230175145783288330173723849603007070607311612566540600202723911987180,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    6271650829101108787041306415787253036818921034903891854433479166754956001513,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    8037654458661109859150348337922011363549131313762043865209663327750426111866,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    2450972517788523786981910980516860147992539249204314270739451472218657823669,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    2707650969937705465351357815756127556801434183777713569980595073268026256128,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    7874262417209200618473337039194351886630571503697269268624099887104149796259,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    3089899920017810079637556867207463807565125948241456751227734590626249857937,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    8231877132811199596376758288825197494440517476607659739835166243301765860904,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    4889925300033981791993403687473437637164964770774352761851347729331041993593,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    506118690894045980182310960875885680782486421163823930266542078948815948062,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    4773308728424659273056201947330432214661646691949138677097247858746575076542,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    6610301125072219342086627276930551094394509958433369744427479834611436778066,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    8062913614098409973923064402439991628739389434149534836396892159147794104642,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    2576406140423312875091927795739341819101209176346955562285186911769083519728,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    6247267546819369987508590432055536928557259658317014243676640822343115627202,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    2354620213005699835215298236574714075068230025566107498090395819138978823906,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    1012123997779098542887516673253442986051441272786218052382513879552027657616,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    220252773286234814215172180118321537145064642853938490221604200051823270477,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    2306037967476458159399202685728266972768173510335885477997450635969358782263,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    5906000615460106310157278190403974694555979202144571560620360962365001056276,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    8029952345415718287377564183334920026617762793749604843629313086537726648143,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    6806091261750378774545720021859645013630360296898036304733359077422908323188,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    3791365032107216523624488143755156784159183778414385385850652127088602339940,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    7713951866326004273632564650741019619975760271948208739458822610304231437565,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    2159153222189174173490067225063044363535871059524538695070191871847470955412,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    3459892854150586819083449948613048924207735017129514254460829121652786324530,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    8165919441562399076732808928206069494664474480220235797297111305840352207764,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    5067127638759272574597184239140007718698192996511162583428330546781376830321,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    7564926180046670501077982861476967417487855218354401587881011340975488196742,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    4793316512087044382791577380686883286681140325373390439122763061600650301139,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    12025027725022723723984202199185080936456585195449250668991990971241927925,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    5056480146405086811789505170440731715530475328844870175949109998024731067467,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    3850822128034659558863504800917443538100103152464488164345952697508772708155,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    5490569542353168488797150359760203713598401616662275350850844170956899716180,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    6809916892509991991280249336166027496157481609693382555884367500846199028644,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    6102228360565846712478499570512196976845845959851353003471378423251561935785,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    7957411254301481793006532646538815862020547208300835763521138686017052464640,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    7577948604138385646013244290592520699579040577712519004775644201729392063846,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    6025758357861563690691793181574484773095829890586160167641973490103511417496,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    2004214547184552249779883547311284063339374005887218065319674453115808726850,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    1316449090346410801845183915381769525990226349513436734911941391785200212382,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    4556285572033080226119128815763547597118327635770271287655822355222839175285,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    2369904002063218534853867482545647755243877244064168179905450676831047307618,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    7451702566176584025980909730992154118931318734166468698682947787653334803016,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    1329300832483899103910420486510886619321904846687482243968569167489052205690,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    3238521361072472828313630322811653086792441312858682853521070248794222258735,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    3475214489590830586915334473771293324307275731565327099797069845161869229357,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    4274287601159036159363576568654710230919275259553081321690187920135177947814,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    6938336600682072955973769075275160235517201022692151378695173193891386346405,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    3998198747256139339077883878547228988120873864712400941893285440315291004215,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    6699213631756936754252081929574788294275116402464654263316543921533804167968,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    6962236729635042756258761323749531146700535903704299930132981735734543600942,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    6961288456480688271133399693659146309378114560595485436408179085016705585674,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                output := addmod(output, h, frField)\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7ce398ff779301fa880cfbe0c803f3955c1908cba02948b56e759173ecba0b52\",\"license\":\"Apache-2.0\"},\"linea-state-verifier/contracts/lib/SparseMerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.25;\\n\\nimport {Mimc} from \\\"./Mimc.sol\\\";\\n\\n/**\\n * @title Library to perform SparseMerkleProof actions using the MiMC hashing algorithm\\n * @author ConsenSys Software Inc.\\n * @custom:security-contact security-report@linea.build\\n */\\nlibrary SparseMerkleProof {\\n    using Mimc for *;\\n\\n    /**\\n     * The Account struct represents the state of the account including the storage root, nonce, balance and codesize\\n     * @dev This is mapped directly to the output of the storage proof\\n     */\\n    struct Account {\\n        uint64 nonce;\\n        uint256 balance;\\n        bytes32 storageRoot;\\n        bytes32 mimcCodeHash;\\n        bytes32 keccakCodeHash;\\n        uint64 codeSize;\\n    }\\n\\n    /**\\n     * Represents the leaf structure in both account and storage tries\\n     * @dev This is mapped directly to the output of the storage proof\\n     */\\n    struct Leaf {\\n        uint256 prev;\\n        uint256 next;\\n        bytes32 hKey;\\n        bytes32 hValue;\\n    }\\n\\n    /**\\n     * Thrown when expected bytes length is incorrect\\n     */\\n    error WrongBytesLength(uint256 expectedLength, uint256 bytesLength);\\n\\n    /**\\n     * Thrown when the length of bytes is not in exactly 32 byte chunks\\n     */\\n    error LengthNotMod32();\\n\\n    /**\\n     * Thrown when the leaf index is higher than the tree depth\\n     */\\n    error MaxTreeLeafIndexExceed();\\n\\n    /**\\n     * Thrown when the length of the unformatted proof is not provided exactly as expected (UNFORMATTED_PROOF_LENGTH)\\n     */\\n    error WrongProofLength(uint256 expectedLength, uint256 actualLength);\\n\\n    uint256 internal constant TREE_DEPTH = 40;\\n    uint256 internal constant UNFORMATTED_PROOF_LENGTH = 42;\\n    bytes32 internal constant ZERO_HASH = 0x0;\\n    uint256 internal constant MAX_TREE_LEAF_INDEX = 2 ** TREE_DEPTH - 1;\\n\\n    /**\\n     * @notice Formats input, computes root and returns true if it matches the provided merkle root\\n     * @param _rawProof Raw sparse merkle tree proof\\n     * @param _leafIndex Index of the leaf\\n     * @param _root Sparse merkle root\\n     * @return If the computed merkle root matches the provided one\\n     */\\n    function verifyProof(\\n        bytes[] calldata _rawProof,\\n        uint256 _leafIndex,\\n        bytes32 _root\\n    ) external pure returns (bool) {\\n        if (_rawProof.length != UNFORMATTED_PROOF_LENGTH) {\\n            revert WrongProofLength(UNFORMATTED_PROOF_LENGTH, _rawProof.length);\\n        }\\n\\n        (\\n            bytes32 nextFreeNode,\\n            bytes32 leafHash,\\n            bytes32[] memory proof\\n        ) = _formatProof(_rawProof);\\n        return _verify(proof, leafHash, _leafIndex, _root, nextFreeNode);\\n    }\\n\\n    /**\\n     * @notice Hash a value using MIMC hash\\n     * @param _input Value to hash\\n     * @return {bytes32} Mimc hash\\n     */\\n    function mimcHash(bytes calldata _input) external pure returns (bytes32) {\\n        return Mimc.hash(_input);\\n    }\\n\\n    /**\\n     * @notice Get leaf\\n     * @param _encodedLeaf Encoded leaf bytes (prev, next, hKey, hValue)\\n     * @return Leaf Formatted leaf struct\\n     */\\n    function getLeaf(\\n        bytes calldata _encodedLeaf\\n    ) external pure returns (Leaf memory) {\\n        return _parseLeaf(_encodedLeaf);\\n    }\\n\\n    /**\\n     * @notice Get account\\n     * @param _encodedAccountValue Encoded account value bytes (nonce, balance, storageRoot, mimcCodeHash, keccakCodeHash, codeSize)\\n     * @return Account Formatted account struct\\n     */\\n    function getAccount(\\n        bytes calldata _encodedAccountValue\\n    ) external pure returns (Account memory) {\\n        return _parseAccount(_encodedAccountValue);\\n    }\\n\\n    /**\\n     * @notice Hash account value\\n     * @param _value Encoded account value bytes (nonce, balance, storageRoot, mimcCodeHash, keccakCodeHash, codeSize)\\n     * @return {bytes32} Account value hash\\n     */\\n    function hashAccountValue(\\n        bytes calldata _value\\n    ) external pure returns (bytes32) {\\n        Account memory account = _parseAccount(_value);\\n        (bytes32 msb, bytes32 lsb) = _splitBytes32(account.keccakCodeHash);\\n        return\\n            Mimc.hash(\\n                abi.encode(\\n                    account.nonce,\\n                    account.balance,\\n                    account.storageRoot,\\n                    account.mimcCodeHash,\\n                    lsb,\\n                    msb,\\n                    account.codeSize\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @notice Hash storage value\\n     * @param _value Encoded storage value bytes\\n     * @return {bytes32} Storage value hash\\n     */\\n    function hashStorageValue(bytes32 _value) external pure returns (bytes32) {\\n        (bytes32 msb, bytes32 lsb) = _splitBytes32(_value);\\n        return Mimc.hash(abi.encodePacked(lsb, msb));\\n    }\\n\\n    /**\\n     * @notice Parse leaf value\\n     * @param _encodedLeaf Encoded leaf bytes (prev, next, hKey, hValue)\\n     * @return {Leaf} Formatted leaf struct\\n     */\\n    function _parseLeaf(\\n        bytes calldata _encodedLeaf\\n    ) private pure returns (Leaf memory) {\\n        if (_encodedLeaf.length != 128) {\\n            revert WrongBytesLength(128, _encodedLeaf.length);\\n        }\\n        return abi.decode(_encodedLeaf, (Leaf));\\n    }\\n\\n    /**\\n     * @notice Parse account value\\n     * @param _value Encoded account value bytes (nonce, balance, storageRoot, mimcCodeHash, keccakCodeHash, codeSize)\\n     * @return {Account} Formatted account struct\\n     */\\n    function _parseAccount(\\n        bytes calldata _value\\n    ) private pure returns (Account memory) {\\n        if (_value.length != 192) {\\n            revert WrongBytesLength(192, _value.length);\\n        }\\n        return abi.decode(_value, (Account));\\n    }\\n\\n    /**\\n     * @notice Split bytes32 into two bytes32 taking most significant bits and least significant bits\\n     * @param _b bytes to split\\n     * @return msb Most significant bits\\n     * @return lsb Least significant bits\\n     */\\n    function _splitBytes32(\\n        bytes32 _b\\n    ) private pure returns (bytes32 msb, bytes32 lsb) {\\n        assembly {\\n            msb := shr(128, _b)\\n            lsb := and(_b, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\\n        }\\n    }\\n\\n    /**\\n     * @notice Format proof\\n     * @param _rawProof Non formatted proof array\\n     * @return (bytes32, bytes32, bytes32[]) NextFreeNode, leafHash and formatted proof array\\n     */\\n    function _formatProof(\\n        bytes[] calldata _rawProof\\n    ) private pure returns (bytes32, bytes32, bytes32[] memory) {\\n        uint256 rawProofLength = _rawProof.length;\\n        uint256 formattedProofLength = rawProofLength - 2;\\n\\n        bytes32[] memory proof = new bytes32[](formattedProofLength);\\n\\n        if (_rawProof[0].length != 0x40) {\\n            revert WrongBytesLength(0x40, _rawProof[0].length);\\n        }\\n\\n        bytes32 nextFreeNode = bytes32(_rawProof[0][:32]);\\n        bytes32 leafHash = Mimc.hash(_rawProof[rawProofLength - 1]);\\n\\n        for (uint256 i = 1; i < formattedProofLength; ) {\\n            proof[formattedProofLength - i] = Mimc.hash(_rawProof[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        // If the sibling leaf (_rawProof[formattedProofLength]) is equal to zero bytes we don't hash it\\n        if (_isZeroBytes(_rawProof[formattedProofLength])) {\\n            proof[0] = ZERO_HASH;\\n        } else {\\n            proof[0] = Mimc.hash(_rawProof[formattedProofLength]);\\n        }\\n\\n        return (nextFreeNode, leafHash, proof);\\n    }\\n\\n    /**\\n     * @notice Check if bytes contain only zero byte elements\\n     * @param _data Bytes to be checked\\n     * @return isZeroBytes true if bytes contain only zero byte elements, false otherwise\\n     */\\n    function _isZeroBytes(\\n        bytes calldata _data\\n    ) private pure returns (bool isZeroBytes) {\\n        if (_data.length % 0x20 != 0) {\\n            revert LengthNotMod32();\\n        }\\n\\n        isZeroBytes = true;\\n        assembly {\\n            let dataStart := _data.offset\\n\\n            for {\\n                let currentPtr := dataStart\\n            } lt(currentPtr, add(dataStart, _data.length)) {\\n                currentPtr := add(currentPtr, 0x20)\\n            } {\\n                let dataWord := calldataload(currentPtr)\\n\\n                if eq(iszero(dataWord), 0) {\\n                    isZeroBytes := 0\\n                    break\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Computes merkle root from proof and compares it to the provided root\\n     * @param _proof Sparse merkle tree proof\\n     * @param _leafHash Leaf hash\\n     * @param _leafIndex Index of the leaf\\n     * @param _root Sparse merkle root\\n     * @param _nextFreeNode Next free node\\n     * @return If the computed merkle root matches the provided one\\n     */\\n    function _verify(\\n        bytes32[] memory _proof,\\n        bytes32 _leafHash,\\n        uint256 _leafIndex,\\n        bytes32 _root,\\n        bytes32 _nextFreeNode\\n    ) private pure returns (bool) {\\n        bytes32 computedHash = _leafHash;\\n        uint256 currentIndex = _leafIndex;\\n\\n        if (_leafIndex > MAX_TREE_LEAF_INDEX) {\\n            revert MaxTreeLeafIndexExceed();\\n        }\\n\\n        for (uint256 height; height < TREE_DEPTH; ++height) {\\n            if ((currentIndex >> height) & 1 == 1)\\n                computedHash = Mimc.hash(\\n                    abi.encodePacked(_proof[height], computedHash)\\n                );\\n            else\\n                computedHash = Mimc.hash(\\n                    abi.encodePacked(computedHash, _proof[height])\\n                );\\n        }\\n\\n        return\\n            Mimc.hash(abi.encodePacked(_nextFreeNode, computedHash)) == _root;\\n    }\\n}\\n\",\"keccak256\":\"0xd7738d73506bffcf02c5e4ce5761e3d429261e5c522c39cf43eb9b6c943154de\",\"license\":\"AGPL-3.0\"}},\"version\":1}",
  "bytecode": "0x604060806040523461029f57611c47908138038061001c81610346565b93843982019060408383031261029f5782516001600160401b03919082811161029f57840190601f9284848401121561029f57825195602093828811610289576005938860051b9786610070818b01610346565b809b8152019087829a8501019381851161029f5790818980979695949301925b8584106102a45750505050505001519560018060a01b03871680970361029f57519368010000000000000000851161028957600095865486885580871061021e575b50868052848720939087905b87891061010657600180546001600160a01b0319168b17905560405161188a90816103bd8239f35b805180519086821161020a5790889161011f895461036b565b8781116101d6575b50829087831160011461016f579180600195928695948892610164575b5050600019600383901b1c191690841b1789555b019601980197946100de565b015190503880610144565b8986528386209190601f198416875b8181106101be57509160019693918588979694106101a5575b505050831b83018955610158565b015160001960f88460031b161c19169055388080610197565b8284015185558d96600190950194938401930161017e565b6101fb908a8752848720898086018a1c820192878710610201575b01891c01906103a5565b38610127565b925081926101f1565b634e487b7160e01b84526041600452602484fd5b8780528686892091820191015b81811061023857506100d2565b80896102466001935461036b565b80610254575b50500161022b565b8681118414610268575081555b893861024c565b828252610280878b842092018a1c82018583016103a5565b81835555610261565b634e487b7160e01b600052604160045260246000fd5b600080fd5b9091928094959697505188811161029f57820183603f8201121561029f578a810151898111610331576102de818e01601f19168d01610346565b918183528588838301011161029f579290918c926000945b8186106103195750600090820184015281528b9897969582019493925001610090565b8086018a015183870186015293909401938d936102f6565b60246000634e487b7160e01b81526041600452fd5b6040519190601f01601f191682016001600160401b0381118382101761028957604052565b90600182811c9216801561039b575b602083101461038557565b634e487b7160e01b600052602260045260246000fd5b91607f169161037a565b8181106103b0575050565b600081556001016103a556fe6080604052600436101561001257600080fd5b6000803560e01c9081633baa6d501461005a57508063a183bada14610055578063b50f2fbc146100505763f36c452e1461004b57600080fd5b6105b0565b6103b9565b610390565b3461012b57608036600319011261012b576004359061007882610149565b6024356001600160401b0380821161014557366023830112156101455781600401356100a3816101ec565b926100b160405194856101cb565b8184526020916024602086019160051b8301019136831161014157602401905b828210610132575050505060443581811161012e576100f4903690600401610265565b9260643591821161012b5761012761011b868686610115366004890161021e565b9261098f565b6040519182918261032c565b0390f35b80fd5b8380fd5b813581529083019083016100d1565b8680fd5b8280fd5b6001600160a01b0381160361015a57565b600080fd5b634e487b7160e01b600052604160045260246000fd5b608081019081106001600160401b0382111761019057604052565b61015f565b604081019081106001600160401b0382111761019057604052565b606081019081106001600160401b0382111761019057604052565b90601f801991011681019081106001600160401b0382111761019057604052565b6001600160401b0381116101905760051b60200190565b6001600160401b03811161019057601f01601f191660200190565b81601f8201121561015a5780359061023582610203565b9261024360405194856101cb565b8284526020838301011161015a57816000926020809301838601378301015290565b81601f8201121561015a5780359160209161027f846101ec565b9361028d60405195866101cb565b808552838086019160051b8301019280841161015a57848301915b8483106102b85750505050505090565b82356001600160401b03811161015a5786916102d98484809489010161021e565b8152019201916102a8565b60005b8381106102f75750506000910152565b81810151838201526020016102e7565b90602091610320815180928185528580860191016102e4565b601f01601f1916010190565b6020808201906020835283518092526040830192602060408460051b8301019501936000915b8483106103625750505050505090565b9091929394958480610380600193603f198682030187528a51610307565b9801930193019194939290610352565b3461015a57600036600319011261015a576001546040516001600160a01b039091168152602090f35b3461015a5760008060031936011261012b5780546103d6816101ec565b906103e460405192836101cb565b80825282805260209283830191817f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563845b83831061047a5750505050604051928484019085855251809152604084019460408260051b8601019392955b82871061044e5785850386f35b90919293828061046a600193603f198a82030186528851610307565b9601920196019592919092610441565b600188819261048c859b9a989b6104b4565b81520192019201919096939596610415565b634e487b7160e01b600052603260045260246000fd5b906040519060009280549360018560011c9260018716918215610592575b60209160208610841461057e5787986104f2878a98999a60209181520190565b9490811561055d5750600114610515575b50505050610513925003836101cb565b565b610529919450959195600052602060002090565b946000935b8285106105475750505061051393500138808080610503565b865485850152958601958895509381019361052e565b93505050506105139491925060ff19168252151560051b0138808080610503565b634e487b7160e01b85526022600452602485fd5b93607f16936104d2565b9060206105ad928181520190610307565b90565b3461015a57602036600319011261015a5760043560005481101561015a5761060061012791600080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563016104b4565b604051918291602083526020830190610307565b81601f8201121561015a57805161062a81610203565b9261063860405194856101cb565b8184526020828401011161015a576105ad91602080850191016102e4565b81601f8201121561015a57805191602091610670846101ec565b9361067e60405195866101cb565b808552838086019160051b8301019280841161015a57848301915b8483106106a95750505050505090565b82516001600160401b03811161015a5786916106ca84848094890101610614565b815201920191610699565b5190811515820361015a57565b9080601f8301121561015a578151916020916106fd846101ec565b9360409261070d845196876101cb565b818652848087019260051b8201019383851161015a57858201925b858410610739575050505050505090565b83516001600160401b039081811161015a57840191601f199160808489038401811361015a5785519161076b83610175565b8b8601518352868601518c8401526060918287015182811161015a578890880196878d03011261015a578751966107a188610195565b8d87015188528887015192831161015a578d976107c68d8a6107d496819b0101610656565b8882015289860152016106d5565b90820152815201930192610728565b9160608383031261015a578251926020810151926001600160401b039384811161015a5782019360608583031261015a57604094855190610823826101b0565b805161082e81610149565b825260208101516020830152868101519083821161015a5701868185031261015a5786519061085c82610195565b805184811161015a5785610871918301610614565b825260208101519084821161015a5761088c91869101610656565b6020820152868201529483015190811161015a576105ad92016106e2565b9081602091031261015a575190565b6040513d6000823e3d90fd5b156108cc57565b60405162461bcd60e51b815260206004820152603460248201527f4c696e656153706172736550726f6f6656657269666965723a206e6f74206c61604482015273746573742066696e616c697a656420626c6f636b60601b6064820152608490fd5b1561093557565b60405162461bcd60e51b815260206004820152602c60248201527f4c696e656153706172736550726f6f6656657269666965723a20696e76616c6960448201526b19081cdd185d19481c9bdbdd60a21b6064820152608490fd5b906109a5845194602080809783010191016107e3565b94919290936109cd6109c16109c160015460018060a01b031690565b6001600160a01b031690565b60405163695378f560e01b8152948886600481855afa918215610a7b57610a038a93610a2398600091610a80575b5083146108c5565b6040518080988194638be745d160e01b8352600483019190602083019252565b03915afa938415610a7b576105ad97600095610a4c575b5050610a4784151561092e565b610c31565b610a6c929550803d10610a74575b610a6481836101cb565b8101906108aa565b923880610a3a565b503d610a5a565b6108b9565b610a979150853d8711610a7457610a6481836101cb565b386109fb565b15610aa457565b60405162461bcd60e51b815260206004820152603960248201527f4c696e656150726f6f6648656c7065723a20636f6d6d616e6473206e756d626560448201527f72203e2073746f726167652070726f6f6673206e756d626572000000000000006064820152608490fd5b51906001600160401b038216820361015a57565b908160c091031261015a576040519060c082018281106001600160401b0382111761019057610b8b9160a091604052610b5b81610b0f565b84526020810151602085015260408101516040850152606081015160608501526080810151608085015201610b0f565b60a082015290565b90610b9d826101ec565b610baa60405191826101cb565b8281528092610bbb601f19916101ec565b019060005b828110610bcc57505050565b806060602080938501015201610bc0565b805160291015610bee576105400190565b61049e565b8051821015610bee5760209160051b010190565b634e487b7160e01b600052601160045260246000fd5b6000198114610c2c5760010190565b610c07565b9284610c5092949796939597610c4b865186511015610a9d565b610fde565b5060408095015151908551906360f0f00f60e01b825260c08280610c796004966004830161059c565b038173Bf8C454Af2f08fDD90bB7B029b0C2c07c2a7b4A35af4918215610a7b57600092610e44575b50600094610caf8551610b93565b94865b8151881015610e3957898486610cd38a87610ccd8e89610bf3565b51611279565b9290610e1757610cf991506060610ced86610cf593610bf3565b510151151590565b1590565b15610d4957505160006020820152600191610d4091610d2581604081015b03601f1981018352826101cb565b610d2f8b8b610bf3565b52610d3a8a8a610bf3565b50610c1d565b975b0196610cb2565b610d8990868460209c959c94610d7e8682610d728583610d69828a610bf3565b51015197610bf3565b5101510151928b610bf3565b51015151918a61159f565b610d17610db88c610da3610d9c8d610c1d565b9c89610bf3565b510151518d5184810191825292839160200190565b610dc2838a610bf3565b52610dcd8289610bf3565b50610dd88289610bf3565b515111610de757600190610d42565b85610e13610df68c938a610bf3565b515192519283926354d0209160e01b845283019190602083019252565b0390fd5b9091610e279350936001946113a9565b9890610e33828a610bf3565b52610d42565b505050505050925050565b610e6791925060c03d60c011610e6e575b610e5f81836101cb565b810190610b23565b9038610ca1565b503d610e55565b9081608091031261015a57606060405191610e8f83610175565b8051835260208101516020840152604081015160408401520151606082015290565b15610eb857565b60405162461bcd60e51b815260206004820152601e60248201527f4c696e656150726f6f6648656c7065723a2077726f6e672074617267657400006044820152606490fd5b9081602091031261015a576105ad906106d5565b909392919360608201606083528151809152608083019060808160051b850101926020809101926000905b838210610f56575050505050906040919460208201520152565b90919293948380610f73600193607f198b82030186528951610307565b97019201920190939291610f3c565b15610f8957565b60405162461bcd60e51b815260206004820152602760248201527f4c696e656150726f6f6648656c7065723a20696e76616c6964206163636f756e6044820152663a10383937b7b360c91b6064820152608490fd5b604080516001600160a01b039092166020808401919091529373Bf8C454Af2f08fDD90bB7B029b0C2c07c2a7b4A3926110399290869061102081808501610d17565b82518095819263b893e57960e01b83526004830161059c565b0381875af4928315610a7b576000936111c1575b5061107e8186019560806110648989510151610bdd565b51845180948192635ea5a98f60e01b83526004830161059c565b0381895af4948515610a7b57889260009661118c575b506110a3908487015114610eb1565b865182015190820151835163662e10f560e11b815294859283926110cb929160048501610f11565b0381875af4938415610a7b57869260009561115b575b5061110394955151915180809681946302318a3960e61b83526004830161059c565b03915af4918215610a7b576111299460009361113c575b50508261112e575b5050610f82565b600190565b606001511490503880611122565b611153929350803d10610a7457610a6481836101cb565b90388061111a565b611103955061117f90843d8611611185575b61117781836101cb565b810190610efd565b946110e1565b503d61116d565b6110a39196506111b39060803d6080116111ba575b6111ab81836101cb565b810190610e75565b9590611094565b503d6111a1565b6111d9919350863d8811610a7457610a6481836101cb565b913861104d565b156111e757565b60405162461bcd60e51b815260206004820152602360248201527f4669727374207061746820656c656d656e74206d75737420626520333220627960448201526274657360e81b6064820152608490fd5b60208151910151906020811061124c575090565b6000199060200360031b1b1690565b60209291906112718492828151948592016102e4565b019081520190565b92906001908160018660001a1615159560f861129c87858460011a60f81b611754565b916112b56020936112b060208251146111e0565b611238565b976002965b6112c8575b50505050505050565b9091929394959784891080809161132a575b156113235715610bee5761131790610d1761130e6112fd858b888f1a8a1b611754565b926040519283918a8301958661125b565b51902098610c1d565b959493929190846112ba565b50976112bf565b15610bee576001600160f81b0319848b1a861b811614156112da565b60405190602082018281106001600160401b038211176101905760405260008252565b9061137382610203565b61138060405191826101cb565b8281528092611391601f1991610203565b0190602036910137565b9060208201809211610c2c57565b919093926113bf610cf56060610ced8886610bf3565b61152e57602092836113d18785610bf3565b510151916114038260409487866113e88c8a610bf3565b5101510151866113f88c8a610bf3565b51015151918561159f565b8261141761141089610c1d565b9886610bf3565b51015151906001926001808416146000146114ef5795611456899397865161144a81610d17868201948560209181520190565b5190209760011c611369565b966000855b61146c575b50505050505050509190565b88518110156114ea576114be6114c39286896114a9878261149d8f9c836114948f8390610bf3565b5101519d610bf3565b5101510151928d610bf3565b51015151906114b783610c1d565b988861159f565b61139b565b93856114d86114d18c610c1d565b9b89610bf3565b5101515185890152939289938561145b565b611460565b50509250508161152061152a94611512607f945195869283019190602083019252565b03601f1981018552846101cb565b60011c16906117bd565b9190565b50505061153a82610c1d565b5061152a611346565b1561154a57565b60405162461bcd60e51b815260206004820152602760248201527f4c696e656150726f6f6648656c7065723a20696e76616c69642073746f7261676044820152663290383937b7b360c91b6064820152608490fd5b939091929373Bf8C454Af2f08fDD90bB7B029b0C2c07c2a7b4A3906040809101519581519463662e10f560e11b865285806115e260209a8b948b60048501610f11565b0381865af4948515610a7b5760009561172a575b506080611607611621959697610bdd565b51835180968192635ea5a98f60e01b83526004830161059c565b0381865af4938415610a7b57600094611709575b5081516333bbbd4160e21b8082526004820196909652908782602481875af4938415610a7b576116829689936000966116ea575b5084518098819482938352600483019190602083019252565b03915af4938415610a7b57610513966000956116cb575b5050846116be575b5050826116b0575b5050611543565b6060015114905038806116a9565b82015114925038806116a1565b6116e2929550803d10610a7457610a6481836101cb565b923880611699565b611702919650843d8611610a7457610a6481836101cb565b9438611669565b61172391945060803d6080116111ba576111ab81836101cb565b9238611635565b61162194955061160761174b6080928a3d8c116111855761117781836101cb565b969550506115f6565b9291909260f81c92601f60e08516941691841560001461177e575061177a929350610bf3565b5190565b9050602084036117935761177a929350610bf3565b604051632cde2db560e21b815260048101859052602490fd5b908151811015610bee570160200190565b908151811161180f576117cf81611369565b9160009060005b8381106117e4575050505090565b6001906001600160f81b03196117fa82856117ac565b5116841a61180882886117ac565b53016117d6565b60405162461bcd60e51b815260206004820152601860248201527f736c69636542797465733a206f7574206f662072616e676500000000000000006044820152606490fdfea26469706673582212200901c3eb5b456a7d1ff0b30276c15577ad92eff42a08c7dc3834df64d2b418ee64736f6c63430008190033",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b6000803560e01c9081633baa6d501461005a57508063a183bada14610055578063b50f2fbc146100505763f36c452e1461004b57600080fd5b6105b0565b6103b9565b610390565b3461012b57608036600319011261012b576004359061007882610149565b6024356001600160401b0380821161014557366023830112156101455781600401356100a3816101ec565b926100b160405194856101cb565b8184526020916024602086019160051b8301019136831161014157602401905b828210610132575050505060443581811161012e576100f4903690600401610265565b9260643591821161012b5761012761011b868686610115366004890161021e565b9261098f565b6040519182918261032c565b0390f35b80fd5b8380fd5b813581529083019083016100d1565b8680fd5b8280fd5b6001600160a01b0381160361015a57565b600080fd5b634e487b7160e01b600052604160045260246000fd5b608081019081106001600160401b0382111761019057604052565b61015f565b604081019081106001600160401b0382111761019057604052565b606081019081106001600160401b0382111761019057604052565b90601f801991011681019081106001600160401b0382111761019057604052565b6001600160401b0381116101905760051b60200190565b6001600160401b03811161019057601f01601f191660200190565b81601f8201121561015a5780359061023582610203565b9261024360405194856101cb565b8284526020838301011161015a57816000926020809301838601378301015290565b81601f8201121561015a5780359160209161027f846101ec565b9361028d60405195866101cb565b808552838086019160051b8301019280841161015a57848301915b8483106102b85750505050505090565b82356001600160401b03811161015a5786916102d98484809489010161021e565b8152019201916102a8565b60005b8381106102f75750506000910152565b81810151838201526020016102e7565b90602091610320815180928185528580860191016102e4565b601f01601f1916010190565b6020808201906020835283518092526040830192602060408460051b8301019501936000915b8483106103625750505050505090565b9091929394958480610380600193603f198682030187528a51610307565b9801930193019194939290610352565b3461015a57600036600319011261015a576001546040516001600160a01b039091168152602090f35b3461015a5760008060031936011261012b5780546103d6816101ec565b906103e460405192836101cb565b80825282805260209283830191817f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563845b83831061047a5750505050604051928484019085855251809152604084019460408260051b8601019392955b82871061044e5785850386f35b90919293828061046a600193603f198a82030186528851610307565b9601920196019592919092610441565b600188819261048c859b9a989b6104b4565b81520192019201919096939596610415565b634e487b7160e01b600052603260045260246000fd5b906040519060009280549360018560011c9260018716918215610592575b60209160208610841461057e5787986104f2878a98999a60209181520190565b9490811561055d5750600114610515575b50505050610513925003836101cb565b565b610529919450959195600052602060002090565b946000935b8285106105475750505061051393500138808080610503565b865485850152958601958895509381019361052e565b93505050506105139491925060ff19168252151560051b0138808080610503565b634e487b7160e01b85526022600452602485fd5b93607f16936104d2565b9060206105ad928181520190610307565b90565b3461015a57602036600319011261015a5760043560005481101561015a5761060061012791600080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563016104b4565b604051918291602083526020830190610307565b81601f8201121561015a57805161062a81610203565b9261063860405194856101cb565b8184526020828401011161015a576105ad91602080850191016102e4565b81601f8201121561015a57805191602091610670846101ec565b9361067e60405195866101cb565b808552838086019160051b8301019280841161015a57848301915b8483106106a95750505050505090565b82516001600160401b03811161015a5786916106ca84848094890101610614565b815201920191610699565b5190811515820361015a57565b9080601f8301121561015a578151916020916106fd846101ec565b9360409261070d845196876101cb565b818652848087019260051b8201019383851161015a57858201925b858410610739575050505050505090565b83516001600160401b039081811161015a57840191601f199160808489038401811361015a5785519161076b83610175565b8b8601518352868601518c8401526060918287015182811161015a578890880196878d03011261015a578751966107a188610195565b8d87015188528887015192831161015a578d976107c68d8a6107d496819b0101610656565b8882015289860152016106d5565b90820152815201930192610728565b9160608383031261015a578251926020810151926001600160401b039384811161015a5782019360608583031261015a57604094855190610823826101b0565b805161082e81610149565b825260208101516020830152868101519083821161015a5701868185031261015a5786519061085c82610195565b805184811161015a5785610871918301610614565b825260208101519084821161015a5761088c91869101610656565b6020820152868201529483015190811161015a576105ad92016106e2565b9081602091031261015a575190565b6040513d6000823e3d90fd5b156108cc57565b60405162461bcd60e51b815260206004820152603460248201527f4c696e656153706172736550726f6f6656657269666965723a206e6f74206c61604482015273746573742066696e616c697a656420626c6f636b60601b6064820152608490fd5b1561093557565b60405162461bcd60e51b815260206004820152602c60248201527f4c696e656153706172736550726f6f6656657269666965723a20696e76616c6960448201526b19081cdd185d19481c9bdbdd60a21b6064820152608490fd5b906109a5845194602080809783010191016107e3565b94919290936109cd6109c16109c160015460018060a01b031690565b6001600160a01b031690565b60405163695378f560e01b8152948886600481855afa918215610a7b57610a038a93610a2398600091610a80575b5083146108c5565b6040518080988194638be745d160e01b8352600483019190602083019252565b03915afa938415610a7b576105ad97600095610a4c575b5050610a4784151561092e565b610c31565b610a6c929550803d10610a74575b610a6481836101cb565b8101906108aa565b923880610a3a565b503d610a5a565b6108b9565b610a979150853d8711610a7457610a6481836101cb565b386109fb565b15610aa457565b60405162461bcd60e51b815260206004820152603960248201527f4c696e656150726f6f6648656c7065723a20636f6d6d616e6473206e756d626560448201527f72203e2073746f726167652070726f6f6673206e756d626572000000000000006064820152608490fd5b51906001600160401b038216820361015a57565b908160c091031261015a576040519060c082018281106001600160401b0382111761019057610b8b9160a091604052610b5b81610b0f565b84526020810151602085015260408101516040850152606081015160608501526080810151608085015201610b0f565b60a082015290565b90610b9d826101ec565b610baa60405191826101cb565b8281528092610bbb601f19916101ec565b019060005b828110610bcc57505050565b806060602080938501015201610bc0565b805160291015610bee576105400190565b61049e565b8051821015610bee5760209160051b010190565b634e487b7160e01b600052601160045260246000fd5b6000198114610c2c5760010190565b610c07565b9284610c5092949796939597610c4b865186511015610a9d565b610fde565b5060408095015151908551906360f0f00f60e01b825260c08280610c796004966004830161059c565b038173__$ad35a2d5dfd3b3559b9c8d4d3b1202b26b$__5af4918215610a7b57600092610e44575b50600094610caf8551610b93565b94865b8151881015610e3957898486610cd38a87610ccd8e89610bf3565b51611279565b9290610e1757610cf991506060610ced86610cf593610bf3565b510151151590565b1590565b15610d4957505160006020820152600191610d4091610d2581604081015b03601f1981018352826101cb565b610d2f8b8b610bf3565b52610d3a8a8a610bf3565b50610c1d565b975b0196610cb2565b610d8990868460209c959c94610d7e8682610d728583610d69828a610bf3565b51015197610bf3565b5101510151928b610bf3565b51015151918a61159f565b610d17610db88c610da3610d9c8d610c1d565b9c89610bf3565b510151518d5184810191825292839160200190565b610dc2838a610bf3565b52610dcd8289610bf3565b50610dd88289610bf3565b515111610de757600190610d42565b85610e13610df68c938a610bf3565b515192519283926354d0209160e01b845283019190602083019252565b0390fd5b9091610e279350936001946113a9565b9890610e33828a610bf3565b52610d42565b505050505050925050565b610e6791925060c03d60c011610e6e575b610e5f81836101cb565b810190610b23565b9038610ca1565b503d610e55565b9081608091031261015a57606060405191610e8f83610175565b8051835260208101516020840152604081015160408401520151606082015290565b15610eb857565b60405162461bcd60e51b815260206004820152601e60248201527f4c696e656150726f6f6648656c7065723a2077726f6e672074617267657400006044820152606490fd5b9081602091031261015a576105ad906106d5565b909392919360608201606083528151809152608083019060808160051b850101926020809101926000905b838210610f56575050505050906040919460208201520152565b90919293948380610f73600193607f198b82030186528951610307565b97019201920190939291610f3c565b15610f8957565b60405162461bcd60e51b815260206004820152602760248201527f4c696e656150726f6f6648656c7065723a20696e76616c6964206163636f756e6044820152663a10383937b7b360c91b6064820152608490fd5b604080516001600160a01b039092166020808401919091529373__$ad35a2d5dfd3b3559b9c8d4d3b1202b26b$__926110399290869061102081808501610d17565b82518095819263b893e57960e01b83526004830161059c565b0381875af4928315610a7b576000936111c1575b5061107e8186019560806110648989510151610bdd565b51845180948192635ea5a98f60e01b83526004830161059c565b0381895af4948515610a7b57889260009661118c575b506110a3908487015114610eb1565b865182015190820151835163662e10f560e11b815294859283926110cb929160048501610f11565b0381875af4938415610a7b57869260009561115b575b5061110394955151915180809681946302318a3960e61b83526004830161059c565b03915af4918215610a7b576111299460009361113c575b50508261112e575b5050610f82565b600190565b606001511490503880611122565b611153929350803d10610a7457610a6481836101cb565b90388061111a565b611103955061117f90843d8611611185575b61117781836101cb565b810190610efd565b946110e1565b503d61116d565b6110a39196506111b39060803d6080116111ba575b6111ab81836101cb565b810190610e75565b9590611094565b503d6111a1565b6111d9919350863d8811610a7457610a6481836101cb565b913861104d565b156111e757565b60405162461bcd60e51b815260206004820152602360248201527f4669727374207061746820656c656d656e74206d75737420626520333220627960448201526274657360e81b6064820152608490fd5b60208151910151906020811061124c575090565b6000199060200360031b1b1690565b60209291906112718492828151948592016102e4565b019081520190565b92906001908160018660001a1615159560f861129c87858460011a60f81b611754565b916112b56020936112b060208251146111e0565b611238565b976002965b6112c8575b50505050505050565b9091929394959784891080809161132a575b156113235715610bee5761131790610d1761130e6112fd858b888f1a8a1b611754565b926040519283918a8301958661125b565b51902098610c1d565b959493929190846112ba565b50976112bf565b15610bee576001600160f81b0319848b1a861b811614156112da565b60405190602082018281106001600160401b038211176101905760405260008252565b9061137382610203565b61138060405191826101cb565b8281528092611391601f1991610203565b0190602036910137565b9060208201809211610c2c57565b919093926113bf610cf56060610ced8886610bf3565b61152e57602092836113d18785610bf3565b510151916114038260409487866113e88c8a610bf3565b5101510151866113f88c8a610bf3565b51015151918561159f565b8261141761141089610c1d565b9886610bf3565b51015151906001926001808416146000146114ef5795611456899397865161144a81610d17868201948560209181520190565b5190209760011c611369565b966000855b61146c575b50505050505050509190565b88518110156114ea576114be6114c39286896114a9878261149d8f9c836114948f8390610bf3565b5101519d610bf3565b5101510151928d610bf3565b51015151906114b783610c1d565b988861159f565b61139b565b93856114d86114d18c610c1d565b9b89610bf3565b5101515185890152939289938561145b565b611460565b50509250508161152061152a94611512607f945195869283019190602083019252565b03601f1981018552846101cb565b60011c16906117bd565b9190565b50505061153a82610c1d565b5061152a611346565b1561154a57565b60405162461bcd60e51b815260206004820152602760248201527f4c696e656150726f6f6648656c7065723a20696e76616c69642073746f7261676044820152663290383937b7b360c91b6064820152608490fd5b939091929373__$ad35a2d5dfd3b3559b9c8d4d3b1202b26b$__906040809101519581519463662e10f560e11b865285806115e260209a8b948b60048501610f11565b0381865af4948515610a7b5760009561172a575b506080611607611621959697610bdd565b51835180968192635ea5a98f60e01b83526004830161059c565b0381865af4938415610a7b57600094611709575b5081516333bbbd4160e21b8082526004820196909652908782602481875af4938415610a7b576116829689936000966116ea575b5084518098819482938352600483019190602083019252565b03915af4938415610a7b57610513966000956116cb575b5050846116be575b5050826116b0575b5050611543565b6060015114905038806116a9565b82015114925038806116a1565b6116e2929550803d10610a7457610a6481836101cb565b923880611699565b611702919650843d8611610a7457610a6481836101cb565b9438611669565b61172391945060803d6080116111ba576111ab81836101cb565b9238611635565b61162194955061160761174b6080928a3d8c116111855761117781836101cb565b969550506115f6565b9291909260f81c92601f60e08516941691841560001461177e575061177a929350610bf3565b5190565b9050602084036117935761177a929350610bf3565b604051632cde2db560e21b815260048101859052602490fd5b908151811015610bee570160200190565b908151811161180f576117cf81611369565b9160009060005b8381106117e4575050505090565b6001906001600160f81b03196117fa82856117ac565b5116841a61180882886117ac565b53016117d6565b60405162461bcd60e51b815260206004820152601860248201527f736c69636542797465733a206f7574206f662072616e676500000000000000006044820152606490fdfea26469706673582212200901c3eb5b456a7d1ff0b30276c15577ad92eff42a08c7dc3834df64d2b418ee64736f6c63430008190033",
  "libraries": {
    "SparseMerkleProof": "0xBf8C454Af2f08fDD90bB7B029b0C2c07c2a7b4A3"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 16347,
        "contract": "linea-state-verifier/contracts/LineaSparseProofVerifier.sol:LineaSparseProofVerifier",
        "label": "_gatewayURLs",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 16349,
        "contract": "linea-state-verifier/contracts/LineaSparseProofVerifier.sol:LineaSparseProofVerifier",
        "label": "_rollup",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      }
    }
  }
}