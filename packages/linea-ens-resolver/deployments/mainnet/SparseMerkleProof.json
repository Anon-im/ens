{
  "address": "0xBf8C454Af2f08fDD90bB7B029b0C2c07c2a7b4A3",
  "abi": [
    {
      "inputs": [],
      "name": "LengthNotMod32",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MaxTreeLeafIndexExceed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "expectedLength",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bytesLength",
          "type": "uint256"
        }
      ],
      "name": "WrongBytesLength",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "expectedLength",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "actualLength",
          "type": "uint256"
        }
      ],
      "name": "WrongProofLength",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_encodedAccountValue",
          "type": "bytes"
        }
      ],
      "name": "getAccount",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            },
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "storageRoot",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "mimcCodeHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "keccakCodeHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "codeSize",
              "type": "uint64"
            }
          ],
          "internalType": "struct SparseMerkleProof.Account",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_encodedLeaf",
          "type": "bytes"
        }
      ],
      "name": "getLeaf",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "prev",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "next",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "hKey",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "hValue",
              "type": "bytes32"
            }
          ],
          "internalType": "struct SparseMerkleProof.Leaf",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_value",
          "type": "bytes"
        }
      ],
      "name": "hashAccountValue",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_value",
          "type": "bytes32"
        }
      ],
      "name": "hashStorageValue",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_input",
          "type": "bytes"
        }
      ],
      "name": "mimcHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "_rawProof",
          "type": "bytes[]"
        },
        {
          "internalType": "uint256",
          "name": "_leafIndex",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_root",
          "type": "bytes32"
        }
      ],
      "name": "verifyProof",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x0919ea4330ef44a96fb82ba0516b92339093024459c4c030e3fbe9b88a281d45",
  "receipt": {
    "to": null,
    "from": "0x644e1ce71A6AfF1Fc52955214DF978DBB28f7a97",
    "contractAddress": "0xBf8C454Af2f08fDD90bB7B029b0C2c07c2a7b4A3",
    "transactionIndex": 78,
    "gasUsed": "745677",
    "logsBloom": "0x
    "blockHash": "0x12cfc74f58d56f010e18316b0cf95a66c0dc0f2738d3952d4d6c5fd73db3fafd",
    "transactionHash": "0x0919ea4330ef44a96fb82ba0516b92339093024459c4c030e3fbe9b88a281d45",
    "logs": [],
    "blockNumber": 20289074,
    "cumulativeGasUsed": "7841677",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d13382c7f2c737d7a236359664939f38",
  "metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"LengthNotMod32\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxTreeLeafIndexExceed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expectedLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bytesLength\",\"type\":\"uint256\"}],\"name\":\"WrongBytesLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expectedLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actualLength\",\"type\":\"uint256\"}],\"name\":\"WrongProofLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_encodedAccountValue\",\"type\":\"bytes\"}],\"name\":\"getAccount\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"storageRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"mimcCodeHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"keccakCodeHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"codeSize\",\"type\":\"uint64\"}],\"internalType\":\"struct SparseMerkleProof.Account\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_encodedLeaf\",\"type\":\"bytes\"}],\"name\":\"getLeaf\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"prev\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"next\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"hKey\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"hValue\",\"type\":\"bytes32\"}],\"internalType\":\"struct SparseMerkleProof.Leaf\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_value\",\"type\":\"bytes\"}],\"name\":\"hashAccountValue\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_value\",\"type\":\"bytes32\"}],\"name\":\"hashStorageValue\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_input\",\"type\":\"bytes\"}],\"name\":\"mimcHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"_rawProof\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256\",\"name\":\"_leafIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"}],\"name\":\"verifyProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"ConsenSys Software Inc.\",\"custom:security-contact\":\"security-report@linea.build\",\"kind\":\"dev\",\"methods\":{\"getAccount(bytes)\":{\"params\":{\"_encodedAccountValue\":\"Encoded account value bytes (nonce, balance, storageRoot, mimcCodeHash, keccakCodeHash, codeSize)\"},\"returns\":{\"_0\":\"Account Formatted account struct\"}},\"getLeaf(bytes)\":{\"params\":{\"_encodedLeaf\":\"Encoded leaf bytes (prev, next, hKey, hValue)\"},\"returns\":{\"_0\":\"Leaf Formatted leaf struct\"}},\"hashAccountValue(bytes)\":{\"params\":{\"_value\":\"Encoded account value bytes (nonce, balance, storageRoot, mimcCodeHash, keccakCodeHash, codeSize)\"},\"returns\":{\"_0\":\"{bytes32} Account value hash\"}},\"hashStorageValue(bytes32)\":{\"params\":{\"_value\":\"Encoded storage value bytes\"},\"returns\":{\"_0\":\"{bytes32} Storage value hash\"}},\"mimcHash(bytes)\":{\"params\":{\"_input\":\"Value to hash\"},\"returns\":{\"_0\":\"{bytes32} Mimc hash\"}},\"verifyProof(bytes[],uint256,bytes32)\":{\"params\":{\"_leafIndex\":\"Index of the leaf\",\"_rawProof\":\"Raw sparse merkle tree proof\",\"_root\":\"Sparse merkle root\"},\"returns\":{\"_0\":\"If the computed merkle root matches the provided one\"}}},\"title\":\"Library to perform SparseMerkleProof actions using the MiMC hashing algorithm\",\"version\":1},\"userdoc\":{\"errors\":{\"LengthNotMod32()\":[{\"notice\":\"Thrown when the length of bytes is not in exactly 32 byte chunks\"}],\"MaxTreeLeafIndexExceed()\":[{\"notice\":\"Thrown when the leaf index is higher than the tree depth\"}],\"WrongBytesLength(uint256,uint256)\":[{\"notice\":\"Thrown when expected bytes length is incorrect\"}],\"WrongProofLength(uint256,uint256)\":[{\"notice\":\"Thrown when the length of the unformatted proof is not provided exactly as expected (UNFORMATTED_PROOF_LENGTH)\"}]},\"kind\":\"user\",\"methods\":{\"getAccount(bytes)\":{\"notice\":\"Get account\"},\"getLeaf(bytes)\":{\"notice\":\"Get leaf\"},\"hashAccountValue(bytes)\":{\"notice\":\"Hash account value\"},\"hashStorageValue(bytes32)\":{\"notice\":\"Hash storage value\"},\"mimcHash(bytes)\":{\"notice\":\"Hash a value using MIMC hash\"},\"verifyProof(bytes[],uint256,bytes32)\":{\"notice\":\"Formats input, computes root and returns true if it matches the provided merkle root\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"linea-state-verifier/contracts/lib/SparseMerkleProof.sol\":\"SparseMerkleProof\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"linea-state-verifier/contracts/lib/Mimc.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n// Copyright 2023 Consensys Software Inc.\\n//\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n// you may not use this file except in compliance with the License.\\n// You may obtain a copy of the License at\\n//\\n//     http://www.apache.org/licenses/LICENSE-2.0\\n//\\n// Unless required by applicable law or agreed to in writing, software\\n// distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n// See the License for the specific language governing permissions and\\n// limitations under the License.\\n\\n// Code generated by gnark DO NOT EDIT\\npragma solidity 0.8.25;\\n\\n/**\\n * @title Library to perform MiMC hashing\\n * @author ConsenSys Software Inc.\\n * @custom:security-contact security-report@linea.build\\n */\\nlibrary Mimc {\\n    /**\\n     * Thrown when the data is not provided\\n     */\\n    error DataMissing();\\n\\n    /**\\n     * Thrown when the data is not purely in 32 byte chunks\\n     */\\n    error DataIsNotMod32();\\n\\n    uint256 constant FR_FIELD =\\n        8444461749428370424248824938781546531375899335154063827935233455917409239041;\\n    /**\\n     * @notice Performs a MiMC hash on the data provided\\n     * @param _msg The data to be hashed\\n     * @dev Only data that has length modulus 32 is hashed, reverts otherwise\\n     * @return mimcHash The computed MiMC hash\\n     */\\n    function hash(\\n        bytes calldata _msg\\n    ) external pure returns (bytes32 mimcHash) {\\n        if (_msg.length == 0) {\\n            revert DataMissing();\\n        }\\n\\n        if (_msg.length % 0x20 != 0) {\\n            revert DataIsNotMod32();\\n        }\\n\\n        assembly {\\n            let chunks := div(add(_msg.length, 0x1f), 0x20)\\n\\n            for {\\n                let i := 0\\n            } lt(i, chunks) {\\n                i := add(i, 1)\\n            } {\\n                let offset := add(_msg.offset, mul(i, 0x20))\\n                let chunk := calldataload(offset)\\n\\n                let r := encrypt(mimcHash, chunk)\\n                mimcHash := addmod(\\n                    addmod(mimcHash, r, FR_FIELD),\\n                    chunk,\\n                    FR_FIELD\\n                )\\n            }\\n\\n            function encrypt(h, chunk) -> output {\\n                let frField := FR_FIELD\\n                let tmpSum := 0\\n\\n                tmpSum := addmod(\\n                    addmod(chunk, h, frField),\\n                    6780559962679281898511952483033644312910028090361101779689089025541625982996,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    2327326745520207001136649348523057964841679868424949608370212081331899020358,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    6201177823658417253260885485467023993767823924255470286063250782233002635405,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    3401276671970505639801802718275229999176446092725813928949571059366811327963,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    796636033841689627732941016044857384234234277501564259311815186813195010627,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    159507412325830262114089631199386481336725966652415909300570415682233424809,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    1669348614406363339435491723584591316524711695667693315027811919444714635748,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    2220664510675218580883672035712942523468288190837741520497926350441362544422,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    1294712289478715410717626660893541311126892630747701030449280341780183665665,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    6758843230175145783288330173723849603007070607311612566540600202723911987180,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    6271650829101108787041306415787253036818921034903891854433479166754956001513,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    8037654458661109859150348337922011363549131313762043865209663327750426111866,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    2450972517788523786981910980516860147992539249204314270739451472218657823669,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    2707650969937705465351357815756127556801434183777713569980595073268026256128,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    7874262417209200618473337039194351886630571503697269268624099887104149796259,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    3089899920017810079637556867207463807565125948241456751227734590626249857937,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    8231877132811199596376758288825197494440517476607659739835166243301765860904,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    4889925300033981791993403687473437637164964770774352761851347729331041993593,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    506118690894045980182310960875885680782486421163823930266542078948815948062,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    4773308728424659273056201947330432214661646691949138677097247858746575076542,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    6610301125072219342086627276930551094394509958433369744427479834611436778066,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    8062913614098409973923064402439991628739389434149534836396892159147794104642,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    2576406140423312875091927795739341819101209176346955562285186911769083519728,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    6247267546819369987508590432055536928557259658317014243676640822343115627202,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    2354620213005699835215298236574714075068230025566107498090395819138978823906,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    1012123997779098542887516673253442986051441272786218052382513879552027657616,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    220252773286234814215172180118321537145064642853938490221604200051823270477,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    2306037967476458159399202685728266972768173510335885477997450635969358782263,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    5906000615460106310157278190403974694555979202144571560620360962365001056276,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    8029952345415718287377564183334920026617762793749604843629313086537726648143,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    6806091261750378774545720021859645013630360296898036304733359077422908323188,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    3791365032107216523624488143755156784159183778414385385850652127088602339940,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    7713951866326004273632564650741019619975760271948208739458822610304231437565,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    2159153222189174173490067225063044363535871059524538695070191871847470955412,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    3459892854150586819083449948613048924207735017129514254460829121652786324530,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    8165919441562399076732808928206069494664474480220235797297111305840352207764,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    5067127638759272574597184239140007718698192996511162583428330546781376830321,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    7564926180046670501077982861476967417487855218354401587881011340975488196742,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    4793316512087044382791577380686883286681140325373390439122763061600650301139,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    12025027725022723723984202199185080936456585195449250668991990971241927925,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    5056480146405086811789505170440731715530475328844870175949109998024731067467,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    3850822128034659558863504800917443538100103152464488164345952697508772708155,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    5490569542353168488797150359760203713598401616662275350850844170956899716180,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    6809916892509991991280249336166027496157481609693382555884367500846199028644,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    6102228360565846712478499570512196976845845959851353003471378423251561935785,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    7957411254301481793006532646538815862020547208300835763521138686017052464640,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    7577948604138385646013244290592520699579040577712519004775644201729392063846,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    6025758357861563690691793181574484773095829890586160167641973490103511417496,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    2004214547184552249779883547311284063339374005887218065319674453115808726850,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    1316449090346410801845183915381769525990226349513436734911941391785200212382,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    4556285572033080226119128815763547597118327635770271287655822355222839175285,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    2369904002063218534853867482545647755243877244064168179905450676831047307618,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    7451702566176584025980909730992154118931318734166468698682947787653334803016,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    1329300832483899103910420486510886619321904846687482243968569167489052205690,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    3238521361072472828313630322811653086792441312858682853521070248794222258735,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    3475214489590830586915334473771293324307275731565327099797069845161869229357,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    4274287601159036159363576568654710230919275259553081321690187920135177947814,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    6938336600682072955973769075275160235517201022692151378695173193891386346405,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    3998198747256139339077883878547228988120873864712400941893285440315291004215,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    6699213631756936754252081929574788294275116402464654263316543921533804167968,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    6962236729635042756258761323749531146700535903704299930132981735734543600942,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    6961288456480688271133399693659146309378114560595485436408179085016705585674,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                output := addmod(output, h, frField)\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7ce398ff779301fa880cfbe0c803f3955c1908cba02948b56e759173ecba0b52\",\"license\":\"Apache-2.0\"},\"linea-state-verifier/contracts/lib/SparseMerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.25;\\n\\nimport {Mimc} from \\\"./Mimc.sol\\\";\\n\\n/**\\n * @title Library to perform SparseMerkleProof actions using the MiMC hashing algorithm\\n * @author ConsenSys Software Inc.\\n * @custom:security-contact security-report@linea.build\\n */\\nlibrary SparseMerkleProof {\\n    using Mimc for *;\\n\\n    /**\\n     * The Account struct represents the state of the account including the storage root, nonce, balance and codesize\\n     * @dev This is mapped directly to the output of the storage proof\\n     */\\n    struct Account {\\n        uint64 nonce;\\n        uint256 balance;\\n        bytes32 storageRoot;\\n        bytes32 mimcCodeHash;\\n        bytes32 keccakCodeHash;\\n        uint64 codeSize;\\n    }\\n\\n    /**\\n     * Represents the leaf structure in both account and storage tries\\n     * @dev This is mapped directly to the output of the storage proof\\n     */\\n    struct Leaf {\\n        uint256 prev;\\n        uint256 next;\\n        bytes32 hKey;\\n        bytes32 hValue;\\n    }\\n\\n    /**\\n     * Thrown when expected bytes length is incorrect\\n     */\\n    error WrongBytesLength(uint256 expectedLength, uint256 bytesLength);\\n\\n    /**\\n     * Thrown when the length of bytes is not in exactly 32 byte chunks\\n     */\\n    error LengthNotMod32();\\n\\n    /**\\n     * Thrown when the leaf index is higher than the tree depth\\n     */\\n    error MaxTreeLeafIndexExceed();\\n\\n    /**\\n     * Thrown when the length of the unformatted proof is not provided exactly as expected (UNFORMATTED_PROOF_LENGTH)\\n     */\\n    error WrongProofLength(uint256 expectedLength, uint256 actualLength);\\n\\n    uint256 internal constant TREE_DEPTH = 40;\\n    uint256 internal constant UNFORMATTED_PROOF_LENGTH = 42;\\n    bytes32 internal constant ZERO_HASH = 0x0;\\n    uint256 internal constant MAX_TREE_LEAF_INDEX = 2 ** TREE_DEPTH - 1;\\n\\n    /**\\n     * @notice Formats input, computes root and returns true if it matches the provided merkle root\\n     * @param _rawProof Raw sparse merkle tree proof\\n     * @param _leafIndex Index of the leaf\\n     * @param _root Sparse merkle root\\n     * @return If the computed merkle root matches the provided one\\n     */\\n    function verifyProof(\\n        bytes[] calldata _rawProof,\\n        uint256 _leafIndex,\\n        bytes32 _root\\n    ) external pure returns (bool) {\\n        if (_rawProof.length != UNFORMATTED_PROOF_LENGTH) {\\n            revert WrongProofLength(UNFORMATTED_PROOF_LENGTH, _rawProof.length);\\n        }\\n\\n        (\\n            bytes32 nextFreeNode,\\n            bytes32 leafHash,\\n            bytes32[] memory proof\\n        ) = _formatProof(_rawProof);\\n        return _verify(proof, leafHash, _leafIndex, _root, nextFreeNode);\\n    }\\n\\n    /**\\n     * @notice Hash a value using MIMC hash\\n     * @param _input Value to hash\\n     * @return {bytes32} Mimc hash\\n     */\\n    function mimcHash(bytes calldata _input) external pure returns (bytes32) {\\n        return Mimc.hash(_input);\\n    }\\n\\n    /**\\n     * @notice Get leaf\\n     * @param _encodedLeaf Encoded leaf bytes (prev, next, hKey, hValue)\\n     * @return Leaf Formatted leaf struct\\n     */\\n    function getLeaf(\\n        bytes calldata _encodedLeaf\\n    ) external pure returns (Leaf memory) {\\n        return _parseLeaf(_encodedLeaf);\\n    }\\n\\n    /**\\n     * @notice Get account\\n     * @param _encodedAccountValue Encoded account value bytes (nonce, balance, storageRoot, mimcCodeHash, keccakCodeHash, codeSize)\\n     * @return Account Formatted account struct\\n     */\\n    function getAccount(\\n        bytes calldata _encodedAccountValue\\n    ) external pure returns (Account memory) {\\n        return _parseAccount(_encodedAccountValue);\\n    }\\n\\n    /**\\n     * @notice Hash account value\\n     * @param _value Encoded account value bytes (nonce, balance, storageRoot, mimcCodeHash, keccakCodeHash, codeSize)\\n     * @return {bytes32} Account value hash\\n     */\\n    function hashAccountValue(\\n        bytes calldata _value\\n    ) external pure returns (bytes32) {\\n        Account memory account = _parseAccount(_value);\\n        (bytes32 msb, bytes32 lsb) = _splitBytes32(account.keccakCodeHash);\\n        return\\n            Mimc.hash(\\n                abi.encode(\\n                    account.nonce,\\n                    account.balance,\\n                    account.storageRoot,\\n                    account.mimcCodeHash,\\n                    lsb,\\n                    msb,\\n                    account.codeSize\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @notice Hash storage value\\n     * @param _value Encoded storage value bytes\\n     * @return {bytes32} Storage value hash\\n     */\\n    function hashStorageValue(bytes32 _value) external pure returns (bytes32) {\\n        (bytes32 msb, bytes32 lsb) = _splitBytes32(_value);\\n        return Mimc.hash(abi.encodePacked(lsb, msb));\\n    }\\n\\n    /**\\n     * @notice Parse leaf value\\n     * @param _encodedLeaf Encoded leaf bytes (prev, next, hKey, hValue)\\n     * @return {Leaf} Formatted leaf struct\\n     */\\n    function _parseLeaf(\\n        bytes calldata _encodedLeaf\\n    ) private pure returns (Leaf memory) {\\n        if (_encodedLeaf.length != 128) {\\n            revert WrongBytesLength(128, _encodedLeaf.length);\\n        }\\n        return abi.decode(_encodedLeaf, (Leaf));\\n    }\\n\\n    /**\\n     * @notice Parse account value\\n     * @param _value Encoded account value bytes (nonce, balance, storageRoot, mimcCodeHash, keccakCodeHash, codeSize)\\n     * @return {Account} Formatted account struct\\n     */\\n    function _parseAccount(\\n        bytes calldata _value\\n    ) private pure returns (Account memory) {\\n        if (_value.length != 192) {\\n            revert WrongBytesLength(192, _value.length);\\n        }\\n        return abi.decode(_value, (Account));\\n    }\\n\\n    /**\\n     * @notice Split bytes32 into two bytes32 taking most significant bits and least significant bits\\n     * @param _b bytes to split\\n     * @return msb Most significant bits\\n     * @return lsb Least significant bits\\n     */\\n    function _splitBytes32(\\n        bytes32 _b\\n    ) private pure returns (bytes32 msb, bytes32 lsb) {\\n        assembly {\\n            msb := shr(128, _b)\\n            lsb := and(_b, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\\n        }\\n    }\\n\\n    /**\\n     * @notice Format proof\\n     * @param _rawProof Non formatted proof array\\n     * @return (bytes32, bytes32, bytes32[]) NextFreeNode, leafHash and formatted proof array\\n     */\\n    function _formatProof(\\n        bytes[] calldata _rawProof\\n    ) private pure returns (bytes32, bytes32, bytes32[] memory) {\\n        uint256 rawProofLength = _rawProof.length;\\n        uint256 formattedProofLength = rawProofLength - 2;\\n\\n        bytes32[] memory proof = new bytes32[](formattedProofLength);\\n\\n        if (_rawProof[0].length != 0x40) {\\n            revert WrongBytesLength(0x40, _rawProof[0].length);\\n        }\\n\\n        bytes32 nextFreeNode = bytes32(_rawProof[0][:32]);\\n        bytes32 leafHash = Mimc.hash(_rawProof[rawProofLength - 1]);\\n\\n        for (uint256 i = 1; i < formattedProofLength; ) {\\n            proof[formattedProofLength - i] = Mimc.hash(_rawProof[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        // If the sibling leaf (_rawProof[formattedProofLength]) is equal to zero bytes we don't hash it\\n        if (_isZeroBytes(_rawProof[formattedProofLength])) {\\n            proof[0] = ZERO_HASH;\\n        } else {\\n            proof[0] = Mimc.hash(_rawProof[formattedProofLength]);\\n        }\\n\\n        return (nextFreeNode, leafHash, proof);\\n    }\\n\\n    /**\\n     * @notice Check if bytes contain only zero byte elements\\n     * @param _data Bytes to be checked\\n     * @return isZeroBytes true if bytes contain only zero byte elements, false otherwise\\n     */\\n    function _isZeroBytes(\\n        bytes calldata _data\\n    ) private pure returns (bool isZeroBytes) {\\n        if (_data.length % 0x20 != 0) {\\n            revert LengthNotMod32();\\n        }\\n\\n        isZeroBytes = true;\\n        assembly {\\n            let dataStart := _data.offset\\n\\n            for {\\n                let currentPtr := dataStart\\n            } lt(currentPtr, add(dataStart, _data.length)) {\\n                currentPtr := add(currentPtr, 0x20)\\n            } {\\n                let dataWord := calldataload(currentPtr)\\n\\n                if eq(iszero(dataWord), 0) {\\n                    isZeroBytes := 0\\n                    break\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Computes merkle root from proof and compares it to the provided root\\n     * @param _proof Sparse merkle tree proof\\n     * @param _leafHash Leaf hash\\n     * @param _leafIndex Index of the leaf\\n     * @param _root Sparse merkle root\\n     * @param _nextFreeNode Next free node\\n     * @return If the computed merkle root matches the provided one\\n     */\\n    function _verify(\\n        bytes32[] memory _proof,\\n        bytes32 _leafHash,\\n        uint256 _leafIndex,\\n        bytes32 _root,\\n        bytes32 _nextFreeNode\\n    ) private pure returns (bool) {\\n        bytes32 computedHash = _leafHash;\\n        uint256 currentIndex = _leafIndex;\\n\\n        if (_leafIndex > MAX_TREE_LEAF_INDEX) {\\n            revert MaxTreeLeafIndexExceed();\\n        }\\n\\n        for (uint256 height; height < TREE_DEPTH; ++height) {\\n            if ((currentIndex >> height) & 1 == 1)\\n                computedHash = Mimc.hash(\\n                    abi.encodePacked(_proof[height], computedHash)\\n                );\\n            else\\n                computedHash = Mimc.hash(\\n                    abi.encodePacked(computedHash, _proof[height])\\n                );\\n        }\\n\\n        return\\n            Mimc.hash(abi.encodePacked(_nextFreeNode, computedHash)) == _root;\\n    }\\n}\\n\",\"keccak256\":\"0xd7738d73506bffcf02c5e4ce5761e3d429261e5c522c39cf43eb9b6c943154de\",\"license\":\"AGPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60808060405234601957610c83908161001f823930815050f35b600080fdfe6080604052600436101561001257600080fd5b60003560e01c80635ea5a98f146108b757806360f0f00f146108525780638c628e401461072e578063b893e579146106bb578063cc5c21ea146101225763ceeef5041461005e57600080fd5b60208060031936011261010a576100b381600435604051906001600160801b0381168383015260801c604082015260408152610099816109d6565b6040518093819263550f426f60e11b835260048301610a6b565b038173D19FC235f411732fB7cd619505eFf3cB646774a35af4908115610116576000916100e4575b50604051908152f35b90508181813d831161010f575b6100fb81836109f2565b8101031261010a5751386100db565b600080fd5b503d6100f1565b6040513d6000823e3d90fd5b606036600319011261010a5760043567ffffffffffffffff80821161010a573660238301121561010a5781600401351161010a57366024826004013560051b8301011161010a57602a8160040135036106985760048101356001198101116105e857610195600482013560011901610b81565b906101a360405192836109f2565b6004810135600119018083526101b890610b81565b601f190136602084013760406101d5826004013560248401610b99565b905003610666576101ed816004013560248301610b99565b60209291921161010a5760048101356000198101919082116105e857602061022061023c93836004013560248501610bea565b60405163550f426f60e11b815294859283929060048401610ab4565b038173D19FC235f411732fB7cd619505eFf3cB646774a35af491821561011657600092610632575b5060015b600482013560011901811061057e575061028f600482013560011981019060248401610bea565b90601f821661056c57600191815b8183018110610550575b5050506000146104ac575060006102bd84610c2c565b525b9164ffffffffff6024351161049a576000905b60288210610365576102fc60208486604051913583830152604082015260408152610099816109d6565b038173D19FC235f411732fB7cd619505eFf3cB646774a35af4801561011657600090610332575b60209060405190604435148152f35b506020813d60201161035d575b8161034c602093836109f2565b8101031261010a5760209051610323565b3d915061033f565b9092600180602435861c161460001461040b5760206103a4916103888685610c39565b51906040519183830152604082015260408152610099816109d6565b038173D19FC235f411732fB7cd619505eFf3cB646774a35af48015610116576000906103d8575b60019150935b01906102d2565b506020813d602011610403575b816103f2602093836109f2565b8101031261010a57600190516103cb565b3d91506103e5565b60206104369161041b8685610c39565b516040519183830152604082015260408152610099816109d6565b038173D19FC235f411732fB7cd619505eFf3cB646774a35af4801561011657600090610467575b60019150936103d1565b506020813d602011610492575b81610481602093836109f2565b8101031261010a576001905161045d565b3d9150610474565b604051630382f09360e41b8152600490fd5b6104e6906020906104ca906004810135600119810191602401610bea565b60405163550f426f60e11b815293849283929060048401610ab4565b038173D19FC235f411732fB7cd619505eFf3cB646774a35af49081156101165760009161051e575b5061051884610c2c565b526102bf565b90506020813d602011610548575b81610539602093836109f2565b8101031261010a57518461050e565b3d915061052c565b803561055e5760200161029d565b5050505060008580806102a7565b60405163398658fd60e21b8152600490fd5b80602061022061059693856004013560248701610bea565b038173D19FC235f411732fB7cd619505eFf3cB646774a35af4918215610116576000926105fe575b506001196004840135828103820193910183116105e8576105e160019388610c39565b5201610268565b634e487b7160e01b600052601160045260246000fd5b9091506020813d60201161062a575b8161061a602093836109f2565b8101031261010a575190866105be565b3d915061060d565b9091506020813d60201161065e575b8161064e602093836109f2565b8101031261010a57519084610264565b3d9150610641565b61067a816024604493600401359101610b99565b905060405190637b45159f60e01b8252604060048301526024820152fd5b60449060405190637169558560e11b8252602a6004830152600401356024820152fd5b6106c960206104ca36610954565b038173D19FC235f411732fB7cd619505eFf3cB646774a35af48015610116576000906106fb575b602090604051908152f35b506020813d602011610726575b81610715602093836109f2565b8101031261010a57602090516106f0565b3d9150610708565b61074061073a36610954565b90610af1565b60808101519067ffffffffffffffff8082511691602093848201519160408101518460a06060840151930151169360405196888801526040870152606086015260808501526001600160801b03811660a085015260801c60c084015260e083015260e082526101008201908282109082111761083c57604081905263550f426f60e11b8152828160ff19846107d9816101048101610a6b565b03018173D19FC235f411732fB7cd619505eFf3cB646774a35af491821561011657839060009361080d575b50604051838152f35b90809293503d8311610835575b61082481856109f2565b8101031261010a5751828281610804565b503d61081a565b634e487b7160e01b600052604160045260246000fd5b60c061086f61086036610954565b90610869610a39565b50610af1565b6040519060a067ffffffffffffffff918281511684526020810151602085015260408101516040850152606081015160608501526080810151608085015201511660a0820152f35b6108c036610954565b6108c8610a14565b506108d1610a14565b506080810361093557816080918101031261010a576040516080916108f58261099e565b8035918281526020810160208301358152606080604084019360408601358552019301358352604051938452516020840152516040830152516060820152f35b60449060405190637b45159f60e01b8252608060048301526024820152fd5b90602060031983011261010a5760043567ffffffffffffffff9283821161010a578060238301121561010a57816004013593841161010a576024848301011161010a576024019190565b6080810190811067ffffffffffffffff82111761083c57604052565b60c0810190811067ffffffffffffffff82111761083c57604052565b6060810190811067ffffffffffffffff82111761083c57604052565b90601f8019910116810190811067ffffffffffffffff82111761083c57604052565b60405190610a218261099e565b60006060838281528260208201528260408201520152565b60405190610a46826109ba565b8160a06000918281528260208201528260408201528260608201528260808201520152565b6020808252825181830181905290939260005b828110610aa057505060409293506000838284010152601f8019910116010190565b818101860151848201604001528501610a7e565b90918060409360208452816020850152848401376000828201840152601f01601f1916010190565b359067ffffffffffffffff8216820361010a57565b90610afa610a39565b5060c08103610b62578160c0918101031261010a57610b5a60a060405192610b21846109ba565b610b2a81610adc565b84526020810135602085015260408101356040850152606081013560608501526080810135608085015201610adc565b60a082015290565b60449060405190637b45159f60e01b825260c060048301526024820152fd5b67ffffffffffffffff811161083c5760051b60200190565b9015610bd457803590601e198136030182121561010a57019081359167ffffffffffffffff831161010a57602001823603811361010a579190565b634e487b7160e01b600052603260045260246000fd5b9190811015610bd45760051b81013590601e198136030182121561010a57019081359167ffffffffffffffff831161010a57602001823603811361010a579190565b805115610bd45760200190565b8051821015610bd45760209160051b01019056fea2646970667358221220ac8b2e4cc240d9346ed511c254f8dbcfeda457c8231b57eb0668478307528e1264736f6c63430008190033",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b60003560e01c80635ea5a98f146108b757806360f0f00f146108525780638c628e401461072e578063b893e579146106bb578063cc5c21ea146101225763ceeef5041461005e57600080fd5b60208060031936011261010a576100b381600435604051906001600160801b0381168383015260801c604082015260408152610099816109d6565b6040518093819263550f426f60e11b835260048301610a6b565b038173__$4a17aee6ddd256bb219a7270867288aa0a$__5af4908115610116576000916100e4575b50604051908152f35b90508181813d831161010f575b6100fb81836109f2565b8101031261010a5751386100db565b600080fd5b503d6100f1565b6040513d6000823e3d90fd5b606036600319011261010a5760043567ffffffffffffffff80821161010a573660238301121561010a5781600401351161010a57366024826004013560051b8301011161010a57602a8160040135036106985760048101356001198101116105e857610195600482013560011901610b81565b906101a360405192836109f2565b6004810135600119018083526101b890610b81565b601f190136602084013760406101d5826004013560248401610b99565b905003610666576101ed816004013560248301610b99565b60209291921161010a5760048101356000198101919082116105e857602061022061023c93836004013560248501610bea565b60405163550f426f60e11b815294859283929060048401610ab4565b038173__$4a17aee6ddd256bb219a7270867288aa0a$__5af491821561011657600092610632575b5060015b600482013560011901811061057e575061028f600482013560011981019060248401610bea565b90601f821661056c57600191815b8183018110610550575b5050506000146104ac575060006102bd84610c2c565b525b9164ffffffffff6024351161049a576000905b60288210610365576102fc60208486604051913583830152604082015260408152610099816109d6565b038173__$4a17aee6ddd256bb219a7270867288aa0a$__5af4801561011657600090610332575b60209060405190604435148152f35b506020813d60201161035d575b8161034c602093836109f2565b8101031261010a5760209051610323565b3d915061033f565b9092600180602435861c161460001461040b5760206103a4916103888685610c39565b51906040519183830152604082015260408152610099816109d6565b038173__$4a17aee6ddd256bb219a7270867288aa0a$__5af48015610116576000906103d8575b60019150935b01906102d2565b506020813d602011610403575b816103f2602093836109f2565b8101031261010a57600190516103cb565b3d91506103e5565b60206104369161041b8685610c39565b516040519183830152604082015260408152610099816109d6565b038173__$4a17aee6ddd256bb219a7270867288aa0a$__5af4801561011657600090610467575b60019150936103d1565b506020813d602011610492575b81610481602093836109f2565b8101031261010a576001905161045d565b3d9150610474565b604051630382f09360e41b8152600490fd5b6104e6906020906104ca906004810135600119810191602401610bea565b60405163550f426f60e11b815293849283929060048401610ab4565b038173__$4a17aee6ddd256bb219a7270867288aa0a$__5af49081156101165760009161051e575b5061051884610c2c565b526102bf565b90506020813d602011610548575b81610539602093836109f2565b8101031261010a57518461050e565b3d915061052c565b803561055e5760200161029d565b5050505060008580806102a7565b60405163398658fd60e21b8152600490fd5b80602061022061059693856004013560248701610bea565b038173__$4a17aee6ddd256bb219a7270867288aa0a$__5af4918215610116576000926105fe575b506001196004840135828103820193910183116105e8576105e160019388610c39565b5201610268565b634e487b7160e01b600052601160045260246000fd5b9091506020813d60201161062a575b8161061a602093836109f2565b8101031261010a575190866105be565b3d915061060d565b9091506020813d60201161065e575b8161064e602093836109f2565b8101031261010a57519084610264565b3d9150610641565b61067a816024604493600401359101610b99565b905060405190637b45159f60e01b8252604060048301526024820152fd5b60449060405190637169558560e11b8252602a6004830152600401356024820152fd5b6106c960206104ca36610954565b038173__$4a17aee6ddd256bb219a7270867288aa0a$__5af48015610116576000906106fb575b602090604051908152f35b506020813d602011610726575b81610715602093836109f2565b8101031261010a57602090516106f0565b3d9150610708565b61074061073a36610954565b90610af1565b60808101519067ffffffffffffffff8082511691602093848201519160408101518460a06060840151930151169360405196888801526040870152606086015260808501526001600160801b03811660a085015260801c60c084015260e083015260e082526101008201908282109082111761083c57604081905263550f426f60e11b8152828160ff19846107d9816101048101610a6b565b03018173__$4a17aee6ddd256bb219a7270867288aa0a$__5af491821561011657839060009361080d575b50604051838152f35b90809293503d8311610835575b61082481856109f2565b8101031261010a5751828281610804565b503d61081a565b634e487b7160e01b600052604160045260246000fd5b60c061086f61086036610954565b90610869610a39565b50610af1565b6040519060a067ffffffffffffffff918281511684526020810151602085015260408101516040850152606081015160608501526080810151608085015201511660a0820152f35b6108c036610954565b6108c8610a14565b506108d1610a14565b506080810361093557816080918101031261010a576040516080916108f58261099e565b8035918281526020810160208301358152606080604084019360408601358552019301358352604051938452516020840152516040830152516060820152f35b60449060405190637b45159f60e01b8252608060048301526024820152fd5b90602060031983011261010a5760043567ffffffffffffffff9283821161010a578060238301121561010a57816004013593841161010a576024848301011161010a576024019190565b6080810190811067ffffffffffffffff82111761083c57604052565b60c0810190811067ffffffffffffffff82111761083c57604052565b6060810190811067ffffffffffffffff82111761083c57604052565b90601f8019910116810190811067ffffffffffffffff82111761083c57604052565b60405190610a218261099e565b60006060838281528260208201528260408201520152565b60405190610a46826109ba565b8160a06000918281528260208201528260408201528260608201528260808201520152565b6020808252825181830181905290939260005b828110610aa057505060409293506000838284010152601f8019910116010190565b818101860151848201604001528501610a7e565b90918060409360208452816020850152848401376000828201840152601f01601f1916010190565b359067ffffffffffffffff8216820361010a57565b90610afa610a39565b5060c08103610b62578160c0918101031261010a57610b5a60a060405192610b21846109ba565b610b2a81610adc565b84526020810135602085015260408101356040850152606081013560608501526080810135608085015201610adc565b60a082015290565b60449060405190637b45159f60e01b825260c060048301526024820152fd5b67ffffffffffffffff811161083c5760051b60200190565b9015610bd457803590601e198136030182121561010a57019081359167ffffffffffffffff831161010a57602001823603811361010a579190565b634e487b7160e01b600052603260045260246000fd5b9190811015610bd45760051b81013590601e198136030182121561010a57019081359167ffffffffffffffff831161010a57602001823603811361010a579190565b805115610bd45760200190565b8051821015610bd45760209160051b01019056fea2646970667358221220ac8b2e4cc240d9346ed511c254f8dbcfeda457c8231b57eb0668478307528e1264736f6c63430008190033",
  "libraries": {
    "Mimc": "0xD19FC235f411732fB7cd619505eFf3cB646774a3"
  },
  "devdoc": {
    "author": "ConsenSys Software Inc.",
    "custom:security-contact": "security-report@linea.build",
    "kind": "dev",
    "methods": {
      "getAccount(bytes)": {
        "params": {
          "_encodedAccountValue": "Encoded account value bytes (nonce, balance, storageRoot, mimcCodeHash, keccakCodeHash, codeSize)"
        },
        "returns": {
          "_0": "Account Formatted account struct"
        }
      },
      "getLeaf(bytes)": {
        "params": {
          "_encodedLeaf": "Encoded leaf bytes (prev, next, hKey, hValue)"
        },
        "returns": {
          "_0": "Leaf Formatted leaf struct"
        }
      },
      "hashAccountValue(bytes)": {
        "params": {
          "_value": "Encoded account value bytes (nonce, balance, storageRoot, mimcCodeHash, keccakCodeHash, codeSize)"
        },
        "returns": {
          "_0": "{bytes32} Account value hash"
        }
      },
      "hashStorageValue(bytes32)": {
        "params": {
          "_value": "Encoded storage value bytes"
        },
        "returns": {
          "_0": "{bytes32} Storage value hash"
        }
      },
      "mimcHash(bytes)": {
        "params": {
          "_input": "Value to hash"
        },
        "returns": {
          "_0": "{bytes32} Mimc hash"
        }
      },
      "verifyProof(bytes[],uint256,bytes32)": {
        "params": {
          "_leafIndex": "Index of the leaf",
          "_rawProof": "Raw sparse merkle tree proof",
          "_root": "Sparse merkle root"
        },
        "returns": {
          "_0": "If the computed merkle root matches the provided one"
        }
      }
    },
    "title": "Library to perform SparseMerkleProof actions using the MiMC hashing algorithm",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "LengthNotMod32()": [
        {
          "notice": "Thrown when the length of bytes is not in exactly 32 byte chunks"
        }
      ],
      "MaxTreeLeafIndexExceed()": [
        {
          "notice": "Thrown when the leaf index is higher than the tree depth"
        }
      ],
      "WrongBytesLength(uint256,uint256)": [
        {
          "notice": "Thrown when expected bytes length is incorrect"
        }
      ],
      "WrongProofLength(uint256,uint256)": [
        {
          "notice": "Thrown when the length of the unformatted proof is not provided exactly as expected (UNFORMATTED_PROOF_LENGTH)"
        }
      ]
    },
    "kind": "user",
    "methods": {
      "getAccount(bytes)": {
        "notice": "Get account"
      },
      "getLeaf(bytes)": {
        "notice": "Get leaf"
      },
      "hashAccountValue(bytes)": {
        "notice": "Hash account value"
      },
      "hashStorageValue(bytes32)": {
        "notice": "Hash storage value"
      },
      "mimcHash(bytes)": {
        "notice": "Hash a value using MIMC hash"
      },
      "verifyProof(bytes[],uint256,bytes32)": {
        "notice": "Formats input, computes root and returns true if it matches the provided merkle root"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}