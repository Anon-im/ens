{
  "address": "0xD8E10beb27DbAd30BcfB4a6824f1B480C9Bfe32A",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IEVMVerifier",
          "name": "_verifier",
          "type": "address"
        },
        {
          "internalType": "contract ENS",
          "name": "_ens",
          "type": "address"
        },
        {
          "internalType": "contract INameWrapper",
          "name": "_nameWrapper",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_graphqlUrl",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_l2ChainId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "CommandTooLong",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "max",
          "type": "uint256"
        }
      ],
      "name": "InvalidReference",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "string[]",
          "name": "urls",
          "type": "string[]"
        },
        {
          "internalType": "bytes",
          "name": "callData",
          "type": "bytes"
        },
        {
          "internalType": "bytes4",
          "name": "callbackFunction",
          "type": "bytes4"
        },
        {
          "internalType": "bytes",
          "name": "extraData",
          "type": "bytes"
        }
      ],
      "name": "OffchainLookup",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "actual",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expected",
          "type": "uint256"
        }
      ],
      "name": "ResponseLengthMismatch",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        }
      ],
      "name": "StorageHandledByL2",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "max",
          "type": "uint256"
        }
      ],
      "name": "TooManyCommands",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "name",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "graphqlUrl",
          "type": "string"
        }
      ],
      "name": "MetadataChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "name",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "TargetSet",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "values",
          "type": "bytes[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "addrCallback",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "values",
          "type": "bytes[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "addrCoinTypeCallback",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "values",
          "type": "bytes[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "contenthashCallback",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ens",
      "outputs": [
        {
          "internalType": "contract ENS",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "response",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "extradata",
          "type": "bytes"
        }
      ],
      "name": "getStorageSlotsCallback",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "name",
          "type": "bytes"
        }
      ],
      "name": "getTarget",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "graphqlUrl",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l2ChainId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "name",
          "type": "bytes"
        }
      ],
      "name": "metadata",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nameWrapper",
      "outputs": [
        {
          "internalType": "contract INameWrapper",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "name",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "resolve",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "result",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "name",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "setAddr",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "result",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "name",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "setTarget",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "values",
          "type": "bytes[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "textCallback",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "verifier",
      "outputs": [
        {
          "internalType": "contract IEVMVerifier",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x4db13c78740626af6a36f720413ed29435040e890c7562d7180104f00e2c51d2",
  "receipt": {
    "to": null,
    "from": "0x644e1ce71A6AfF1Fc52955214DF978DBB28f7a97",
    "contractAddress": "0xD8E10beb27DbAd30BcfB4a6824f1B480C9Bfe32A",
    "transactionIndex": 39,
    "gasUsed": "2068571",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x0eb90b6f914e8860d9c35928f105c42c77dc0dce409316b5e59a68afa65bb188",
    "transactionHash": "0x4db13c78740626af6a36f720413ed29435040e890c7562d7180104f00e2c51d2",
    "logs": [],
    "blockNumber": 6320555,
    "cumulativeGasUsed": "8789085",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0E17803049765C276Ae09a3D1450F82F6a75D220",
    "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
    "0x0635513f179D50A207757E05759CbD106d7dFcE8",
    "https://api.studio.thegraph.com/query/69290/ens-linea-sepolia/version/latest",
    59141
  ],
  "numDeployments": 7,
  "solcInputHash": "617c92f0f6f9d0cc08a713d0472e5f03",
  "metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IEVMVerifier\",\"name\":\"_verifier\",\"type\":\"address\"},{\"internalType\":\"contract ENS\",\"name\":\"_ens\",\"type\":\"address\"},{\"internalType\":\"contract INameWrapper\",\"name\":\"_nameWrapper\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_graphqlUrl\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_l2ChainId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CommandTooLong\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"InvalidReference\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"urls\",\"type\":\"string[]\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"bytes4\",\"name\":\"callbackFunction\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"OffchainLookup\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"}],\"name\":\"ResponseLengthMismatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"StorageHandledByL2\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"TooManyCommands\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"graphqlUrl\",\"type\":\"string\"}],\"name\":\"MetadataChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"TargetSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"values\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"addrCallback\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"values\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"addrCoinTypeCallback\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"values\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"contenthashCallback\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ens\",\"outputs\":[{\"internalType\":\"contract ENS\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"extradata\",\"type\":\"bytes\"}],\"name\":\"getStorageSlotsCallback\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"}],\"name\":\"getTarget\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"graphqlUrl\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2ChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"}],\"name\":\"metadata\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nameWrapper\",\"outputs\":[{\"internalType\":\"contract INameWrapper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"resolve\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setAddr\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"setTarget\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"values\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"textCallback\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verifier\",\"outputs\":[{\"internalType\":\"contract IEVMVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"StorageHandledByL2(uint256,address)\":[{\"details\":\"EIP-5559 - Error to raise when mutations are being deferred to an L2.\",\"params\":{\"chainId\":\"Chain ID to perform the deferred mutation to.\",\"contractAddress\":\"Contract Address at which the deferred mutation should transact with.\"}}]},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_ens\":\"The ENS registry address\",\"_graphqlUrl\":\"The offchain/l2 graphql endpoint url\",\"_l2ChainId\":\"The chainId at which the resolver resolves data from\",\"_nameWrapper\":\"The ENS name wrapper address\",\"_verifier\":\"The chain verifier address\"}},\"getStorageSlotsCallback(bytes,bytes)\":{\"details\":\"Internal callback function invoked by CCIP-Read in response to a `getStorageSlots` request.\"},\"getTarget(bytes)\":{\"details\":\"Returns the L2 target address that can answer queries for `name`.\",\"params\":{\"name\":\"DNS encoded ENS name to query\"},\"returns\":{\"node\":\"The node of the name\",\"target\":\"The L2 resolver address to verify against.\"}},\"metadata(bytes)\":{\"details\":\"This function provides metadata about the L1 Resolver, including its name, coin type, GraphQL URL, storage type, and encoded information.\",\"params\":{\"name\":\"The domain name in format (dnsEncoded)\"},\"returns\":{\"_0\":\"graphqlUrl The GraphQL URL used by the resolver\"}},\"resolve(bytes,bytes)\":{\"details\":\"Resolve and verify a record stored in l2 target address. It supports subname by fetching target recursively to the nearest parent.\",\"params\":{\"data\":\"The actual calldata\",\"name\":\"DNS encoded ENS name to query\"},\"returns\":{\"result\":\"result of the call\"}},\"setAddr(bytes,address)\":{\"details\":\"Resolve and throws an EIP 3559 compliant error\",\"params\":{\"_addr\":\"The actual calldata\",\"name\":\"DNS encoded ENS name to query\"},\"returns\":{\"result\":\"result of the call\"}},\"setTarget(bytes,address)\":{\"params\":{\"name\":\"The encoded name to query.\",\"target\":\"The L2 resolver address to verify against.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"metadata(bytes)\":{\"notice\":\"Get metadata about the L1 Resolver\"},\"setTarget(bytes,address)\":{\"notice\":\"Set target address to verify against\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/L1Resolver.sol\":\"L1Resolver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@ensdomains/ens-contracts/contracts/dnssec-oracle/BytesUtils.sol\":{\"content\":\"pragma solidity ^0.8.4;\\n\\nlibrary BytesUtils {\\n    error OffsetOutOfBoundsError(uint256 offset, uint256 length);\\n\\n    /*\\n     * @dev Returns the keccak-256 hash of a byte range.\\n     * @param self The byte string to hash.\\n     * @param offset The position to start hashing at.\\n     * @param len The number of bytes to hash.\\n     * @return The hash of the byte range.\\n     */\\n    function keccak(\\n        bytes memory self,\\n        uint256 offset,\\n        uint256 len\\n    ) internal pure returns (bytes32 ret) {\\n        require(offset + len <= self.length);\\n        assembly {\\n            ret := keccak256(add(add(self, 32), offset), len)\\n        }\\n    }\\n\\n    /*\\n     * @dev Returns a positive number if `other` comes lexicographically after\\n     *      `self`, a negative number if it comes before, or zero if the\\n     *      contents of the two bytes are equal.\\n     * @param self The first bytes to compare.\\n     * @param other The second bytes to compare.\\n     * @return The result of the comparison.\\n     */\\n    function compare(\\n        bytes memory self,\\n        bytes memory other\\n    ) internal pure returns (int256) {\\n        return compare(self, 0, self.length, other, 0, other.length);\\n    }\\n\\n    /*\\n     * @dev Returns a positive number if `other` comes lexicographically after\\n     *      `self`, a negative number if it comes before, or zero if the\\n     *      contents of the two bytes are equal. Comparison is done per-rune,\\n     *      on unicode codepoints.\\n     * @param self The first bytes to compare.\\n     * @param offset The offset of self.\\n     * @param len    The length of self.\\n     * @param other The second bytes to compare.\\n     * @param otheroffset The offset of the other string.\\n     * @param otherlen    The length of the other string.\\n     * @return The result of the comparison.\\n     */\\n    function compare(\\n        bytes memory self,\\n        uint256 offset,\\n        uint256 len,\\n        bytes memory other,\\n        uint256 otheroffset,\\n        uint256 otherlen\\n    ) internal pure returns (int256) {\\n        if (offset + len > self.length) {\\n            revert OffsetOutOfBoundsError(offset + len, self.length);\\n        }\\n        if (otheroffset + otherlen > other.length) {\\n            revert OffsetOutOfBoundsError(otheroffset + otherlen, other.length);\\n        }\\n\\n        uint256 shortest = len;\\n        if (otherlen < len) shortest = otherlen;\\n\\n        uint256 selfptr;\\n        uint256 otherptr;\\n\\n        assembly {\\n            selfptr := add(self, add(offset, 32))\\n            otherptr := add(other, add(otheroffset, 32))\\n        }\\n        for (uint256 idx = 0; idx < shortest; idx += 32) {\\n            uint256 a;\\n            uint256 b;\\n            assembly {\\n                a := mload(selfptr)\\n                b := mload(otherptr)\\n            }\\n            if (a != b) {\\n                // Mask out irrelevant bytes and check again\\n                uint256 mask;\\n                if (shortest - idx >= 32) {\\n                    mask = type(uint256).max;\\n                } else {\\n                    mask = ~(2 ** (8 * (idx + 32 - shortest)) - 1);\\n                }\\n                int256 diff = int256(a & mask) - int256(b & mask);\\n                if (diff != 0) return diff;\\n            }\\n            selfptr += 32;\\n            otherptr += 32;\\n        }\\n\\n        return int256(len) - int256(otherlen);\\n    }\\n\\n    /*\\n     * @dev Returns true if the two byte ranges are equal.\\n     * @param self The first byte range to compare.\\n     * @param offset The offset into the first byte range.\\n     * @param other The second byte range to compare.\\n     * @param otherOffset The offset into the second byte range.\\n     * @param len The number of bytes to compare\\n     * @return True if the byte ranges are equal, false otherwise.\\n     */\\n    function equals(\\n        bytes memory self,\\n        uint256 offset,\\n        bytes memory other,\\n        uint256 otherOffset,\\n        uint256 len\\n    ) internal pure returns (bool) {\\n        return keccak(self, offset, len) == keccak(other, otherOffset, len);\\n    }\\n\\n    /*\\n     * @dev Returns true if the two byte ranges are equal with offsets.\\n     * @param self The first byte range to compare.\\n     * @param offset The offset into the first byte range.\\n     * @param other The second byte range to compare.\\n     * @param otherOffset The offset into the second byte range.\\n     * @return True if the byte ranges are equal, false otherwise.\\n     */\\n    function equals(\\n        bytes memory self,\\n        uint256 offset,\\n        bytes memory other,\\n        uint256 otherOffset\\n    ) internal pure returns (bool) {\\n        return\\n            keccak(self, offset, self.length - offset) ==\\n            keccak(other, otherOffset, other.length - otherOffset);\\n    }\\n\\n    /*\\n     * @dev Compares a range of 'self' to all of 'other' and returns True iff\\n     *      they are equal.\\n     * @param self The first byte range to compare.\\n     * @param offset The offset into the first byte range.\\n     * @param other The second byte range to compare.\\n     * @return True if the byte ranges are equal, false otherwise.\\n     */\\n    function equals(\\n        bytes memory self,\\n        uint256 offset,\\n        bytes memory other\\n    ) internal pure returns (bool) {\\n        return\\n            self.length == offset + other.length &&\\n            equals(self, offset, other, 0, other.length);\\n    }\\n\\n    /*\\n     * @dev Returns true if the two byte ranges are equal.\\n     * @param self The first byte range to compare.\\n     * @param other The second byte range to compare.\\n     * @return True if the byte ranges are equal, false otherwise.\\n     */\\n    function equals(\\n        bytes memory self,\\n        bytes memory other\\n    ) internal pure returns (bool) {\\n        return\\n            self.length == other.length &&\\n            equals(self, 0, other, 0, self.length);\\n    }\\n\\n    /*\\n     * @dev Returns the 8-bit number at the specified index of self.\\n     * @param self The byte string.\\n     * @param idx The index into the bytes\\n     * @return The specified 8 bits of the string, interpreted as an integer.\\n     */\\n    function readUint8(\\n        bytes memory self,\\n        uint256 idx\\n    ) internal pure returns (uint8 ret) {\\n        return uint8(self[idx]);\\n    }\\n\\n    /*\\n     * @dev Returns the 16-bit number at the specified index of self.\\n     * @param self The byte string.\\n     * @param idx The index into the bytes\\n     * @return The specified 16 bits of the string, interpreted as an integer.\\n     */\\n    function readUint16(\\n        bytes memory self,\\n        uint256 idx\\n    ) internal pure returns (uint16 ret) {\\n        require(idx + 2 <= self.length);\\n        assembly {\\n            ret := and(mload(add(add(self, 2), idx)), 0xFFFF)\\n        }\\n    }\\n\\n    /*\\n     * @dev Returns the 32-bit number at the specified index of self.\\n     * @param self The byte string.\\n     * @param idx The index into the bytes\\n     * @return The specified 32 bits of the string, interpreted as an integer.\\n     */\\n    function readUint32(\\n        bytes memory self,\\n        uint256 idx\\n    ) internal pure returns (uint32 ret) {\\n        require(idx + 4 <= self.length);\\n        assembly {\\n            ret := and(mload(add(add(self, 4), idx)), 0xFFFFFFFF)\\n        }\\n    }\\n\\n    /*\\n     * @dev Returns the 32 byte value at the specified index of self.\\n     * @param self The byte string.\\n     * @param idx The index into the bytes\\n     * @return The specified 32 bytes of the string.\\n     */\\n    function readBytes32(\\n        bytes memory self,\\n        uint256 idx\\n    ) internal pure returns (bytes32 ret) {\\n        require(idx + 32 <= self.length);\\n        assembly {\\n            ret := mload(add(add(self, 32), idx))\\n        }\\n    }\\n\\n    /*\\n     * @dev Returns the 32 byte value at the specified index of self.\\n     * @param self The byte string.\\n     * @param idx The index into the bytes\\n     * @return The specified 32 bytes of the string.\\n     */\\n    function readBytes20(\\n        bytes memory self,\\n        uint256 idx\\n    ) internal pure returns (bytes20 ret) {\\n        require(idx + 20 <= self.length);\\n        assembly {\\n            ret := and(\\n                mload(add(add(self, 32), idx)),\\n                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000\\n            )\\n        }\\n    }\\n\\n    /*\\n     * @dev Returns the n byte value at the specified index of self.\\n     * @param self The byte string.\\n     * @param idx The index into the bytes.\\n     * @param len The number of bytes.\\n     * @return The specified 32 bytes of the string.\\n     */\\n    function readBytesN(\\n        bytes memory self,\\n        uint256 idx,\\n        uint256 len\\n    ) internal pure returns (bytes32 ret) {\\n        require(len <= 32);\\n        require(idx + len <= self.length);\\n        assembly {\\n            let mask := not(sub(exp(256, sub(32, len)), 1))\\n            ret := and(mload(add(add(self, 32), idx)), mask)\\n        }\\n    }\\n\\n    function memcpy(uint256 dest, uint256 src, uint256 len) private pure {\\n        // Copy word-length chunks while possible\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        unchecked {\\n            uint256 mask = (256 ** (32 - len)) - 1;\\n            assembly {\\n                let srcpart := and(mload(src), not(mask))\\n                let destpart := and(mload(dest), mask)\\n                mstore(dest, or(destpart, srcpart))\\n            }\\n        }\\n    }\\n\\n    /*\\n     * @dev Copies a substring into a new byte string.\\n     * @param self The byte string to copy from.\\n     * @param offset The offset to start copying at.\\n     * @param len The number of bytes to copy.\\n     */\\n    function substring(\\n        bytes memory self,\\n        uint256 offset,\\n        uint256 len\\n    ) internal pure returns (bytes memory) {\\n        require(offset + len <= self.length);\\n\\n        bytes memory ret = new bytes(len);\\n        uint256 dest;\\n        uint256 src;\\n\\n        assembly {\\n            dest := add(ret, 32)\\n            src := add(add(self, 32), offset)\\n        }\\n        memcpy(dest, src, len);\\n\\n        return ret;\\n    }\\n\\n    // Maps characters from 0x30 to 0x7A to their base32 values.\\n    // 0xFF represents invalid characters in that range.\\n    bytes constant base32HexTable =\\n        hex\\\"00010203040506070809FFFFFFFFFFFFFF0A0B0C0D0E0F101112131415161718191A1B1C1D1E1FFFFFFFFFFFFFFFFFFFFF0A0B0C0D0E0F101112131415161718191A1B1C1D1E1F\\\";\\n\\n    /**\\n     * @dev Decodes unpadded base32 data of up to one word in length.\\n     * @param self The data to decode.\\n     * @param off Offset into the string to start at.\\n     * @param len Number of characters to decode.\\n     * @return The decoded data, left aligned.\\n     */\\n    function base32HexDecodeWord(\\n        bytes memory self,\\n        uint256 off,\\n        uint256 len\\n    ) internal pure returns (bytes32) {\\n        require(len <= 52);\\n\\n        uint256 ret = 0;\\n        uint8 decoded;\\n        for (uint256 i = 0; i < len; i++) {\\n            bytes1 char = self[off + i];\\n            require(char >= 0x30 && char <= 0x7A);\\n            decoded = uint8(base32HexTable[uint256(uint8(char)) - 0x30]);\\n            require(decoded <= 0x20);\\n            if (i == len - 1) {\\n                break;\\n            }\\n            ret = (ret << 5) | decoded;\\n        }\\n\\n        uint256 bitlen = len * 5;\\n        if (len % 8 == 0) {\\n            // Multiple of 8 characters, no padding\\n            ret = (ret << 5) | decoded;\\n        } else if (len % 8 == 2) {\\n            // Two extra characters - 1 byte\\n            ret = (ret << 3) | (decoded >> 2);\\n            bitlen -= 2;\\n        } else if (len % 8 == 4) {\\n            // Four extra characters - 2 bytes\\n            ret = (ret << 1) | (decoded >> 4);\\n            bitlen -= 4;\\n        } else if (len % 8 == 5) {\\n            // Five extra characters - 3 bytes\\n            ret = (ret << 4) | (decoded >> 1);\\n            bitlen -= 1;\\n        } else if (len % 8 == 7) {\\n            // Seven extra characters - 4 bytes\\n            ret = (ret << 2) | (decoded >> 3);\\n            bitlen -= 3;\\n        } else {\\n            revert();\\n        }\\n\\n        return bytes32(ret << (256 - bitlen));\\n    }\\n\\n    /**\\n     * @dev Finds the first occurrence of the byte `needle` in `self`.\\n     * @param self The string to search\\n     * @param off The offset to start searching at\\n     * @param len The number of bytes to search\\n     * @param needle The byte to search for\\n     * @return The offset of `needle` in `self`, or 2**256-1 if it was not found.\\n     */\\n    function find(\\n        bytes memory self,\\n        uint256 off,\\n        uint256 len,\\n        bytes1 needle\\n    ) internal pure returns (uint256) {\\n        for (uint256 idx = off; idx < off + len; idx++) {\\n            if (self[idx] == needle) {\\n                return idx;\\n            }\\n        }\\n        return type(uint256).max;\\n    }\\n}\\n\",\"keccak256\":\"0x4f10902639b85a17ae10745264feff322e793bfb1bc130a9a90efa7dda47c6cc\"},\"@ensdomains/ens-contracts/contracts/ethregistrar/IBaseRegistrar.sol\":{\"content\":\"import \\\"../registry/ENS.sol\\\";\\nimport \\\"./IBaseRegistrar.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface IBaseRegistrar is IERC721 {\\n    event ControllerAdded(address indexed controller);\\n    event ControllerRemoved(address indexed controller);\\n    event NameMigrated(\\n        uint256 indexed id,\\n        address indexed owner,\\n        uint256 expires\\n    );\\n    event NameRegistered(\\n        uint256 indexed id,\\n        address indexed owner,\\n        uint256 expires\\n    );\\n    event NameRenewed(uint256 indexed id, uint256 expires);\\n\\n    // Authorises a controller, who can register and renew domains.\\n    function addController(address controller) external;\\n\\n    // Revoke controller permission for an address.\\n    function removeController(address controller) external;\\n\\n    // Set the resolver for the TLD this registrar manages.\\n    function setResolver(address resolver) external;\\n\\n    // Returns the expiration timestamp of the specified label hash.\\n    function nameExpires(uint256 id) external view returns (uint256);\\n\\n    // Returns true if the specified name is available for registration.\\n    function available(uint256 id) external view returns (bool);\\n\\n    /**\\n     * @dev Register a name.\\n     */\\n    function register(\\n        uint256 id,\\n        address owner,\\n        uint256 duration\\n    ) external returns (uint256);\\n\\n    function renew(uint256 id, uint256 duration) external returns (uint256);\\n\\n    /**\\n     * @dev Reclaim ownership of a name in ENS, if you own it in the registrar.\\n     */\\n    function reclaim(uint256 id, address owner) external;\\n}\\n\",\"keccak256\":\"0x15f7b1dfa7cd34444daf79ec9b4d40437caa9257893ce0639d706fcc2ba69e52\"},\"@ensdomains/ens-contracts/contracts/registry/ENS.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\ninterface ENS {\\n    // Logged when the owner of a node assigns a new owner to a subnode.\\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n    // Logged when the owner of a node transfers ownership to a new account.\\n    event Transfer(bytes32 indexed node, address owner);\\n\\n    // Logged when the resolver for a node changes.\\n    event NewResolver(bytes32 indexed node, address resolver);\\n\\n    // Logged when the TTL of a node changes\\n    event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n    // Logged when an operator is added or removed.\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    function setRecord(\\n        bytes32 node,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeRecord(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeOwner(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner\\n    ) external returns (bytes32);\\n\\n    function setResolver(bytes32 node, address resolver) external;\\n\\n    function setOwner(bytes32 node, address owner) external;\\n\\n    function setTTL(bytes32 node, uint64 ttl) external;\\n\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    function owner(bytes32 node) external view returns (address);\\n\\n    function resolver(bytes32 node) external view returns (address);\\n\\n    function ttl(bytes32 node) external view returns (uint64);\\n\\n    function recordExists(bytes32 node) external view returns (bool);\\n\\n    function isApprovedForAll(\\n        address owner,\\n        address operator\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x7cb1158c7d268b63de1468e28e2711b28d686e2628ddb22da2149cd93ddeafda\"},\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IAddrResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\n/**\\n * Interface for the legacy (ETH-only) addr function.\\n */\\ninterface IAddrResolver {\\n    event AddrChanged(bytes32 indexed node, address a);\\n\\n    /**\\n     * Returns the address associated with an ENS node.\\n     * @param node The ENS node to query.\\n     * @return The associated address.\\n     */\\n    function addr(bytes32 node) external view returns (address payable);\\n}\\n\",\"keccak256\":\"0x2ad7f2fc60ebe0f93745fe70247f6a854f66af732483fda2a3c5e055614445e8\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\n/**\\n * Interface for the new (multicoin) addr function.\\n */\\ninterface IAddressResolver {\\n    event AddressChanged(\\n        bytes32 indexed node,\\n        uint256 coinType,\\n        bytes newAddress\\n    );\\n\\n    function addr(\\n        bytes32 node,\\n        uint256 coinType\\n    ) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x411447c1e90c51e09702815a85ec725ffbbe37cf96e8cc4d2a8bd4ad8a59d73e\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IContentHashResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IContentHashResolver {\\n    event ContenthashChanged(bytes32 indexed node, bytes hash);\\n\\n    /**\\n     * Returns the contenthash associated with an ENS node.\\n     * @param node The ENS node to query.\\n     * @return The associated contenthash.\\n     */\\n    function contenthash(bytes32 node) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xd95cd77684ba5752c428d7dceb4ecc6506ac94f4fbb910489637eb68dcd8e366\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IExtendedResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IExtendedResolver {\\n    function resolve(\\n        bytes memory name,\\n        bytes memory data\\n    ) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x5d81521cfae7d9a4475d27533cd8ed0d3475d369eb0674fd90ffbdbdf292faa3\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/resolvers/profiles/ITextResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface ITextResolver {\\n    event TextChanged(\\n        bytes32 indexed node,\\n        string indexed indexedKey,\\n        string key,\\n        string value\\n    );\\n\\n    /**\\n     * Returns the text data associated with an ENS node and key.\\n     * @param node The ENS node to query.\\n     * @param key The text data key to query.\\n     * @return The associated text data.\\n     */\\n    function text(\\n        bytes32 node,\\n        string calldata key\\n    ) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x7c5debb3c42cd9f5de2274ea7aa053f238608314b62db441c40e31cea2543fd5\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/wrapper/IMetadataService.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ~0.8.17;\\n\\ninterface IMetadataService {\\n    function uri(uint256) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xb3f1cf6df01ed7b15e5f2318f6823afbdb586ca38c2124c67955c645647ae9a2\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/wrapper/INameWrapper.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ~0.8.17;\\n\\nimport \\\"../registry/ENS.sol\\\";\\nimport \\\"../ethregistrar/IBaseRegistrar.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"./IMetadataService.sol\\\";\\nimport \\\"./INameWrapperUpgrade.sol\\\";\\n\\nuint32 constant CANNOT_UNWRAP = 1;\\nuint32 constant CANNOT_BURN_FUSES = 2;\\nuint32 constant CANNOT_TRANSFER = 4;\\nuint32 constant CANNOT_SET_RESOLVER = 8;\\nuint32 constant CANNOT_SET_TTL = 16;\\nuint32 constant CANNOT_CREATE_SUBDOMAIN = 32;\\nuint32 constant CANNOT_APPROVE = 64;\\n//uint16 reserved for parent controlled fuses from bit 17 to bit 32\\nuint32 constant PARENT_CANNOT_CONTROL = 1 << 16;\\nuint32 constant IS_DOT_ETH = 1 << 17;\\nuint32 constant CAN_EXTEND_EXPIRY = 1 << 18;\\nuint32 constant CAN_DO_EVERYTHING = 0;\\nuint32 constant PARENT_CONTROLLED_FUSES = 0xFFFF0000;\\n// all fuses apart from IS_DOT_ETH\\nuint32 constant USER_SETTABLE_FUSES = 0xFFFDFFFF;\\n\\ninterface INameWrapper is IERC1155 {\\n    event NameWrapped(\\n        bytes32 indexed node,\\n        bytes name,\\n        address owner,\\n        uint32 fuses,\\n        uint64 expiry\\n    );\\n\\n    event NameUnwrapped(bytes32 indexed node, address owner);\\n\\n    event FusesSet(bytes32 indexed node, uint32 fuses);\\n    event ExpiryExtended(bytes32 indexed node, uint64 expiry);\\n\\n    function ens() external view returns (ENS);\\n\\n    function registrar() external view returns (IBaseRegistrar);\\n\\n    function metadataService() external view returns (IMetadataService);\\n\\n    function names(bytes32) external view returns (bytes memory);\\n\\n    function name() external view returns (string memory);\\n\\n    function upgradeContract() external view returns (INameWrapperUpgrade);\\n\\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\\n\\n    function wrap(\\n        bytes calldata name,\\n        address wrappedOwner,\\n        address resolver\\n    ) external;\\n\\n    function wrapETH2LD(\\n        string calldata label,\\n        address wrappedOwner,\\n        uint16 ownerControlledFuses,\\n        address resolver\\n    ) external returns (uint64 expires);\\n\\n    function registerAndWrapETH2LD(\\n        string calldata label,\\n        address wrappedOwner,\\n        uint256 duration,\\n        address resolver,\\n        uint16 ownerControlledFuses\\n    ) external returns (uint256 registrarExpiry);\\n\\n    function renew(\\n        uint256 labelHash,\\n        uint256 duration\\n    ) external returns (uint256 expires);\\n\\n    function unwrap(bytes32 node, bytes32 label, address owner) external;\\n\\n    function unwrapETH2LD(\\n        bytes32 label,\\n        address newRegistrant,\\n        address newController\\n    ) external;\\n\\n    function upgrade(bytes calldata name, bytes calldata extraData) external;\\n\\n    function setFuses(\\n        bytes32 node,\\n        uint16 ownerControlledFuses\\n    ) external returns (uint32 newFuses);\\n\\n    function setChildFuses(\\n        bytes32 parentNode,\\n        bytes32 labelhash,\\n        uint32 fuses,\\n        uint64 expiry\\n    ) external;\\n\\n    function setSubnodeRecord(\\n        bytes32 node,\\n        string calldata label,\\n        address owner,\\n        address resolver,\\n        uint64 ttl,\\n        uint32 fuses,\\n        uint64 expiry\\n    ) external returns (bytes32);\\n\\n    function setRecord(\\n        bytes32 node,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeOwner(\\n        bytes32 node,\\n        string calldata label,\\n        address newOwner,\\n        uint32 fuses,\\n        uint64 expiry\\n    ) external returns (bytes32);\\n\\n    function extendExpiry(\\n        bytes32 node,\\n        bytes32 labelhash,\\n        uint64 expiry\\n    ) external returns (uint64);\\n\\n    function canModifyName(\\n        bytes32 node,\\n        address addr\\n    ) external view returns (bool);\\n\\n    function setResolver(bytes32 node, address resolver) external;\\n\\n    function setTTL(bytes32 node, uint64 ttl) external;\\n\\n    function ownerOf(uint256 id) external view returns (address owner);\\n\\n    function approve(address to, uint256 tokenId) external;\\n\\n    function getApproved(uint256 tokenId) external view returns (address);\\n\\n    function getData(\\n        uint256 id\\n    ) external view returns (address, uint32, uint64);\\n\\n    function setMetadataService(IMetadataService _metadataService) external;\\n\\n    function uri(uint256 tokenId) external view returns (string memory);\\n\\n    function setUpgradeContract(INameWrapperUpgrade _upgradeAddress) external;\\n\\n    function allFusesBurned(\\n        bytes32 node,\\n        uint32 fuseMask\\n    ) external view returns (bool);\\n\\n    function isWrapped(bytes32) external view returns (bool);\\n\\n    function isWrapped(bytes32, bytes32) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x70310eb67146d7290731c31841399640ac3b6a949eadc6598bc150123d185c57\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/wrapper/INameWrapperUpgrade.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ~0.8.17;\\n\\ninterface INameWrapperUpgrade {\\n    function wrapFromUpgrade(\\n        bytes calldata name,\\n        address wrappedOwner,\\n        uint32 fuses,\\n        uint64 expiry,\\n        address approved,\\n        bytes calldata extraData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x42e0cec6cd9d1a62d51d45b678f69d3e4ad5555e659b197e41257b308346bb8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xcab667ddad478ff0d39c2053ca77fac778af8483c18ab07d810277b4216fd582\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/IAddrSetter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.25;\\n\\ninterface IAddrSetter {\\n    function setAddr(\\n        bytes calldata name,\\n        address _addr\\n    ) external view returns (bytes memory result);\\n}\\n\",\"keccak256\":\"0xd211ec6793d80d0bb7643d8f15e5773abe38541edee0b85eb83283ca5fdd1525\",\"license\":\"MIT\"},\"contracts/IMetadataResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.25;\\n\\ninterface IMetadataResolver {\\n    /*\\n     * @notice Get metadata about the CCIP Resolver ENSIP 16 https://docs.ens.domains/ens-improvement-proposals/ensip-16-offchain-metadata\\n     * @dev This function provides metadata about the CCIP Resolver, including its name, coin type, GraphQL URL, storage type, and encoded information.\\n     * @param name The domain name in format (dnsEncoded)\\n     * @return graphqlUrl The GraphQL URL used by the resolver\\n     *\\n     */\\n    function metadata(\\n        bytes calldata name\\n    ) external view returns (string memory graphqlUrl);\\n\\n    event MetadataChanged(bytes name, string graphqlUrl);\\n}\\n\",\"keccak256\":\"0xe2edf067122145bfd59e95b0f5b3507bd0cd2715b6b7d7068e70c6cbef09e5ae\",\"license\":\"MIT\"},\"contracts/ITargetResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.25;\\n\\ninterface ITargetResolver {\\n    function getTarget(\\n        bytes memory name\\n    ) external view returns (bytes32 node, address target);\\n}\\n\",\"keccak256\":\"0x2daa66377cc37fc99b927d87f5495259ed6e49c0f10af1f75bd5fd74964e5b78\",\"license\":\"MIT\"},\"contracts/L1Resolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.25;\\n\\nimport {EVMFetcher} from \\\"linea-state-verifier/contracts/EVMFetcher.sol\\\";\\nimport {EVMFetchTarget} from \\\"linea-state-verifier/contracts/EVMFetchTarget.sol\\\";\\nimport {IEVMVerifier} from \\\"linea-state-verifier/contracts/IEVMVerifier.sol\\\";\\nimport \\\"@ensdomains/ens-contracts/contracts/registry/ENS.sol\\\";\\nimport {INameWrapper} from \\\"@ensdomains/ens-contracts/contracts/wrapper/INameWrapper.sol\\\";\\nimport {BytesUtils} from \\\"@ensdomains/ens-contracts/contracts/dnssec-oracle/BytesUtils.sol\\\";\\nimport {IAddrResolver} from \\\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IAddrResolver.sol\\\";\\nimport {IAddressResolver} from \\\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IAddressResolver.sol\\\";\\nimport {ITextResolver} from \\\"@ensdomains/ens-contracts/contracts/resolvers/profiles/ITextResolver.sol\\\";\\nimport {IContentHashResolver} from \\\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IContentHashResolver.sol\\\";\\nimport \\\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IExtendedResolver.sol\\\";\\nimport {ITargetResolver} from \\\"./ITargetResolver.sol\\\";\\nimport {IMetadataResolver} from \\\"./IMetadataResolver.sol\\\";\\nimport {IAddrSetter} from \\\"./IAddrSetter.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\ncontract L1Resolver is\\n    EVMFetchTarget,\\n    ITargetResolver,\\n    IMetadataResolver,\\n    IExtendedResolver,\\n    IAddrSetter,\\n    ERC165\\n{\\n    using EVMFetcher for EVMFetcher.EVMFetchRequest;\\n    using BytesUtils for bytes;\\n    IEVMVerifier public immutable verifier;\\n    ENS public immutable ens;\\n    INameWrapper public immutable nameWrapper;\\n    uint256 public immutable l2ChainId;\\n    mapping(bytes32 => address) targets;\\n    uint256 constant COIN_TYPE_ETH = 60;\\n    uint256 constant RECORD_VERSIONS_SLOT = 0;\\n    uint256 constant VERSIONABLE_ABIS_SLOT = 1;\\n    uint256 constant VERSIONABLE_ADDRESSES_SLOT = 2;\\n    uint256 constant VERSIONABLE_HASHES_SLOT = 3;\\n    uint256 constant VERSIONABLE_TEXTS_SLOT = 10;\\n    // To check how old is the value/proof returned and is in the acceptable range\\n    uint256 constant L2_BLOCK_RANGE_ACCEPTED = 86400;\\n    string public graphqlUrl;\\n\\n    event TargetSet(bytes name, address target);\\n\\n    function isAuthorised(bytes32 node) internal view returns (bool) {\\n        // TODO: Add support for\\n        // trustedETHController\\n        // trustedReverseRegistrar\\n        // isApprovedForAll\\n        // isApprovedFor\\n        address owner = ens.owner(node);\\n        if (owner == address(nameWrapper)) {\\n            owner = nameWrapper.ownerOf(uint256(node));\\n        }\\n        return owner == msg.sender;\\n    }\\n\\n    /**\\n     * @dev EIP-5559 - Error to raise when mutations are being deferred to an L2.\\n     * @param chainId Chain ID to perform the deferred mutation to.\\n     * @param contractAddress Contract Address at which the deferred mutation should transact with.\\n     */\\n    error StorageHandledByL2(uint256 chainId, address contractAddress);\\n\\n    /**\\n     * @param _verifier     The chain verifier address\\n     * @param _ens          The ENS registry address\\n     * @param _nameWrapper  The ENS name wrapper address\\n     * @param _graphqlUrl   The offchain/l2 graphql endpoint url\\n     * @param _l2ChainId    The chainId at which the resolver resolves data from\\n     */\\n    constructor(\\n        IEVMVerifier _verifier,\\n        ENS _ens,\\n        INameWrapper _nameWrapper,\\n        string memory _graphqlUrl,\\n        uint256 _l2ChainId\\n    ) {\\n        require(\\n            address(_nameWrapper) != address(0),\\n            \\\"Name Wrapper address must be set\\\"\\n        );\\n        require(\\n            address(_verifier) != address(0),\\n            \\\"Verifier address must be set\\\"\\n        );\\n        require(address(_ens) != address(0), \\\"Registry address must be set\\\");\\n        verifier = _verifier;\\n        ens = _ens;\\n        nameWrapper = _nameWrapper;\\n        graphqlUrl = _graphqlUrl;\\n        l2ChainId = _l2ChainId;\\n    }\\n\\n    /**\\n     * Set target address to verify against\\n     * @param name The encoded name to query.\\n     * @param target The L2 resolver address to verify against.\\n     */\\n    function setTarget(bytes calldata name, address target) external {\\n        (bytes32 node, ) = getTarget(name);\\n        require(\\n            isAuthorised(node),\\n            \\\"Not authorized to set target for this node\\\"\\n        );\\n        targets[node] = target;\\n        emit TargetSet(name, target);\\n        emit MetadataChanged(name, graphqlUrl);\\n    }\\n\\n    /**\\n     * @dev Returns the L2 target address that can answer queries for `name`.\\n     * @param name DNS encoded ENS name to query\\n     * @return node The node of the name\\n     * @return target The L2 resolver address to verify against.\\n     */\\n    function getTarget(\\n        bytes memory name\\n    ) public view returns (bytes32 node, address target) {\\n        return _getTarget(name, 0);\\n    }\\n\\n    function _getTarget(\\n        bytes memory name,\\n        uint256 offset\\n    ) private view returns (bytes32 node, address target) {\\n        uint256 len = name.readUint8(offset);\\n        node = bytes32(0);\\n        if (len > 0) {\\n            bytes32 label = name.keccak(offset + 1, len);\\n            (node, target) = _getTarget(name, offset + len + 1);\\n            node = keccak256(abi.encodePacked(node, label));\\n            if (targets[node] != address(0)) {\\n                return (node, targets[node]);\\n            }\\n        } else {\\n            return (bytes32(0), address(0));\\n        }\\n        return (node, target);\\n    }\\n\\n    /**\\n     * @dev Resolve and verify a record stored in l2 target address. It supports subname by fetching target recursively to the nearest parent.\\n     * @param name DNS encoded ENS name to query\\n     * @param data The actual calldata\\n     * @return result result of the call\\n     */\\n    function resolve(\\n        bytes calldata name,\\n        bytes calldata data\\n    ) external view returns (bytes memory result) {\\n        require(data.length >= 4, \\\"param data too short\\\");\\n\\n        (, address target) = _getTarget(name, 0);\\n        bytes4 selector = bytes4(data);\\n\\n        if (selector == IAddrResolver.addr.selector) {\\n            bytes32 node = abi.decode(data[4:], (bytes32));\\n            return _addr(node, target);\\n        }\\n        if (selector == IAddressResolver.addr.selector) {\\n            (bytes32 node, uint256 cointype) = abi.decode(\\n                data[4:],\\n                (bytes32, uint256)\\n            );\\n            return _addr(node, cointype, target);\\n        }\\n        if (selector == ITextResolver.text.selector) {\\n            (bytes32 node, string memory key) = abi.decode(\\n                data[4:],\\n                (bytes32, string)\\n            );\\n            return bytes(_text(node, key, target));\\n        }\\n        if (selector == IContentHashResolver.contenthash.selector) {\\n            bytes32 node = abi.decode(data[4:], (bytes32));\\n            return _contenthash(node, target);\\n        }\\n\\n        // None selector has been found it reverts\\n        revert(\\\"invalid selector\\\");\\n    }\\n\\n    /**\\n     * @dev Resolve and throws an EIP 3559 compliant error\\n     * @param name DNS encoded ENS name to query\\n     * @param _addr The actual calldata\\n     * @return result result of the call\\n     */\\n    function setAddr(\\n        bytes calldata name,\\n        address _addr\\n    ) external view returns (bytes memory result) {\\n        (, address target) = _getTarget(name, 0);\\n        _writeDeferral(target);\\n    }\\n\\n    function _addr(\\n        bytes32 node,\\n        address target\\n    ) private view returns (bytes memory) {\\n        EVMFetcher\\n            .newFetchRequest(verifier, target)\\n            .getStatic(RECORD_VERSIONS_SLOT)\\n            .element(node)\\n            .getDynamic(VERSIONABLE_ADDRESSES_SLOT)\\n            .ref(0)\\n            .element(node)\\n            .element(COIN_TYPE_ETH)\\n            .fetch(\\n                this.addrCallback.selector,\\n                abi.encode(L2_BLOCK_RANGE_ACCEPTED)\\n            ); // recordVersions\\n    }\\n\\n    function addrCallback(\\n        bytes[] memory values,\\n        bytes memory\\n    ) external pure returns (bytes memory) {\\n        return abi.encode(address(bytes20(values[1])));\\n    }\\n\\n    function _addr(\\n        bytes32 node,\\n        uint256 coinType,\\n        address target\\n    ) private view returns (bytes memory) {\\n        EVMFetcher\\n            .newFetchRequest(verifier, target)\\n            .getStatic(RECORD_VERSIONS_SLOT)\\n            .element(node)\\n            .getDynamic(VERSIONABLE_ADDRESSES_SLOT)\\n            .ref(0)\\n            .element(node)\\n            .element(coinType)\\n            .fetch(\\n                this.addrCoinTypeCallback.selector,\\n                abi.encode(L2_BLOCK_RANGE_ACCEPTED)\\n            );\\n    }\\n\\n    function addrCoinTypeCallback(\\n        bytes[] memory values,\\n        bytes memory\\n    ) external pure returns (bytes memory) {\\n        return abi.encode(values[1]);\\n    }\\n\\n    function _text(\\n        bytes32 node,\\n        string memory key,\\n        address target\\n    ) private view returns (bytes memory) {\\n        EVMFetcher\\n            .newFetchRequest(verifier, target)\\n            .getStatic(RECORD_VERSIONS_SLOT)\\n            .element(node)\\n            .getDynamic(VERSIONABLE_TEXTS_SLOT)\\n            .ref(0)\\n            .element(node)\\n            .element(key)\\n            .fetch(\\n                this.textCallback.selector,\\n                abi.encode(L2_BLOCK_RANGE_ACCEPTED)\\n            );\\n    }\\n\\n    function textCallback(\\n        bytes[] memory values,\\n        bytes memory\\n    ) external pure returns (bytes memory) {\\n        return abi.encode(string(values[1]));\\n    }\\n\\n    function _contenthash(\\n        bytes32 node,\\n        address target\\n    ) private view returns (bytes memory) {\\n        EVMFetcher\\n            .newFetchRequest(verifier, target)\\n            .getStatic(RECORD_VERSIONS_SLOT)\\n            .element(node)\\n            .getDynamic(VERSIONABLE_HASHES_SLOT)\\n            .ref(0)\\n            .element(node)\\n            .fetch(\\n                this.contenthashCallback.selector,\\n                abi.encode(L2_BLOCK_RANGE_ACCEPTED)\\n            );\\n    }\\n\\n    function contenthashCallback(\\n        bytes[] memory values,\\n        bytes memory\\n    ) external pure returns (bytes memory) {\\n        return abi.encode(values[1]);\\n    }\\n\\n    /**\\n     * @notice Get metadata about the L1 Resolver\\n     * @dev This function provides metadata about the L1 Resolver, including its name, coin type, GraphQL URL, storage type, and encoded information.\\n     * @param name The domain name in format (dnsEncoded)\\n     * @return graphqlUrl The GraphQL URL used by the resolver\\n     */\\n    function metadata(\\n        bytes calldata name\\n    ) external view returns (string memory) {\\n        return (graphqlUrl);\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view override returns (bool) {\\n        return\\n            interfaceId == type(IExtendedResolver).interfaceId ||\\n            interfaceId == type(ITargetResolver).interfaceId ||\\n            interfaceId == type(IMetadataResolver).interfaceId ||\\n            interfaceId == type(IAddrSetter).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    function _writeDeferral(address target) internal view {\\n        revert StorageHandledByL2(l2ChainId, target);\\n    }\\n}\\n\",\"keccak256\":\"0x1264bded47dbe0d7841b368f2f21a647a321b3cf59e09f457528bd16be9e5f75\",\"license\":\"MIT\"},\"linea-state-verifier/contracts/EVMFetchTarget.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.25;\\n\\nimport {IEVMVerifier} from \\\"./IEVMVerifier.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/**\\n * @dev Callback implementation for users of `EVMFetcher`. If you use `EVMFetcher`, your contract must\\n *      inherit from this contract in order to handle callbacks correctly.\\n */\\nabstract contract EVMFetchTarget {\\n    using Address for address;\\n\\n    error ResponseLengthMismatch(uint256 actual, uint256 expected);\\n\\n    /**\\n     * @dev Internal callback function invoked by CCIP-Read in response to a `getStorageSlots` request.\\n     */\\n    function getStorageSlotsCallback(\\n        bytes calldata response,\\n        bytes calldata extradata\\n    ) external returns (bytes memory) {\\n        bytes memory proof = abi.decode(response, (bytes));\\n        (\\n            IEVMVerifier verifier,\\n            address addr,\\n            bytes32[] memory commands,\\n            bytes[] memory constants,\\n            bytes4 callback,\\n            uint256 l2BlockRangeAccepted\\n        ) = abi.decode(\\n                extradata,\\n                (IEVMVerifier, address, bytes32[], bytes[], bytes4, uint256)\\n            );\\n        bytes[] memory values = verifier.getStorageValues(\\n            addr,\\n            commands,\\n            constants,\\n            proof,\\n            l2BlockRangeAccepted\\n        );\\n        if (values.length != commands.length) {\\n            revert ResponseLengthMismatch(values.length, commands.length);\\n        }\\n        bytes memory ret = address(this).functionCall(\\n            abi.encodeWithSelector(callback, values, \\\"\\\")\\n        );\\n        assembly {\\n            return(add(ret, 32), mload(ret))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7e0ea45ce78d517d367bbd43282b0731b3c60f4a9fa3626ace7f5002421763e0\",\"license\":\"MIT\"},\"linea-state-verifier/contracts/EVMFetcher.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.25;\\n\\nimport {IEVMVerifier} from \\\"./IEVMVerifier.sol\\\";\\nimport {EVMFetchTarget} from \\\"./EVMFetchTarget.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\ninterface IEVMGateway {\\n    function getStorageSlots(\\n        address addr,\\n        bytes32[] memory commands,\\n        bytes[] memory constants\\n    ) external pure returns (bytes memory witness);\\n}\\n\\nuint8 constant FLAG_DYNAMIC = 0x01;\\nuint8 constant OP_CONSTANT = 0x00;\\nuint8 constant OP_BACKREF = 0x20;\\nuint8 constant OP_END = 0xff;\\n\\n/**\\n * @dev A library to facilitate requesting storage data proofs from contracts, possibly on a different chain.\\n *      See l1-verifier/test/TestL1.sol for example usage.\\n */\\nlibrary EVMFetcher {\\n    uint256 constant MAX_COMMANDS = 32;\\n    uint256 constant MAX_CONSTANTS = 32; // Must not be greater than 32\\n\\n    using Address for address;\\n\\n    error TooManyCommands(uint256 max);\\n    error CommandTooLong();\\n    error InvalidReference(uint256 value, uint256 max);\\n    error OffchainLookup(\\n        address sender,\\n        string[] urls,\\n        bytes callData,\\n        bytes4 callbackFunction,\\n        bytes extraData\\n    );\\n\\n    struct EVMFetchRequest {\\n        IEVMVerifier verifier;\\n        address target;\\n        bytes32[] commands;\\n        uint256 operationIdx;\\n        bytes[] constants;\\n    }\\n\\n    /**\\n     * @dev Creates a request to fetch the value of multiple storage slots from a contract via CCIP-Read, possibly from\\n     *      another chain.\\n     *      Supports dynamic length values and slot numbers derived from other retrieved values.\\n     * @param verifier An instance of a verifier contract that can provide and verify the storage slot information.\\n     * @param target The address of the contract to fetch storage proofs for.\\n     */\\n    function newFetchRequest(\\n        IEVMVerifier verifier,\\n        address target\\n    ) internal pure returns (EVMFetchRequest memory) {\\n        bytes32[] memory commands = new bytes32[](MAX_COMMANDS);\\n        bytes[] memory constants = new bytes[](MAX_CONSTANTS);\\n        assembly {\\n            mstore(commands, 0) // Set current array length to 0\\n            mstore(constants, 0)\\n        }\\n        return EVMFetchRequest(verifier, target, commands, 0, constants);\\n    }\\n\\n    /**\\n     * @dev Starts describing a new fetch request.\\n     *      Paths specify a series of hashing operations to derive the final slot ID.\\n     *      See https://docs.soliditylang.org/en/v0.8.17/internals/layout_in_storage.html for details on how Solidity\\n     *      lays out storage variables.\\n     * @param request The request object being operated on.\\n     * @param baseSlot The base slot ID that forms the root of the path.\\n     */\\n    function getStatic(\\n        EVMFetchRequest memory request,\\n        uint256 baseSlot\\n    ) internal pure returns (EVMFetchRequest memory) {\\n        bytes32[] memory commands = request.commands;\\n        uint256 commandIdx = commands.length;\\n        if (commandIdx > 0 && request.operationIdx < 32) {\\n            // Terminate previous command\\n            _addOperation(request, OP_END);\\n        }\\n        assembly {\\n            mstore(commands, add(commandIdx, 1)) // Increment command array length\\n        }\\n        if (request.commands.length > MAX_COMMANDS) {\\n            revert TooManyCommands(MAX_COMMANDS);\\n        }\\n        request.operationIdx = 0;\\n        _addOperation(request, 0);\\n        _addOperation(request, _addConstant(request, abi.encode(baseSlot)));\\n        return request;\\n    }\\n\\n    /**\\n     * @dev Starts describing a new fetch request.\\n     *      Paths specify a series of hashing operations to derive the final slot ID.\\n     *      See https://docs.soliditylang.org/en/v0.8.17/internals/layout_in_storage.html for details on how Solidity\\n     *      lays out storage variables.\\n     * @param request The request object being operated on.\\n     * @param baseSlot The base slot ID that forms the root of the path.\\n     */\\n    function getDynamic(\\n        EVMFetchRequest memory request,\\n        uint256 baseSlot\\n    ) internal pure returns (EVMFetchRequest memory) {\\n        bytes32[] memory commands = request.commands;\\n        uint256 commandIdx = commands.length;\\n        if (commandIdx > 0 && request.operationIdx < 32) {\\n            // Terminate previous command\\n            _addOperation(request, OP_END);\\n        }\\n        assembly {\\n            mstore(commands, add(commandIdx, 1)) // Increment command array length\\n        }\\n        if (request.commands.length > MAX_COMMANDS) {\\n            revert TooManyCommands(MAX_COMMANDS);\\n        }\\n        request.operationIdx = 0;\\n        _addOperation(request, FLAG_DYNAMIC);\\n        _addOperation(request, _addConstant(request, abi.encode(baseSlot)));\\n        return request;\\n    }\\n\\n    /**\\n     * @dev Adds a `uint256` element to the current path.\\n     * @param request The request object being operated on.\\n     * @param el The element to add.\\n     */\\n    function element(\\n        EVMFetchRequest memory request,\\n        uint256 el\\n    ) internal pure returns (EVMFetchRequest memory) {\\n        if (request.operationIdx >= 32) {\\n            revert CommandTooLong();\\n        }\\n        _addOperation(request, _addConstant(request, abi.encode(el)));\\n        return request;\\n    }\\n\\n    /**\\n     * @dev Adds a `bytes32` element to the current path.\\n     * @param request The request object being operated on.\\n     * @param el The element to add.\\n     */\\n    function element(\\n        EVMFetchRequest memory request,\\n        bytes32 el\\n    ) internal pure returns (EVMFetchRequest memory) {\\n        if (request.operationIdx >= 32) {\\n            revert CommandTooLong();\\n        }\\n        _addOperation(request, _addConstant(request, abi.encode(el)));\\n        return request;\\n    }\\n\\n    /**\\n     * @dev Adds an `address` element to the current path.\\n     * @param request The request object being operated on.\\n     * @param el The element to add.\\n     */\\n    function element(\\n        EVMFetchRequest memory request,\\n        address el\\n    ) internal pure returns (EVMFetchRequest memory) {\\n        if (request.operationIdx >= 32) {\\n            revert CommandTooLong();\\n        }\\n        _addOperation(request, _addConstant(request, abi.encode(el)));\\n        return request;\\n    }\\n\\n    /**\\n     * @dev Adds a `bytes` element to the current path.\\n     * @param request The request object being operated on.\\n     * @param el The element to add.\\n     */\\n    function element(\\n        EVMFetchRequest memory request,\\n        bytes memory el\\n    ) internal pure returns (EVMFetchRequest memory) {\\n        if (request.operationIdx >= 32) {\\n            revert CommandTooLong();\\n        }\\n        _addOperation(request, _addConstant(request, el));\\n        return request;\\n    }\\n\\n    /**\\n     * @dev Adds a `string` element to the current path.\\n     * @param request The request object being operated on.\\n     * @param el The element to add.\\n     */\\n    function element(\\n        EVMFetchRequest memory request,\\n        string memory el\\n    ) internal pure returns (EVMFetchRequest memory) {\\n        if (request.operationIdx >= 32) {\\n            revert CommandTooLong();\\n        }\\n        _addOperation(request, _addConstant(request, bytes(el)));\\n        return request;\\n    }\\n\\n    /**\\n     * @dev Adds a reference to a previous fetch to the current path.\\n     * @param request The request object being operated on.\\n     * @param idx The index of the previous fetch request, starting at 0.\\n     */\\n    function ref(\\n        EVMFetchRequest memory request,\\n        uint8 idx\\n    ) internal pure returns (EVMFetchRequest memory) {\\n        if (request.operationIdx >= 32) {\\n            revert CommandTooLong();\\n        }\\n        if (idx > request.commands.length || idx > 31) {\\n            revert InvalidReference(idx, request.commands.length);\\n        }\\n        _addOperation(request, OP_BACKREF | idx);\\n        return request;\\n    }\\n\\n    /**\\n     * @dev Initiates the fetch request.\\n     *      Calling this function terminates execution; clients that implement CCIP-Read will make a callback to\\n     *      `callback` with the results of the operation.\\n     * @param callbackId A callback function selector on this contract that will be invoked via CCIP-Read with the result of the lookup.\\n     *        The function must have a signature matching `(bytes[] memory values, bytes callbackData)` with a return type matching the call in which\\n     *        this function was invoked. Its return data will be returned as the return value of the entire CCIP-read operation.\\n     * @param callbackData Extra data to supply to the callback.\\n     */\\n    function fetch(\\n        EVMFetchRequest memory request,\\n        bytes4 callbackId,\\n        bytes memory callbackData\\n    ) internal view {\\n        if (request.commands.length > 0 && request.operationIdx < 32) {\\n            // Terminate last command\\n            _addOperation(request, OP_END);\\n        }\\n\\n        revert OffchainLookup(\\n            address(this),\\n            request.verifier.gatewayURLs(),\\n            abi.encodeCall(\\n                IEVMGateway.getStorageSlots,\\n                (request.target, request.commands, request.constants)\\n            ),\\n            EVMFetchTarget.getStorageSlotsCallback.selector,\\n            abi.encode(\\n                request.verifier,\\n                request.target,\\n                request.commands,\\n                request.constants,\\n                callbackId,\\n                callbackData\\n            )\\n        );\\n    }\\n\\n    function _addConstant(\\n        EVMFetchRequest memory request,\\n        bytes memory value\\n    ) private pure returns (uint8 idx) {\\n        bytes[] memory constants = request.constants;\\n        idx = uint8(constants.length);\\n        assembly {\\n            mstore(constants, add(idx, 1)) // Increment constant array length\\n        }\\n        constants[idx] = value;\\n    }\\n\\n    function _addOperation(\\n        EVMFetchRequest memory request,\\n        uint8 op\\n    ) private pure {\\n        uint256 commandIdx = request.commands.length - 1;\\n        request.commands[commandIdx] =\\n            request.commands[commandIdx] |\\n            (bytes32(bytes1(op)) >> (8 * request.operationIdx++));\\n    }\\n}\\n\",\"keccak256\":\"0x96ccc4f320287222e427a2c4620d8e27cfc0a64820dc9b214ba396344eeb6a99\",\"license\":\"MIT\"},\"linea-state-verifier/contracts/IEVMVerifier.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.25;\\n\\ninterface IEVMVerifier {\\n    function gatewayURLs() external view returns (string[] memory);\\n\\n    function getStorageValues(\\n        address target,\\n        bytes32[] memory commands,\\n        bytes[] memory constants,\\n        bytes memory proof,\\n        uint256 l2BlockRangeAccepted\\n    ) external view returns (bytes[] memory values);\\n}\\n\",\"keccak256\":\"0xd57e902e6a93880c9ec1e253ba767f1ed822fa997bfddd3bf474df1b5bc4e2b2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101006040523461038857612641803803908161001b8161038d565b91823960a08183810103126103885780516001600160a01b039182821682036103885760208101518381168103610388576040820151908482168203610388576060830151936001600160401b03851161038857601f938781018587830101121561038857808601516001600160401b03811161028e57601f19966100a6828801891660200161038d565b99828b5283016020838386010101116103885760005b82811061037257505060009089016020015260800151958381161561032e57808216156102e9578216156102a45760805260a05260c0528351906001600160401b03821161028e5760019283548481811c91168015610284575b602082101461026e57828111610226575b5060209183116001146101c75750819293946000926101bc575b5050600019600383901b1c191690821b1790555b60e05260405161228e90816103b3823960805181818161034601528181611403015281816115f9015281816117480152611875015260a0518181816105210152610a12015260c0518181816109550152610a47015260e051818181610c220152610c740152f35b015190503880610141565b8216908360005260206000209160005b81811061021057509583859697106101f7575b505050811b019055610155565b015160001960f88460031b161c191690553880806101ea565b87830151845592850192602092830192016101d7565b8460005260206000208380860160051c82019260208710610265575b0160051c019085905b828110610259575050610127565b6000815501859061024b565b92508192610242565b634e487b7160e01b600052602260045260246000fd5b90607f1690610116565b634e487b7160e01b600052604160045260246000fd5b60405162461bcd60e51b815260206004820152601c60248201527f52656769737472792061646472657373206d75737420626520736574000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601c60248201527f56657269666965722061646472657373206d75737420626520736574000000006044820152606490fd5b606460405162461bcd60e51b815260206004820152602060248201527f4e616d6520577261707065722061646472657373206d757374206265207365746044820152fd5b602082850182018101518c8301820152016100bc565b600080fd5b6040519190601f01601f191682016001600160401b0381118382101761028e5760405256fe6080604052600436101561001257600080fd5b60003560e01c806301ffc9a71461010d57806315f64386146101085780632b7ac3f31461010357806338bf92e6146100cc5780633f15457f146100fe5780634062b43f146100f95780635bdaa916146100f45780638a596ebe146100ef5780639061b923146100ea578063a8e5fbc0146100e5578063d358df77146100e0578063d6ae3cd5146100db578063de9abe5e146100cc578063f00eebf4146100d6578063f470901a146100d15763fcd2e381146100cc57600080fd5b6104a7565b610cac565b610c45565b610c0a565b6109cd565b61093f565b610821565b6107dc565b6106e1565b61063f565b61050b565b610330565b6102df565b61012c565b35906001600160e01b03198216820361012757565b600080fd5b346101275760203660031901126101275760043563ffffffff60e01b81168091036101275761018f90639061b92360e01b81149081156101c6575b81156101b5575b81156101a4575b8115610193575b5060405190151581529081906020820190565b0390f35b6301ffc9a760e01b1490503861017c565b633c03bafd60e21b81149150610175565b63452cb75f60e11b8114915061016e565b630afb21c360e11b81149150610167565b634e487b7160e01b600052604160045260246000fd5b604081019081106001600160401b0382111761020857604052565b6101d7565b61042081019081106001600160401b0382111761020857604052565b90601f801991011681019081106001600160401b0382111761020857604052565b6001600160401b03811161020857601f01601f191660200190565b9291926102718261024a565b9161027f6040519384610229565b829481845281830111610127578281602093846000960137010152565b9080601f83011215610127578160206102b793359101610265565b90565b906020828203126101275781356001600160401b038111610127576102b7920161029c565b34610127576020366003190112610127576004356001600160401b0381116101275761031b6000610316604093369060040161029c565b6112a9565b82519182526001600160a01b03166020820152f35b34610127576000366003190112610127576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b6001600160401b0381116102085760051b60200190565b81601f82011215610127578035916020916103a684610375565b936103b46040519586610229565b808552838086019160051b8301019280841161012757848301915b8483106103df5750505050505090565b82356001600160401b0381116101275786916104008484809489010161029c565b8152019201916103cf565b906040600319830112610127576001600160401b0360043581811161012757836104379160040161038c565b92602435918211610127576102b79160040161029c565b60005b8381106104615750506000910152565b8181015183820152602001610451565b9060209161048a8151809281855285808601910161044e565b601f01601f1916010190565b9060206102b7928181520190610471565b34610127576104b53661040b565b50805160011015610506576104e46104f2604061018f9301516040519283916020808401526040830190610471565b03601f198101835282610229565b604051918291602083526020830190610471565b610d34565b34610127576000366003190112610127576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b90600182811c92168015610580575b602083101461056a57565b634e487b7160e01b600052602260045260246000fd5b91607f169161055f565b9060009160019060015461059d81610550565b808352926020916001811690811561061a57506001146105be575b50505050565b9293945060016000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6926000935b8585106106075750505060209250010190388080806105b8565b80548585018401529382019381016105ed565b92505050602093945060ff929192191683830152151560051b010190388080806105b8565b346101275760003660031901126101275761018f6040516104f2816106638161058a565b0382610229565b9181601f84011215610127578235916001600160401b038311610127576020838186019501011161012757565b6040600319820112610127576001600160401b039160043583811161012757826106c39160040161066a565b93909392602435918211610127576106dd9160040161066a565b9091565b3461012757610703600061070c6106f736610697565b959183919301906102ba565b93810190610d5e565b9096839592969461073e60018060a01b039384936040519a8b988997889663628e501560e11b88521660048701610f96565b0392165afa9182156107d7576000926107b2575b50815190519081810361078c576107848361077e866104e4604051938492602084015260248301610ff0565b3061136e565b602081519101f35b604051632918942560e01b815260048101919091526024810191909152604490fd5b0390fd5b6107d09192503d806000833e6107c88183610229565b810190610e5b565b9038610752565b610fe4565b34610127576020366003190112610127576004356001600160401b0381116101275761080c90369060040161066a565b505061018f6040516104f2816106638161058a565b3461012757610316600061085061083736610697565b94929095916108496004871015611014565b3691610265565b9290506001600160e01b03196108668383611057565b16631d9dabef60e11b811461092b576378e5bf0360e11b811461090e57631674750f60e21b81146108f15763bc1c58d160e01b146108d65760405162461bcd60e51b815260206004820152601060248201526f34b73b30b634b21039b2b632b1ba37b960811b6044820152606490fd5b816108ec926108e492611083565b8101906110a0565b611867565b50816109089261090092611083565b8101906110c5565b9061173a565b50816109259261091d92611083565b8101906110af565b906115df565b508161093a926108e492611083565b6113ed565b34610127576000366003190112610127576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b6001600160a01b0381160361012757565b604060031982011261012757600435906001600160401b038211610127576109bf9160040161066a565b90916024356102b781610984565b34610127576109db36610995565b916109ec6000610316368585610265565b506040516302571be360e01b8152600481018290526001600160a01b03602080836024817f000000000000000000000000000000000000000000000000000000000000000086165afa9283156107d757600093610be9575b507f00000000000000000000000000000000000000000000000000000000000000008216908383168214610b25575b505094610b0081610ae17f88781081cc340609705af0f96bf3ba64ea267873444e91725bd072f2af0f44d895610ad1610b0e967f3c68652dbd57659176ef0092991d5753aac3039c3134b7a3eb5689acfaccf62d9b33911614611104565b6000526000602052604060002090565b80546001600160a01b0319166001600160a01b03909216919091179055565b604051918291868684611184565b0390a1610b20604051928392836111ad565b0390a1005b6040516331a9108f60e11b8152600481018690529790935091908390889060249082905afa80156107d757610ae17f88781081cc340609705af0f96bf3ba64ea267873444e91725bd072f2af0f44d895610ad1610b009486947f3c68652dbd57659176ef0092991d5753aac3039c3134b7a3eb5689acfaccf62d9c610b0e99600092610bbc575b50509750959a5050955050610a73565b610bdb9250803d10610be2575b610bd38183610229565b810190611937565b3880610bac565b503d610bc9565b819350610c039083923d8611610be257610bd38183610229565b9290610a44565b346101275760003660031901126101275760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b34610127576044610c656000610316610c5d36610995565b503691610265565b60405163e0a0507160e01b81527f000000000000000000000000000000000000000000000000000000000000000060048201526001600160a01b0390911660248201529050fd5b3461012757610cba3661040b565b50805160011015610506576104e4610d13604061018f93015160208151910151906bffffffffffffffffffffffff19918281169160148110610d1f575b50506040805160609290921c6020830152909384925090820190565b60405191829182610496565b8391925060140360031b1b1616803880610cf7565b634e487b7160e01b600052603260045260246000fd5b80518210156105065760209160051b010190565b9060c082820312610127578135610d7481610984565b9260209283810135610d8581610984565b936001600160401b039060408301358281116101275783019085601f8301121561012757813591610db583610375565b92610dc36040519485610229565b808452828085019160051b83010191888311610127578301905b828210610e15575050505093606083013591821161012757610e0091830161038c565b9160a0610e0f60808401610112565b92013590565b81358152908301908301610ddd565b90929192610e318161024a565b91610e3f6040519384610229565b829482845282820111610127576020610e5993019061044e565b565b9060209081838203126101275782516001600160401b039384821161012757019080601f83011215610127578151610e9281610375565b94604090610ea36040519788610229565b828752858088019360051b8601019484861161012757868101935b868510610ed057505050505050505090565b845183811161012757820186603f82011215610127578891610efa88838886809601519101610e24565b815201940193610ebe565b90815180825260208080930193019160005b828110610f25575050505090565b835185529381019392810192600101610f17565b90808251908181526020809101926020808460051b8301019501936000915b848310610f685750505050505090565b9091929394958480610f86600193601f198682030187528a51610471565b9801930193019194939290610f58565b95949390608093610fc3610fdf94610fd19360018060a01b03168a5260a060208b015260a08a0190610f05565b9088820360408a0152610f39565b908682036060880152610471565b930152565b6040513d6000823e3d90fd5b611004602092604083526040830190610f39565b9082818303910152600081520190565b1561101b57565b60405162461bcd60e51b81526020600482015260146024820152731c185c985b4819185d18481d1bdbc81cda1bdc9d60621b6044820152606490fd5b6001600160e01b0319903581811693926004811061107457505050565b60040360031b82901b16169150565b909291928360041161012757831161012757600401916003190190565b90816020910312610127573590565b9190826040910312610127576020823592013590565b9190604083820312610127578235926020810135906001600160401b03821161012757019080601f83011215610127578160206102b793359101610265565b1561110b57565b60405162461bcd60e51b815260206004820152602a60248201527f4e6f7420617574686f72697a656420746f207365742074617267657420666f726044820152692074686973206e6f646560b01b6064820152608490fd5b908060209392818452848401376000828201840152601f01601f1916010190565b9160209161119d91959495604085526040850191611163565b6001600160a01b03909416910152565b91906111c191604084526040840191611163565b818103602092830152600180546000939290916111dd83610550565b808352926001811690811561125657506001146111fc575b5050505090565b9293509060016000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf692846000945b83861061124257505050500101388080806111f5565b80548587018301529401938590820161122c565b60ff191685840152505090151560051b01019050388080806111f5565b634e487b7160e01b600052601160045260246000fd5b906001820180921161129757565b611273565b9190820180921161129757565b9190918051831015610506576020838201015160f81c801561136257906112ee6112e9836112e36112f4956112dd89611289565b8661194c565b9661129c565b611289565b906112a9565b6040805160208101938452908101949094529261131481606081016104e4565b51902060008181526020819052604090206001600160a01b0390611340905b546001600160a01b031690565b16611349579190565b91506102b7611333836000526000602052604060002090565b50509050600090600090565b906102b79160008060405193611383856101ed565b601e85527f416464726573733a206c6f772d6c6576656c2063616c6c206661696c65640000602086015260208151910182855af13d156113e5573d916113c88361024a565b926113d66040519485610229565b83523d6000602085013e612034565b606091612034565b61142c6114366114318361142c61142761143b977f00000000000000000000000000000000000000000000000000000000000000006119a3565b611a3f565b611ab6565b611aea565b611b61565b611443611966565b50606081019060209081835110156115cd5760049060409061148161147b8351603c87820152868152611475816101ed565b8361222b565b826121ca565b8151936201518081860152808552611498856101ed565b8282019581875151151591826115c2575b50506115b4575b81516000906114cf906001600160a01b03165b6001600160a01b031690565b8451632d43cbef60e21b815295869182905afa9384156107d757600094611597575b5081810180516001600160a01b03168751608085018051875163ea9cd3bf60e01b87820152999391928a9261152b92919060248501611bd4565b0394601f19958681018a52611540908a610229565b516001600160a01b031692516001600160a01b031698519051908651998a9586019461156b95611c0a565b03908101855261157b9085610229565b51630556f18360e41b81529283926107ae923060048601611d4c565b6115ad9194503d806000833e6107c88183610229565b92386114f1565b6115bd826120c5565b6114b0565b5110905081386114a9565b604051631601fac760e31b8152600490fd5b8061142c61143661143161142c9461142c61142761161d997f00000000000000000000000000000000000000000000000000000000000000006119a3565b60406004815191602093620151808585015284845261163b846101ed565b8181019485515115158061172d575b61171f575b8151600090611666906001600160a01b03166114c3565b8451632d43cbef60e21b815295869182905afa9384156107d757600094611702575b5081810180516001600160a01b03168751608085018051875163ea9cd3bf60e01b87820152999391928a926116c292919060248501611bd4565b0394601f19958681018a526116d7908a610229565b516001600160a01b031692516001600160a01b031698519051908651998a9586019461156b95611c65565b6117189194503d806000833e6107c88183610229565b9238611688565b611728826120c5565b61164f565b508060608301511061164a565b918261142c61142761176c937f00000000000000000000000000000000000000000000000000000000000000006119a3565b91611775611966565b506020604084018051600181518015158061185a575b61184c575b019052515111611833576117e290600060608501526117ae8461216f565b61142c6040519461143661147b876117ce6020820190600a602083019252565b0397611475601f19998a8101835282610229565b906117eb611966565b506020606083015110156115cd5761147b611806918361222b565b61182e6040519283611822602082019062015180602083019252565b03908101845283610229565b611df0565b604051630251ce0160e31b815260206004820152602490fd5b611855886120c5565b611790565b508460608901511061178b565b908161142c611427611899937f00000000000000000000000000000000000000000000000000000000000000006119a3565b906118a2611966565b506020604083018051600181518015158061192a575b61191c575b0190525151116118335761142c82600060606118fd9501526118de8161216f565b61143661147b604051611475816104e460208201906003602083019252565b6040519062015180602083015260208252611917826101ed565b611f29565b611925876120c5565b6118bd565b50846060880151106118b8565b9081602091031261012757516102b781610984565b908281018082116112975782511061012757016020012090565b6040519060a082018281106001600160401b0382111761020857604052606060808360008152600060208201528260408201526000838201520152565b6119ab611966565b506040516119b88161020d565b602091602082526104009283366020850137604051936119d78561020d565b60005b818110611a305750505060008252600083526040519360a085018581106001600160401b03821117610208576040526001600160a01b039182168552166020840152604083015260006060830152608082015290565b606086820184015282016119da565b611a47611966565b5060206040820180516001815180151580611aa9575b611a9b575b0190525151116118335760006060820152611a7c81612123565b6102b761147b604051611475816104e460208201906000602083019252565b611aa4866120c5565b611a62565b5084606087015110611a5d565b90611abf611966565b506020606083015110156115cd5761147b6102b79160405190602082015260208152611475816101ed565b611af2611966565b5060206040820180516001815180151580611b54575b611b46575b0190525151116118335760006060820152611b278161216f565b6102b761147b604051611475816104e460208201906002602083019252565b611b4f866120c5565b611b0d565b5084606087015110611b08565b611b69611966565b50606081016020815110156115cd5760408201908151516000199182820191821161129757611b99828551610d4a565b51908051938414611297576001840190526001600160fd1b038316830361129757611bd092600160fd1b9060031b1c179251610d4a565b5290565b6001600160a01b0390911681526060602082018190526102b7939192611bfc91840190610f05565b916040818403910152610f39565b93906102b79593611c3c91611c4a9460018060a01b03809216885216602087015260c0604087015260c0860190610f05565b908482036060860152610f39565b91637a38480d60e11b608082015260a0818403910152610471565b93906102b79593611c3c91611c979460018060a01b03809216885216602087015260c0604087015260c0860190610f05565b91631c5fc97360e11b608082015260a0818403910152610471565b93906102b79593611c3c91611ce49460018060a01b03809216885216602087015260c0604087015260c0860190610f05565b91636f4d5f2f60e11b608082015260a0818403910152610471565b93906102b79593611c3c91611d319460018060a01b03809216885216602087015260c0604087015260c0860190610f05565b9163fcd2e38160e01b608082015260a0818403910152610471565b92909493919460a084019060018060a01b0316845260209060a06020860152865180915260c0850191602060c08360051b8801019801926000905b838210611dc457505050505084611da991846102b79697036040860152610471565b632ded548b60e11b6060840152916080818403910152610471565b90919293988380611de160019360bf198c82030186528d51610471565b9b019201920190939291611d87565b60046040820191825151151580611f1b575b611f0d575b8051600090611e1e906001600160a01b03166114c3565b604051632d43cbef60e21b815293849182905afa9182156107d757600092611ef0575b506020810180519093906001600160a01b031693815195608084019687519660405197889263ea9cd3bf60e01b60208501526024840192611e8193611bd4565b0393601f19948581018852611e969088610229565b516001600160a01b031691516001600160a01b031692519651604051978894611ec29460208701611cb2565b039081018452611ed29084610229565b604051630556f18360e41b81529283926107ae923060048601611d4c565b611f069192503d806000833e6107c88183610229565b9038611e41565b611f16816120c5565b611e07565b506020606082015110611e02565b60046040820191825151151580612026575b612018575b8051600090611f57906001600160a01b03166114c3565b604051632d43cbef60e21b815293849182905afa9182156107d757600092611ffb575b506020810180519093906001600160a01b031693815195608084019687519660405197889263ea9cd3bf60e01b60208501526024840192611fba93611bd4565b0393601f19948581018852611fcf9088610229565b516001600160a01b031691516001600160a01b031692519651604051978894611ec29460208701611cff565b6120119192503d806000833e6107c88183610229565b9038611f7a565b612021816120c5565b611f40565b506020606082015110611f3b565b919290156120965750815115612048575090565b3b156120515790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156120a95750805190602001fd5b60405162461bcd60e51b81529081906107ae9060048301610496565b6040810190815151600019918282019182116112975760606120e8838651610d4a565b5191018051938414611297576001840190526001600160fd1b0383168303611297576121209260ff60f81b9060031b1c179251610d4a565b52565b60408101805151600019808201918211611297576060612144838551610d4a565b5194018051918214611297576001820190526001600160fd1b03811603611297576121209151610d4a565b604081019081515160001991828201918211611297576060612192838651610d4a565b5191018051938414611297576001840190526001600160fd1b03831683036112975761212092600160f81b9060031b1c179251610d4a565b604081018051519092916000198083019283116112975760606121ee848751610d4a565b5192018051918214611297576001820190526001600160fd1b0381168103611297576121209360ff60f81b9060f81b169060031b1c179251610d4a565b60806122559193929301519260ff84511693849160018301825261224f8383610d4a565b52610d4a565b5056fea264697066735822122028e4f18d893eca1ab82b0aab9e99c190881e50b0e9fe2ee03b03daa2e08a1d0364736f6c63430008190033",
  "deployedBytecode": "",
  "devdoc": {
    "errors": {
      "StorageHandledByL2(uint256,address)": [
        {
          "details": "EIP-5559 - Error to raise when mutations are being deferred to an L2.",
          "params": {
            "chainId": "Chain ID to perform the deferred mutation to.",
            "contractAddress": "Contract Address at which the deferred mutation should transact with."
          }
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_ens": "The ENS registry address",
          "_graphqlUrl": "The offchain/l2 graphql endpoint url",
          "_l2ChainId": "The chainId at which the resolver resolves data from",
          "_nameWrapper": "The ENS name wrapper address",
          "_verifier": "The chain verifier address"
        }
      },
      "getStorageSlotsCallback(bytes,bytes)": {
        "details": "Internal callback function invoked by CCIP-Read in response to a `getStorageSlots` request."
      },
      "getTarget(bytes)": {
        "details": "Returns the L2 target address that can answer queries for `name`.",
        "params": {
          "name": "DNS encoded ENS name to query"
        },
        "returns": {
          "node": "The node of the name",
          "target": "The L2 resolver address to verify against."
        }
      },
      "metadata(bytes)": {
        "details": "This function provides metadata about the L1 Resolver, including its name, coin type, GraphQL URL, storage type, and encoded information.",
        "params": {
          "name": "The domain name in format (dnsEncoded)"
        },
        "returns": {
          "_0": "graphqlUrl The GraphQL URL used by the resolver"
        }
      },
      "resolve(bytes,bytes)": {
        "details": "Resolve and verify a record stored in l2 target address. It supports subname by fetching target recursively to the nearest parent.",
        "params": {
          "data": "The actual calldata",
          "name": "DNS encoded ENS name to query"
        },
        "returns": {
          "result": "result of the call"
        }
      },
      "setAddr(bytes,address)": {
        "details": "Resolve and throws an EIP 3559 compliant error",
        "params": {
          "_addr": "The actual calldata",
          "name": "DNS encoded ENS name to query"
        },
        "returns": {
          "result": "result of the call"
        }
      },
      "setTarget(bytes,address)": {
        "params": {
          "name": "The encoded name to query.",
          "target": "The L2 resolver address to verify against."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "metadata(bytes)": {
        "notice": "Get metadata about the L1 Resolver"
      },
      "setTarget(bytes,address)": {
        "notice": "Set target address to verify against"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 13938,
        "contract": "contracts/L1Resolver.sol:L1Resolver",
        "label": "targets",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 13961,
        "contract": "contracts/L1Resolver.sol:L1Resolver",
        "label": "graphqlUrl",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      }
    }
  }
}