{
  "address": "0xad6729C101691A63F7d1e4CcbaD04bC8c6818a22",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IEVMVerifier",
          "name": "_verifier",
          "type": "address"
        },
        {
          "internalType": "contract ENS",
          "name": "_ens",
          "type": "address"
        },
        {
          "internalType": "contract INameWrapper",
          "name": "_nameWrapper",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "CommandTooLong",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "max",
          "type": "uint256"
        }
      ],
      "name": "InvalidReference",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "string[]",
          "name": "urls",
          "type": "string[]"
        },
        {
          "internalType": "bytes",
          "name": "callData",
          "type": "bytes"
        },
        {
          "internalType": "bytes4",
          "name": "callbackFunction",
          "type": "bytes4"
        },
        {
          "internalType": "bytes",
          "name": "extraData",
          "type": "bytes"
        }
      ],
      "name": "OffchainLookup",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "actual",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expected",
          "type": "uint256"
        }
      ],
      "name": "ResponseLengthMismatch",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "max",
          "type": "uint256"
        }
      ],
      "name": "TooManyCommands",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "TargetSet",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "values",
          "type": "bytes[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "addrCallback",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "values",
          "type": "bytes[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "addrCoinTypeCallback",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "values",
          "type": "bytes[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "contenthashCallback",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "response",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "extradata",
          "type": "bytes"
        }
      ],
      "name": "getStorageSlotsCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "name",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "offset",
          "type": "uint256"
        }
      ],
      "name": "getTarget",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "name",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "resolve",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "result",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "setTarget",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "values",
          "type": "bytes[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "textCallback",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xed3f418b648ebfa0a93733e9c0f098cf3092df253f038d1fced90036093d07bf",
  "receipt": {
    "to": null,
    "from": "0x4a8e79E5258592f208ddba8A8a0d3ffEB051B10A",
    "contractAddress": "0xad6729C101691A63F7d1e4CcbaD04bC8c6818a22",
    "transactionIndex": 55,
    "gasUsed": "1595825",
    "logsBloom": "0x
    "blockHash": "0x996c696b5d03ed3dccb2128e3cf266a3540582d142cbb9d7e63f0891292bd641",
    "transactionHash": "0xed3f418b648ebfa0a93733e9c0f098cf3092df253f038d1fced90036093d07bf",
    "logs": [],
    "blockNumber": 5854573,
    "cumulativeGasUsed": "8977317",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4167C0E7DE2f265A13E2E6B19f26AC4F8C7b4e5f",
    "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
    "0x0635513f179D50A207757E05759CbD106d7dFcE8"
  ],
  "numDeployments": 1,
  "solcInputHash": "4f2f57ee56ecc7735104c998f416d8c8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IEVMVerifier\",\"name\":\"_verifier\",\"type\":\"address\"},{\"internalType\":\"contract ENS\",\"name\":\"_ens\",\"type\":\"address\"},{\"internalType\":\"contract INameWrapper\",\"name\":\"_nameWrapper\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CommandTooLong\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"InvalidReference\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"urls\",\"type\":\"string[]\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"bytes4\",\"name\":\"callbackFunction\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"OffchainLookup\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"}],\"name\":\"ResponseLengthMismatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"TooManyCommands\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"TargetSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"values\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"addrCallback\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"values\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"addrCoinTypeCallback\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"values\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"contenthashCallback\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"extradata\",\"type\":\"bytes\"}],\"name\":\"getStorageSlotsCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"}],\"name\":\"getTarget\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"resolve\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"setTarget\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"values\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"textCallback\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getStorageSlotsCallback(bytes,bytes)\":{\"details\":\"Internal callback function invoked by CCIP-Read in response to a `getStorageSlots` request.\"},\"getTarget(bytes,uint256)\":{\"details\":\"Returns the L2 target address that can answer queries for `name`.\",\"params\":{\"name\":\"DNS encoded ENS name to query\",\"offset\":\"The offset of the label to query recursively.\"},\"returns\":{\"node\":\"The node of the name\",\"target\":\"The L2 resolver address to verify against.\"}},\"resolve(bytes,bytes)\":{\"details\":\"Resolve and verify a record stored in l2 target address. It supports subname by fetching target recursively to the nearlest parent.\",\"params\":{\"data\":\"The actual calldata\",\"name\":\"DNS encoded ENS name to query\"},\"returns\":{\"result\":\"result of the call\"}},\"setTarget(bytes32,address)\":{\"params\":{\"node\":\"The ENS node to query.\",\"target\":\"The L2 resolver address to verify against.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"setTarget(bytes32,address)\":{\"notice\":\"Set target address to verify aagainst\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/L1Resolver.sol\":\"L1Resolver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@ensdomains/ens-contracts/contracts/dnssec-oracle/BytesUtils.sol\":{\"content\":\"pragma solidity ^0.8.4;\\n\\nlibrary BytesUtils {\\n    error OffsetOutOfBoundsError(uint256 offset, uint256 length);\\n\\n    /*\\n     * @dev Returns the keccak-256 hash of a byte range.\\n     * @param self The byte string to hash.\\n     * @param offset The position to start hashing at.\\n     * @param len The number of bytes to hash.\\n     * @return The hash of the byte range.\\n     */\\n    function keccak(\\n        bytes memory self,\\n        uint256 offset,\\n        uint256 len\\n    ) internal pure returns (bytes32 ret) {\\n        require(offset + len <= self.length);\\n        assembly {\\n            ret := keccak256(add(add(self, 32), offset), len)\\n        }\\n    }\\n\\n    /*\\n     * @dev Returns a positive number if `other` comes lexicographically after\\n     *      `self`, a negative number if it comes before, or zero if the\\n     *      contents of the two bytes are equal.\\n     * @param self The first bytes to compare.\\n     * @param other The second bytes to compare.\\n     * @return The result of the comparison.\\n     */\\n    function compare(\\n        bytes memory self,\\n        bytes memory other\\n    ) internal pure returns (int256) {\\n        return compare(self, 0, self.length, other, 0, other.length);\\n    }\\n\\n    /*\\n     * @dev Returns a positive number if `other` comes lexicographically after\\n     *      `self`, a negative number if it comes before, or zero if the\\n     *      contents of the two bytes are equal. Comparison is done per-rune,\\n     *      on unicode codepoints.\\n     * @param self The first bytes to compare.\\n     * @param offset The offset of self.\\n     * @param len    The length of self.\\n     * @param other The second bytes to compare.\\n     * @param otheroffset The offset of the other string.\\n     * @param otherlen    The length of the other string.\\n     * @return The result of the comparison.\\n     */\\n    function compare(\\n        bytes memory self,\\n        uint256 offset,\\n        uint256 len,\\n        bytes memory other,\\n        uint256 otheroffset,\\n        uint256 otherlen\\n    ) internal pure returns (int256) {\\n        if (offset + len > self.length) {\\n            revert OffsetOutOfBoundsError(offset + len, self.length);\\n        }\\n        if (otheroffset + otherlen > other.length) {\\n            revert OffsetOutOfBoundsError(otheroffset + otherlen, other.length);\\n        }\\n\\n        uint256 shortest = len;\\n        if (otherlen < len) shortest = otherlen;\\n\\n        uint256 selfptr;\\n        uint256 otherptr;\\n\\n        assembly {\\n            selfptr := add(self, add(offset, 32))\\n            otherptr := add(other, add(otheroffset, 32))\\n        }\\n        for (uint256 idx = 0; idx < shortest; idx += 32) {\\n            uint256 a;\\n            uint256 b;\\n            assembly {\\n                a := mload(selfptr)\\n                b := mload(otherptr)\\n            }\\n            if (a != b) {\\n                // Mask out irrelevant bytes and check again\\n                uint256 mask;\\n                if (shortest - idx >= 32) {\\n                    mask = type(uint256).max;\\n                } else {\\n                    mask = ~(2 ** (8 * (idx + 32 - shortest)) - 1);\\n                }\\n                int256 diff = int256(a & mask) - int256(b & mask);\\n                if (diff != 0) return diff;\\n            }\\n            selfptr += 32;\\n            otherptr += 32;\\n        }\\n\\n        return int256(len) - int256(otherlen);\\n    }\\n\\n    /*\\n     * @dev Returns true if the two byte ranges are equal.\\n     * @param self The first byte range to compare.\\n     * @param offset The offset into the first byte range.\\n     * @param other The second byte range to compare.\\n     * @param otherOffset The offset into the second byte range.\\n     * @param len The number of bytes to compare\\n     * @return True if the byte ranges are equal, false otherwise.\\n     */\\n    function equals(\\n        bytes memory self,\\n        uint256 offset,\\n        bytes memory other,\\n        uint256 otherOffset,\\n        uint256 len\\n    ) internal pure returns (bool) {\\n        return keccak(self, offset, len) == keccak(other, otherOffset, len);\\n    }\\n\\n    /*\\n     * @dev Returns true if the two byte ranges are equal with offsets.\\n     * @param self The first byte range to compare.\\n     * @param offset The offset into the first byte range.\\n     * @param other The second byte range to compare.\\n     * @param otherOffset The offset into the second byte range.\\n     * @return True if the byte ranges are equal, false otherwise.\\n     */\\n    function equals(\\n        bytes memory self,\\n        uint256 offset,\\n        bytes memory other,\\n        uint256 otherOffset\\n    ) internal pure returns (bool) {\\n        return\\n            keccak(self, offset, self.length - offset) ==\\n            keccak(other, otherOffset, other.length - otherOffset);\\n    }\\n\\n    /*\\n     * @dev Compares a range of 'self' to all of 'other' and returns True iff\\n     *      they are equal.\\n     * @param self The first byte range to compare.\\n     * @param offset The offset into the first byte range.\\n     * @param other The second byte range to compare.\\n     * @return True if the byte ranges are equal, false otherwise.\\n     */\\n    function equals(\\n        bytes memory self,\\n        uint256 offset,\\n        bytes memory other\\n    ) internal pure returns (bool) {\\n        return\\n            self.length == offset + other.length &&\\n            equals(self, offset, other, 0, other.length);\\n    }\\n\\n    /*\\n     * @dev Returns true if the two byte ranges are equal.\\n     * @param self The first byte range to compare.\\n     * @param other The second byte range to compare.\\n     * @return True if the byte ranges are equal, false otherwise.\\n     */\\n    function equals(\\n        bytes memory self,\\n        bytes memory other\\n    ) internal pure returns (bool) {\\n        return\\n            self.length == other.length &&\\n            equals(self, 0, other, 0, self.length);\\n    }\\n\\n    /*\\n     * @dev Returns the 8-bit number at the specified index of self.\\n     * @param self The byte string.\\n     * @param idx The index into the bytes\\n     * @return The specified 8 bits of the string, interpreted as an integer.\\n     */\\n    function readUint8(\\n        bytes memory self,\\n        uint256 idx\\n    ) internal pure returns (uint8 ret) {\\n        return uint8(self[idx]);\\n    }\\n\\n    /*\\n     * @dev Returns the 16-bit number at the specified index of self.\\n     * @param self The byte string.\\n     * @param idx The index into the bytes\\n     * @return The specified 16 bits of the string, interpreted as an integer.\\n     */\\n    function readUint16(\\n        bytes memory self,\\n        uint256 idx\\n    ) internal pure returns (uint16 ret) {\\n        require(idx + 2 <= self.length);\\n        assembly {\\n            ret := and(mload(add(add(self, 2), idx)), 0xFFFF)\\n        }\\n    }\\n\\n    /*\\n     * @dev Returns the 32-bit number at the specified index of self.\\n     * @param self The byte string.\\n     * @param idx The index into the bytes\\n     * @return The specified 32 bits of the string, interpreted as an integer.\\n     */\\n    function readUint32(\\n        bytes memory self,\\n        uint256 idx\\n    ) internal pure returns (uint32 ret) {\\n        require(idx + 4 <= self.length);\\n        assembly {\\n            ret := and(mload(add(add(self, 4), idx)), 0xFFFFFFFF)\\n        }\\n    }\\n\\n    /*\\n     * @dev Returns the 32 byte value at the specified index of self.\\n     * @param self The byte string.\\n     * @param idx The index into the bytes\\n     * @return The specified 32 bytes of the string.\\n     */\\n    function readBytes32(\\n        bytes memory self,\\n        uint256 idx\\n    ) internal pure returns (bytes32 ret) {\\n        require(idx + 32 <= self.length);\\n        assembly {\\n            ret := mload(add(add(self, 32), idx))\\n        }\\n    }\\n\\n    /*\\n     * @dev Returns the 32 byte value at the specified index of self.\\n     * @param self The byte string.\\n     * @param idx The index into the bytes\\n     * @return The specified 32 bytes of the string.\\n     */\\n    function readBytes20(\\n        bytes memory self,\\n        uint256 idx\\n    ) internal pure returns (bytes20 ret) {\\n        require(idx + 20 <= self.length);\\n        assembly {\\n            ret := and(\\n                mload(add(add(self, 32), idx)),\\n                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000\\n            )\\n        }\\n    }\\n\\n    /*\\n     * @dev Returns the n byte value at the specified index of self.\\n     * @param self The byte string.\\n     * @param idx The index into the bytes.\\n     * @param len The number of bytes.\\n     * @return The specified 32 bytes of the string.\\n     */\\n    function readBytesN(\\n        bytes memory self,\\n        uint256 idx,\\n        uint256 len\\n    ) internal pure returns (bytes32 ret) {\\n        require(len <= 32);\\n        require(idx + len <= self.length);\\n        assembly {\\n            let mask := not(sub(exp(256, sub(32, len)), 1))\\n            ret := and(mload(add(add(self, 32), idx)), mask)\\n        }\\n    }\\n\\n    function memcpy(uint256 dest, uint256 src, uint256 len) private pure {\\n        // Copy word-length chunks while possible\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        unchecked {\\n            uint256 mask = (256 ** (32 - len)) - 1;\\n            assembly {\\n                let srcpart := and(mload(src), not(mask))\\n                let destpart := and(mload(dest), mask)\\n                mstore(dest, or(destpart, srcpart))\\n            }\\n        }\\n    }\\n\\n    /*\\n     * @dev Copies a substring into a new byte string.\\n     * @param self The byte string to copy from.\\n     * @param offset The offset to start copying at.\\n     * @param len The number of bytes to copy.\\n     */\\n    function substring(\\n        bytes memory self,\\n        uint256 offset,\\n        uint256 len\\n    ) internal pure returns (bytes memory) {\\n        require(offset + len <= self.length);\\n\\n        bytes memory ret = new bytes(len);\\n        uint256 dest;\\n        uint256 src;\\n\\n        assembly {\\n            dest := add(ret, 32)\\n            src := add(add(self, 32), offset)\\n        }\\n        memcpy(dest, src, len);\\n\\n        return ret;\\n    }\\n\\n    // Maps characters from 0x30 to 0x7A to their base32 values.\\n    // 0xFF represents invalid characters in that range.\\n    bytes constant base32HexTable =\\n        hex\\\"00010203040506070809FFFFFFFFFFFFFF0A0B0C0D0E0F101112131415161718191A1B1C1D1E1FFFFFFFFFFFFFFFFFFFFF0A0B0C0D0E0F101112131415161718191A1B1C1D1E1F\\\";\\n\\n    /**\\n     * @dev Decodes unpadded base32 data of up to one word in length.\\n     * @param self The data to decode.\\n     * @param off Offset into the string to start at.\\n     * @param len Number of characters to decode.\\n     * @return The decoded data, left aligned.\\n     */\\n    function base32HexDecodeWord(\\n        bytes memory self,\\n        uint256 off,\\n        uint256 len\\n    ) internal pure returns (bytes32) {\\n        require(len <= 52);\\n\\n        uint256 ret = 0;\\n        uint8 decoded;\\n        for (uint256 i = 0; i < len; i++) {\\n            bytes1 char = self[off + i];\\n            require(char >= 0x30 && char <= 0x7A);\\n            decoded = uint8(base32HexTable[uint256(uint8(char)) - 0x30]);\\n            require(decoded <= 0x20);\\n            if (i == len - 1) {\\n                break;\\n            }\\n            ret = (ret << 5) | decoded;\\n        }\\n\\n        uint256 bitlen = len * 5;\\n        if (len % 8 == 0) {\\n            // Multiple of 8 characters, no padding\\n            ret = (ret << 5) | decoded;\\n        } else if (len % 8 == 2) {\\n            // Two extra characters - 1 byte\\n            ret = (ret << 3) | (decoded >> 2);\\n            bitlen -= 2;\\n        } else if (len % 8 == 4) {\\n            // Four extra characters - 2 bytes\\n            ret = (ret << 1) | (decoded >> 4);\\n            bitlen -= 4;\\n        } else if (len % 8 == 5) {\\n            // Five extra characters - 3 bytes\\n            ret = (ret << 4) | (decoded >> 1);\\n            bitlen -= 1;\\n        } else if (len % 8 == 7) {\\n            // Seven extra characters - 4 bytes\\n            ret = (ret << 2) | (decoded >> 3);\\n            bitlen -= 3;\\n        } else {\\n            revert();\\n        }\\n\\n        return bytes32(ret << (256 - bitlen));\\n    }\\n\\n    /**\\n     * @dev Finds the first occurrence of the byte `needle` in `self`.\\n     * @param self The string to search\\n     * @param off The offset to start searching at\\n     * @param len The number of bytes to search\\n     * @param needle The byte to search for\\n     * @return The offset of `needle` in `self`, or 2**256-1 if it was not found.\\n     */\\n    function find(\\n        bytes memory self,\\n        uint256 off,\\n        uint256 len,\\n        bytes1 needle\\n    ) internal pure returns (uint256) {\\n        for (uint256 idx = off; idx < off + len; idx++) {\\n            if (self[idx] == needle) {\\n                return idx;\\n            }\\n        }\\n        return type(uint256).max;\\n    }\\n}\\n\",\"keccak256\":\"0x4f10902639b85a17ae10745264feff322e793bfb1bc130a9a90efa7dda47c6cc\"},\"@ensdomains/ens-contracts/contracts/ethregistrar/IBaseRegistrar.sol\":{\"content\":\"import \\\"../registry/ENS.sol\\\";\\nimport \\\"./IBaseRegistrar.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface IBaseRegistrar is IERC721 {\\n    event ControllerAdded(address indexed controller);\\n    event ControllerRemoved(address indexed controller);\\n    event NameMigrated(\\n        uint256 indexed id,\\n        address indexed owner,\\n        uint256 expires\\n    );\\n    event NameRegistered(\\n        uint256 indexed id,\\n        address indexed owner,\\n        uint256 expires\\n    );\\n    event NameRenewed(uint256 indexed id, uint256 expires);\\n\\n    // Authorises a controller, who can register and renew domains.\\n    function addController(address controller) external;\\n\\n    // Revoke controller permission for an address.\\n    function removeController(address controller) external;\\n\\n    // Set the resolver for the TLD this registrar manages.\\n    function setResolver(address resolver) external;\\n\\n    // Returns the expiration timestamp of the specified label hash.\\n    function nameExpires(uint256 id) external view returns (uint256);\\n\\n    // Returns true if the specified name is available for registration.\\n    function available(uint256 id) external view returns (bool);\\n\\n    /**\\n     * @dev Register a name.\\n     */\\n    function register(\\n        uint256 id,\\n        address owner,\\n        uint256 duration\\n    ) external returns (uint256);\\n\\n    function renew(uint256 id, uint256 duration) external returns (uint256);\\n\\n    /**\\n     * @dev Reclaim ownership of a name in ENS, if you own it in the registrar.\\n     */\\n    function reclaim(uint256 id, address owner) external;\\n}\\n\",\"keccak256\":\"0x15f7b1dfa7cd34444daf79ec9b4d40437caa9257893ce0639d706fcc2ba69e52\"},\"@ensdomains/ens-contracts/contracts/registry/ENS.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\ninterface ENS {\\n    // Logged when the owner of a node assigns a new owner to a subnode.\\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n    // Logged when the owner of a node transfers ownership to a new account.\\n    event Transfer(bytes32 indexed node, address owner);\\n\\n    // Logged when the resolver for a node changes.\\n    event NewResolver(bytes32 indexed node, address resolver);\\n\\n    // Logged when the TTL of a node changes\\n    event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n    // Logged when an operator is added or removed.\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    function setRecord(\\n        bytes32 node,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeRecord(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeOwner(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner\\n    ) external returns (bytes32);\\n\\n    function setResolver(bytes32 node, address resolver) external;\\n\\n    function setOwner(bytes32 node, address owner) external;\\n\\n    function setTTL(bytes32 node, uint64 ttl) external;\\n\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    function owner(bytes32 node) external view returns (address);\\n\\n    function resolver(bytes32 node) external view returns (address);\\n\\n    function ttl(bytes32 node) external view returns (uint64);\\n\\n    function recordExists(bytes32 node) external view returns (bool);\\n\\n    function isApprovedForAll(\\n        address owner,\\n        address operator\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x7cb1158c7d268b63de1468e28e2711b28d686e2628ddb22da2149cd93ddeafda\"},\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IAddrResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\n/**\\n * Interface for the legacy (ETH-only) addr function.\\n */\\ninterface IAddrResolver {\\n    event AddrChanged(bytes32 indexed node, address a);\\n\\n    /**\\n     * Returns the address associated with an ENS node.\\n     * @param node The ENS node to query.\\n     * @return The associated address.\\n     */\\n    function addr(bytes32 node) external view returns (address payable);\\n}\\n\",\"keccak256\":\"0x2ad7f2fc60ebe0f93745fe70247f6a854f66af732483fda2a3c5e055614445e8\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\n/**\\n * Interface for the new (multicoin) addr function.\\n */\\ninterface IAddressResolver {\\n    event AddressChanged(\\n        bytes32 indexed node,\\n        uint256 coinType,\\n        bytes newAddress\\n    );\\n\\n    function addr(\\n        bytes32 node,\\n        uint256 coinType\\n    ) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x411447c1e90c51e09702815a85ec725ffbbe37cf96e8cc4d2a8bd4ad8a59d73e\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IContentHashResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IContentHashResolver {\\n    event ContenthashChanged(bytes32 indexed node, bytes hash);\\n\\n    /**\\n     * Returns the contenthash associated with an ENS node.\\n     * @param node The ENS node to query.\\n     * @return The associated contenthash.\\n     */\\n    function contenthash(bytes32 node) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xd95cd77684ba5752c428d7dceb4ecc6506ac94f4fbb910489637eb68dcd8e366\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/resolvers/profiles/ITextResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface ITextResolver {\\n    event TextChanged(\\n        bytes32 indexed node,\\n        string indexed indexedKey,\\n        string key,\\n        string value\\n    );\\n\\n    /**\\n     * Returns the text data associated with an ENS node and key.\\n     * @param node The ENS node to query.\\n     * @param key The text data key to query.\\n     * @return The associated text data.\\n     */\\n    function text(\\n        bytes32 node,\\n        string calldata key\\n    ) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x7c5debb3c42cd9f5de2274ea7aa053f238608314b62db441c40e31cea2543fd5\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/wrapper/IMetadataService.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ~0.8.17;\\n\\ninterface IMetadataService {\\n    function uri(uint256) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xb3f1cf6df01ed7b15e5f2318f6823afbdb586ca38c2124c67955c645647ae9a2\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/wrapper/INameWrapper.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ~0.8.17;\\n\\nimport \\\"../registry/ENS.sol\\\";\\nimport \\\"../ethregistrar/IBaseRegistrar.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"./IMetadataService.sol\\\";\\nimport \\\"./INameWrapperUpgrade.sol\\\";\\n\\nuint32 constant CANNOT_UNWRAP = 1;\\nuint32 constant CANNOT_BURN_FUSES = 2;\\nuint32 constant CANNOT_TRANSFER = 4;\\nuint32 constant CANNOT_SET_RESOLVER = 8;\\nuint32 constant CANNOT_SET_TTL = 16;\\nuint32 constant CANNOT_CREATE_SUBDOMAIN = 32;\\nuint32 constant CANNOT_APPROVE = 64;\\n//uint16 reserved for parent controlled fuses from bit 17 to bit 32\\nuint32 constant PARENT_CANNOT_CONTROL = 1 << 16;\\nuint32 constant IS_DOT_ETH = 1 << 17;\\nuint32 constant CAN_EXTEND_EXPIRY = 1 << 18;\\nuint32 constant CAN_DO_EVERYTHING = 0;\\nuint32 constant PARENT_CONTROLLED_FUSES = 0xFFFF0000;\\n// all fuses apart from IS_DOT_ETH\\nuint32 constant USER_SETTABLE_FUSES = 0xFFFDFFFF;\\n\\ninterface INameWrapper is IERC1155 {\\n    event NameWrapped(\\n        bytes32 indexed node,\\n        bytes name,\\n        address owner,\\n        uint32 fuses,\\n        uint64 expiry\\n    );\\n\\n    event NameUnwrapped(bytes32 indexed node, address owner);\\n\\n    event FusesSet(bytes32 indexed node, uint32 fuses);\\n    event ExpiryExtended(bytes32 indexed node, uint64 expiry);\\n\\n    function ens() external view returns (ENS);\\n\\n    function registrar() external view returns (IBaseRegistrar);\\n\\n    function metadataService() external view returns (IMetadataService);\\n\\n    function names(bytes32) external view returns (bytes memory);\\n\\n    function name() external view returns (string memory);\\n\\n    function upgradeContract() external view returns (INameWrapperUpgrade);\\n\\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\\n\\n    function wrap(\\n        bytes calldata name,\\n        address wrappedOwner,\\n        address resolver\\n    ) external;\\n\\n    function wrapETH2LD(\\n        string calldata label,\\n        address wrappedOwner,\\n        uint16 ownerControlledFuses,\\n        address resolver\\n    ) external returns (uint64 expires);\\n\\n    function registerAndWrapETH2LD(\\n        string calldata label,\\n        address wrappedOwner,\\n        uint256 duration,\\n        address resolver,\\n        uint16 ownerControlledFuses\\n    ) external returns (uint256 registrarExpiry);\\n\\n    function renew(\\n        uint256 labelHash,\\n        uint256 duration\\n    ) external returns (uint256 expires);\\n\\n    function unwrap(bytes32 node, bytes32 label, address owner) external;\\n\\n    function unwrapETH2LD(\\n        bytes32 label,\\n        address newRegistrant,\\n        address newController\\n    ) external;\\n\\n    function upgrade(bytes calldata name, bytes calldata extraData) external;\\n\\n    function setFuses(\\n        bytes32 node,\\n        uint16 ownerControlledFuses\\n    ) external returns (uint32 newFuses);\\n\\n    function setChildFuses(\\n        bytes32 parentNode,\\n        bytes32 labelhash,\\n        uint32 fuses,\\n        uint64 expiry\\n    ) external;\\n\\n    function setSubnodeRecord(\\n        bytes32 node,\\n        string calldata label,\\n        address owner,\\n        address resolver,\\n        uint64 ttl,\\n        uint32 fuses,\\n        uint64 expiry\\n    ) external returns (bytes32);\\n\\n    function setRecord(\\n        bytes32 node,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeOwner(\\n        bytes32 node,\\n        string calldata label,\\n        address newOwner,\\n        uint32 fuses,\\n        uint64 expiry\\n    ) external returns (bytes32);\\n\\n    function extendExpiry(\\n        bytes32 node,\\n        bytes32 labelhash,\\n        uint64 expiry\\n    ) external returns (uint64);\\n\\n    function canModifyName(\\n        bytes32 node,\\n        address addr\\n    ) external view returns (bool);\\n\\n    function setResolver(bytes32 node, address resolver) external;\\n\\n    function setTTL(bytes32 node, uint64 ttl) external;\\n\\n    function ownerOf(uint256 id) external view returns (address owner);\\n\\n    function approve(address to, uint256 tokenId) external;\\n\\n    function getApproved(uint256 tokenId) external view returns (address);\\n\\n    function getData(\\n        uint256 id\\n    ) external view returns (address, uint32, uint64);\\n\\n    function setMetadataService(IMetadataService _metadataService) external;\\n\\n    function uri(uint256 tokenId) external view returns (string memory);\\n\\n    function setUpgradeContract(INameWrapperUpgrade _upgradeAddress) external;\\n\\n    function allFusesBurned(\\n        bytes32 node,\\n        uint32 fuseMask\\n    ) external view returns (bool);\\n\\n    function isWrapped(bytes32) external view returns (bool);\\n\\n    function isWrapped(bytes32, bytes32) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x70310eb67146d7290731c31841399640ac3b6a949eadc6598bc150123d185c57\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/wrapper/INameWrapperUpgrade.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ~0.8.17;\\n\\ninterface INameWrapperUpgrade {\\n    function wrapFromUpgrade(\\n        bytes calldata name,\\n        address wrappedOwner,\\n        uint32 fuses,\\n        uint64 expiry,\\n        address approved,\\n        bytes calldata extraData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x42e0cec6cd9d1a62d51d45b678f69d3e4ad5555e659b197e41257b308346bb8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xcab667ddad478ff0d39c2053ca77fac778af8483c18ab07d810277b4216fd582\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/L1Resolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.25;\\n\\nimport {EVMFetcher} from \\\"./linea-verifier/EVMFetcher.sol\\\";\\nimport {EVMFetchTarget} from \\\"./linea-verifier/EVMFetchTarget.sol\\\";\\nimport {IEVMVerifier} from \\\"./linea-verifier/IEVMVerifier.sol\\\";\\nimport \\\"@ensdomains/ens-contracts/contracts/registry/ENS.sol\\\";\\nimport {INameWrapper} from \\\"@ensdomains/ens-contracts/contracts/wrapper/INameWrapper.sol\\\";\\nimport {BytesUtils} from \\\"@ensdomains/ens-contracts/contracts/dnssec-oracle/BytesUtils.sol\\\";\\nimport {IAddrResolver} from \\\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IAddrResolver.sol\\\";\\nimport {IAddressResolver} from \\\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IAddressResolver.sol\\\";\\nimport {ITextResolver} from \\\"@ensdomains/ens-contracts/contracts/resolvers/profiles/ITextResolver.sol\\\";\\nimport {IContentHashResolver} from \\\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IContentHashResolver.sol\\\";\\n\\ncontract L1Resolver is EVMFetchTarget {\\n    using EVMFetcher for EVMFetcher.EVMFetchRequest;\\n    using BytesUtils for bytes;\\n    IEVMVerifier immutable verifier;\\n    ENS immutable ens;\\n    INameWrapper immutable nameWrapper;\\n    mapping(bytes32 => address) targets;\\n    uint256 constant COIN_TYPE_ETH = 60;\\n    uint256 constant RECORD_VERSIONS_SLOT = 0;\\n    uint256 constant VERSIONABLE_ABIS_SLOT = 1;\\n    uint256 constant VERSIONABLE_ADDRESSES_SLOT = 2;\\n    uint256 constant VERSIONABLE_HASHES_SLOT = 3;\\n    uint256 constant VERSIONABLE_TEXTS_SLOT = 10;\\n\\n    event TargetSet(bytes32 indexed node, address target);\\n\\n    function isAuthorised(bytes32 node) internal view returns (bool) {\\n        // TODO: Add support for\\n        // trustedETHController\\n        // trustedReverseRegistrar\\n        // isApprovedForAll\\n        // isApprovedFor\\n        address owner = ens.owner(node);\\n        if (owner == address(nameWrapper)) {\\n            owner = nameWrapper.ownerOf(uint256(node));\\n        }\\n        return owner == msg.sender;\\n    }\\n\\n    modifier authorised(bytes32 node) {\\n        require(isAuthorised(node));\\n        _;\\n    }\\n\\n    constructor(IEVMVerifier _verifier, ENS _ens, INameWrapper _nameWrapper) {\\n        require(\\n            address(_nameWrapper) != address(0),\\n            \\\"Name Wrapper address must be set\\\"\\n        );\\n        require(\\n            address(_verifier) != address(0),\\n            \\\"Verifier address must be set\\\"\\n        );\\n        require(address(_ens) != address(0), \\\"Registry address must be set\\\");\\n        verifier = _verifier;\\n        ens = _ens;\\n        nameWrapper = _nameWrapper;\\n    }\\n\\n    /**\\n     * Set target address to verify aagainst\\n     * @param node The ENS node to query.\\n     * @param target The L2 resolver address to verify against.\\n     */\\n    function setTarget(bytes32 node, address target) public authorised(node) {\\n        targets[node] = target;\\n        emit TargetSet(node, target);\\n    }\\n\\n    /**\\n     * @dev Returns the L2 target address that can answer queries for `name`.\\n     * @param name DNS encoded ENS name to query\\n     * @param offset The offset of the label to query recursively.\\n     * @return node The node of the name\\n     * @return target The L2 resolver address to verify against.\\n     */\\n    function getTarget(\\n        bytes memory name,\\n        uint256 offset\\n    ) public view returns (bytes32 node, address target) {\\n        uint256 len = name.readUint8(offset);\\n        node = bytes32(0);\\n        if (len > 0) {\\n            bytes32 label = name.keccak(offset + 1, len);\\n            (node, target) = getTarget(name, offset + len + 1);\\n            node = keccak256(abi.encodePacked(node, label));\\n            if (targets[node] != address(0)) {\\n                return (node, targets[node]);\\n            }\\n        } else {\\n            return (bytes32(0), address(0));\\n        }\\n        return (node, target);\\n    }\\n\\n    /**\\n     * @dev Resolve and verify a record stored in l2 target address. It supports subname by fetching target recursively to the nearlest parent.\\n     * @param name DNS encoded ENS name to query\\n     * @param data The actual calldata\\n     * @return result result of the call\\n     */\\n    function resolve(\\n        bytes calldata name,\\n        bytes calldata data\\n    ) external view returns (bytes memory result) {\\n        (, address target) = getTarget(name, 0);\\n        bytes4 selector = bytes4(data);\\n\\n        if (selector == IAddrResolver.addr.selector) {\\n            bytes32 node = abi.decode(data[4:], (bytes32));\\n            return _addr(node, target);\\n        }\\n        if (selector == IAddressResolver.addr.selector) {\\n            (bytes32 node, uint256 cointype) = abi.decode(\\n                data[4:],\\n                (bytes32, uint256)\\n            );\\n            return _addr(node, cointype, target);\\n        }\\n        if (selector == ITextResolver.text.selector) {\\n            (bytes32 node, string memory key) = abi.decode(\\n                data[4:],\\n                (bytes32, string)\\n            );\\n            return bytes(_text(node, key, target));\\n        }\\n        if (selector == IContentHashResolver.contenthash.selector) {\\n            bytes32 node = abi.decode(data[4:], (bytes32));\\n            return _contenthash(node, target);\\n        }\\n    }\\n\\n    function _addr(\\n        bytes32 node,\\n        address target\\n    ) private view returns (bytes memory) {\\n        EVMFetcher\\n            .newFetchRequest(verifier, target)\\n            .getStatic(RECORD_VERSIONS_SLOT)\\n            .element(node)\\n            .getDynamic(VERSIONABLE_ADDRESSES_SLOT)\\n            .ref(0)\\n            .element(node)\\n            .element(COIN_TYPE_ETH)\\n            .fetch(this.addrCallback.selector, \\\"\\\"); // recordVersions\\n    }\\n\\n    function addrCallback(\\n        bytes[] memory values,\\n        bytes memory\\n    ) public pure returns (bytes memory) {\\n        return abi.encode(address(bytes20(values[1])));\\n    }\\n\\n    function _addr(\\n        bytes32 node,\\n        uint256 coinType,\\n        address target\\n    ) private view returns (bytes memory) {\\n        EVMFetcher\\n            .newFetchRequest(verifier, target)\\n            .getStatic(RECORD_VERSIONS_SLOT)\\n            .element(node)\\n            .getDynamic(VERSIONABLE_ADDRESSES_SLOT)\\n            .ref(0)\\n            .element(node)\\n            .element(coinType)\\n            .fetch(this.addrCoinTypeCallback.selector, \\\"\\\");\\n    }\\n\\n    function addrCoinTypeCallback(\\n        bytes[] memory values,\\n        bytes memory\\n    ) public pure returns (bytes memory) {\\n        return abi.encode(values[1]);\\n    }\\n\\n    function _text(\\n        bytes32 node,\\n        string memory key,\\n        address target\\n    ) private view returns (bytes memory) {\\n        EVMFetcher\\n            .newFetchRequest(verifier, target)\\n            .getStatic(RECORD_VERSIONS_SLOT)\\n            .element(node)\\n            .getDynamic(VERSIONABLE_TEXTS_SLOT)\\n            .ref(0)\\n            .element(node)\\n            .element(key)\\n            .fetch(this.textCallback.selector, \\\"\\\");\\n    }\\n\\n    function textCallback(\\n        bytes[] memory values,\\n        bytes memory\\n    ) public pure returns (bytes memory) {\\n        return abi.encode(string(values[1]));\\n    }\\n\\n    function _contenthash(\\n        bytes32 node,\\n        address target\\n    ) private view returns (bytes memory) {\\n        EVMFetcher\\n            .newFetchRequest(verifier, target)\\n            .getStatic(RECORD_VERSIONS_SLOT)\\n            .element(node)\\n            .getDynamic(VERSIONABLE_HASHES_SLOT)\\n            .ref(0)\\n            .element(node)\\n            .fetch(this.contenthashCallback.selector, \\\"\\\");\\n    }\\n\\n    function contenthashCallback(\\n        bytes[] memory values,\\n        bytes memory\\n    ) public pure returns (bytes memory) {\\n        return abi.encode(values[1]);\\n    }\\n}\\n\",\"keccak256\":\"0x2ead3c412e453c3757bb841614aab67406a5e614bbc69f219fac55e5afaa208d\",\"license\":\"MIT\"},\"contracts/linea-verifier/EVMFetchTarget.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.25;\\n\\nimport {IEVMVerifier} from \\\"./IEVMVerifier.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/**\\n * @dev Callback implementation for users of `EVMFetcher`. If you use `EVMFetcher`, your contract must\\n *      inherit from this contract in order to handle callbacks correctly.\\n */\\nabstract contract EVMFetchTarget {\\n    using Address for address;\\n\\n    error ResponseLengthMismatch(uint256 actual, uint256 expected);\\n\\n    /**\\n     * @dev Internal callback function invoked by CCIP-Read in response to a `getStorageSlots` request.\\n     */\\n    function getStorageSlotsCallback(\\n        bytes calldata response,\\n        bytes calldata extradata\\n    ) external {\\n        bytes memory proof = abi.decode(response, (bytes));\\n        (\\n            IEVMVerifier verifier,\\n            bytes32[] memory commands,\\n            bytes[] memory constants,\\n            bytes4 callback,\\n            bytes memory callbackData\\n        ) = abi.decode(\\n                extradata,\\n                (IEVMVerifier, bytes32[], bytes[], bytes4, bytes)\\n            );\\n        bytes[] memory values = verifier.getStorageValues(\\n            commands,\\n            constants,\\n            proof\\n        );\\n        if (values.length != commands.length) {\\n            revert ResponseLengthMismatch(values.length, commands.length);\\n        }\\n        bytes memory ret = address(this).functionCall(\\n            abi.encodeWithSelector(callback, values, callbackData)\\n        );\\n        assembly {\\n            return(add(ret, 32), mload(ret))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xff598cf7042e31b6445e41344a1742ecee12fa5fb28da515f5b2fccd2fec72bf\",\"license\":\"MIT\"},\"contracts/linea-verifier/EVMFetcher.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.25;\\n\\nimport {IEVMVerifier} from \\\"./IEVMVerifier.sol\\\";\\nimport {EVMFetchTarget} from \\\"./EVMFetchTarget.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\ninterface IEVMGateway {\\n    function getStorageSlots(\\n        address addr,\\n        bytes32[] memory commands,\\n        bytes[] memory constants\\n    ) external pure returns (bytes memory witness);\\n}\\n\\nuint8 constant FLAG_DYNAMIC = 0x01;\\nuint8 constant OP_CONSTANT = 0x00;\\nuint8 constant OP_BACKREF = 0x20;\\nuint8 constant OP_END = 0xff;\\n\\n/**\\n * @dev A library to facilitate requesting storage data proofs from contracts, possibly on a different chain.\\n *      See l1-verifier/test/TestL1.sol for example usage.\\n */\\nlibrary EVMFetcher {\\n    uint256 constant MAX_COMMANDS = 32;\\n    uint256 constant MAX_CONSTANTS = 32; // Must not be greater than 32\\n\\n    using Address for address;\\n\\n    error TooManyCommands(uint256 max);\\n    error CommandTooLong();\\n    error InvalidReference(uint256 value, uint256 max);\\n    error OffchainLookup(\\n        address sender,\\n        string[] urls,\\n        bytes callData,\\n        bytes4 callbackFunction,\\n        bytes extraData\\n    );\\n\\n    struct EVMFetchRequest {\\n        IEVMVerifier verifier;\\n        address target;\\n        bytes32[] commands;\\n        uint256 operationIdx;\\n        bytes[] constants;\\n    }\\n\\n    /**\\n     * @dev Creates a request to fetch the value of multiple storage slots from a contract via CCIP-Read, possibly from\\n     *      another chain.\\n     *      Supports dynamic length values and slot numbers derived from other retrieved values.\\n     * @param verifier An instance of a verifier contract that can provide and verify the storage slot information.\\n     * @param target The address of the contract to fetch storage proofs for.\\n     */\\n    function newFetchRequest(\\n        IEVMVerifier verifier,\\n        address target\\n    ) internal pure returns (EVMFetchRequest memory) {\\n        bytes32[] memory commands = new bytes32[](MAX_COMMANDS);\\n        bytes[] memory constants = new bytes[](MAX_CONSTANTS);\\n        assembly {\\n            mstore(commands, 0) // Set current array length to 0\\n            mstore(constants, 0)\\n        }\\n        return EVMFetchRequest(verifier, target, commands, 0, constants);\\n    }\\n\\n    /**\\n     * @dev Starts describing a new fetch request.\\n     *      Paths specify a series of hashing operations to derive the final slot ID.\\n     *      See https://docs.soliditylang.org/en/v0.8.17/internals/layout_in_storage.html for details on how Solidity\\n     *      lays out storage variables.\\n     * @param request The request object being operated on.\\n     * @param baseSlot The base slot ID that forms the root of the path.\\n     */\\n    function getStatic(\\n        EVMFetchRequest memory request,\\n        uint256 baseSlot\\n    ) internal pure returns (EVMFetchRequest memory) {\\n        bytes32[] memory commands = request.commands;\\n        uint256 commandIdx = commands.length;\\n        if (commandIdx > 0 && request.operationIdx < 32) {\\n            // Terminate previous command\\n            _addOperation(request, OP_END);\\n        }\\n        assembly {\\n            mstore(commands, add(commandIdx, 1)) // Increment command array length\\n        }\\n        if (request.commands.length > MAX_COMMANDS) {\\n            revert TooManyCommands(MAX_COMMANDS);\\n        }\\n        request.operationIdx = 0;\\n        _addOperation(request, 0);\\n        _addOperation(request, _addConstant(request, abi.encode(baseSlot)));\\n        return request;\\n    }\\n\\n    /**\\n     * @dev Starts describing a new fetch request.\\n     *      Paths specify a series of hashing operations to derive the final slot ID.\\n     *      See https://docs.soliditylang.org/en/v0.8.17/internals/layout_in_storage.html for details on how Solidity\\n     *      lays out storage variables.\\n     * @param request The request object being operated on.\\n     * @param baseSlot The base slot ID that forms the root of the path.\\n     */\\n    function getDynamic(\\n        EVMFetchRequest memory request,\\n        uint256 baseSlot\\n    ) internal pure returns (EVMFetchRequest memory) {\\n        bytes32[] memory commands = request.commands;\\n        uint256 commandIdx = commands.length;\\n        if (commandIdx > 0 && request.operationIdx < 32) {\\n            // Terminate previous command\\n            _addOperation(request, OP_END);\\n        }\\n        assembly {\\n            mstore(commands, add(commandIdx, 1)) // Increment command array length\\n        }\\n        if (request.commands.length > MAX_COMMANDS) {\\n            revert TooManyCommands(MAX_COMMANDS);\\n        }\\n        request.operationIdx = 0;\\n        _addOperation(request, FLAG_DYNAMIC);\\n        _addOperation(request, _addConstant(request, abi.encode(baseSlot)));\\n        return request;\\n    }\\n\\n    /**\\n     * @dev Adds a `uint256` element to the current path.\\n     * @param request The request object being operated on.\\n     * @param el The element to add.\\n     */\\n    function element(\\n        EVMFetchRequest memory request,\\n        uint256 el\\n    ) internal pure returns (EVMFetchRequest memory) {\\n        if (request.operationIdx >= 32) {\\n            revert CommandTooLong();\\n        }\\n        _addOperation(request, _addConstant(request, abi.encode(el)));\\n        return request;\\n    }\\n\\n    /**\\n     * @dev Adds a `bytes32` element to the current path.\\n     * @param request The request object being operated on.\\n     * @param el The element to add.\\n     */\\n    function element(\\n        EVMFetchRequest memory request,\\n        bytes32 el\\n    ) internal pure returns (EVMFetchRequest memory) {\\n        if (request.operationIdx >= 32) {\\n            revert CommandTooLong();\\n        }\\n        _addOperation(request, _addConstant(request, abi.encode(el)));\\n        return request;\\n    }\\n\\n    /**\\n     * @dev Adds an `address` element to the current path.\\n     * @param request The request object being operated on.\\n     * @param el The element to add.\\n     */\\n    function element(\\n        EVMFetchRequest memory request,\\n        address el\\n    ) internal pure returns (EVMFetchRequest memory) {\\n        if (request.operationIdx >= 32) {\\n            revert CommandTooLong();\\n        }\\n        _addOperation(request, _addConstant(request, abi.encode(el)));\\n        return request;\\n    }\\n\\n    /**\\n     * @dev Adds a `bytes` element to the current path.\\n     * @param request The request object being operated on.\\n     * @param el The element to add.\\n     */\\n    function element(\\n        EVMFetchRequest memory request,\\n        bytes memory el\\n    ) internal pure returns (EVMFetchRequest memory) {\\n        if (request.operationIdx >= 32) {\\n            revert CommandTooLong();\\n        }\\n        _addOperation(request, _addConstant(request, el));\\n        return request;\\n    }\\n\\n    /**\\n     * @dev Adds a `string` element to the current path.\\n     * @param request The request object being operated on.\\n     * @param el The element to add.\\n     */\\n    function element(\\n        EVMFetchRequest memory request,\\n        string memory el\\n    ) internal pure returns (EVMFetchRequest memory) {\\n        if (request.operationIdx >= 32) {\\n            revert CommandTooLong();\\n        }\\n        _addOperation(request, _addConstant(request, bytes(el)));\\n        return request;\\n    }\\n\\n    /**\\n     * @dev Adds a reference to a previous fetch to the current path.\\n     * @param request The request object being operated on.\\n     * @param idx The index of the previous fetch request, starting at 0.\\n     */\\n    function ref(\\n        EVMFetchRequest memory request,\\n        uint8 idx\\n    ) internal pure returns (EVMFetchRequest memory) {\\n        if (request.operationIdx >= 32) {\\n            revert CommandTooLong();\\n        }\\n        if (idx > request.commands.length || idx > 31) {\\n            revert InvalidReference(idx, request.commands.length);\\n        }\\n        _addOperation(request, OP_BACKREF | idx);\\n        return request;\\n    }\\n\\n    /**\\n     * @dev Initiates the fetch request.\\n     *      Calling this function terminates execution; clients that implement CCIP-Read will make a callback to\\n     *      `callback` with the results of the operation.\\n     * @param callbackId A callback function selector on this contract that will be invoked via CCIP-Read with the result of the lookup.\\n     *        The function must have a signature matching `(bytes[] memory values, bytes callbackData)` with a return type matching the call in which\\n     *        this function was invoked. Its return data will be returned as the return value of the entire CCIP-read operation.\\n     * @param callbackData Extra data to supply to the callback.\\n     */\\n    function fetch(\\n        EVMFetchRequest memory request,\\n        bytes4 callbackId,\\n        bytes memory callbackData\\n    ) internal view {\\n        if (request.commands.length > 0 && request.operationIdx < 32) {\\n            // Terminate last command\\n            _addOperation(request, OP_END);\\n        }\\n\\n        revert OffchainLookup(\\n            address(this),\\n            request.verifier.gatewayURLs(),\\n            abi.encodeCall(\\n                IEVMGateway.getStorageSlots,\\n                (request.target, request.commands, request.constants)\\n            ),\\n            EVMFetchTarget.getStorageSlotsCallback.selector,\\n            abi.encode(\\n                request.verifier,\\n                request.commands,\\n                request.constants,\\n                callbackId,\\n                callbackData\\n            )\\n        );\\n    }\\n\\n    function _addConstant(\\n        EVMFetchRequest memory request,\\n        bytes memory value\\n    ) private pure returns (uint8 idx) {\\n        bytes[] memory constants = request.constants;\\n        idx = uint8(constants.length);\\n        assembly {\\n            mstore(constants, add(idx, 1)) // Increment constant array length\\n        }\\n        constants[idx] = value;\\n    }\\n\\n    function _addOperation(\\n        EVMFetchRequest memory request,\\n        uint8 op\\n    ) private pure {\\n        uint256 commandIdx = request.commands.length - 1;\\n        request.commands[commandIdx] =\\n            request.commands[commandIdx] |\\n            (bytes32(bytes1(op)) >> (8 * request.operationIdx++));\\n    }\\n}\\n\",\"keccak256\":\"0xc53848b88ec0ab63f1b4c59daa5de8d0b33431d05da3722c20d410318ec9c0b8\",\"license\":\"MIT\"},\"contracts/linea-verifier/IEVMVerifier.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.25;\\n\\ninterface IEVMVerifier {\\n    function gatewayURLs() external view returns (string[] memory);\\n\\n    function getStorageValues(\\n        bytes32[] memory commands,\\n        bytes[] memory constants,\\n        bytes memory proof\\n    ) external view returns (bytes[] memory values);\\n}\\n\",\"keccak256\":\"0x9ffc2a113f5f562575a6a8d87669130587a428c16c9f08e35fea56778051ee08\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e03461019757601f611d7a38819003918201601f191683019291906001600160401b0384118385101761019c5781606092849260409687528339810103126101975780516001600160a01b039182821691908282036101975760208101519284841691828503610197578601519485168086036101975715610154571561011057156100cc5760805260a05260c05251611bc790816101b38239608051818181610de601528181610fc70152818161113c0152611240015260a05181610424015260c0518161045b0152f35b835162461bcd60e51b815260206004820152601c60248201527f52656769737472792061646472657373206d75737420626520736574000000006044820152606490fd5b845162461bcd60e51b815260206004820152601c60248201527f56657269666965722061646472657373206d75737420626520736574000000006044820152606490fd5b6064865162461bcd60e51b815260206004820152602060248201527f4e616d6520577261707065722061646472657373206d757374206265207365746044820152fd5b600080fd5b634e487b7160e01b600052604160045260246000fdfe6080604052600436101561001257600080fd5b6000803560e01c9081632ec7385a146100905750806338bf92e6146100775780634280bfb51461008b5780635bdaa916146100865780639061b92314610081578063de9abe5e14610077578063f470901a1461007c5763fcd2e3811461007757600080fd5b610363565b61078b565b6106a0565b6105ad565b6103dc565b346100e35760403660031901126100e357600435906001600160401b0382116100e35760406100ce6100c536600486016101cb565b60243590610849565b82519182526001600160a01b03166020820152f35b80fd5b634e487b7160e01b600052604160045260246000fd5b604081019081106001600160401b0382111761011757604052565b6100e6565b602081019081106001600160401b0382111761011757604052565b61042081019081106001600160401b0382111761011757604052565b90601f801991011681019081106001600160401b0382111761011757604052565b6001600160401b03811161011757601f01601f191660200190565b92919261019b82610174565b916101a96040519384610153565b8294818452818301116101c6578281602093846000960137010152565b600080fd5b9080601f830112156101c6578160206101e69335910161018f565b90565b6001600160401b0381116101175760051b60200190565b81601f820112156101c65780359160209161021a846101e9565b936102286040519586610153565b808552838086019160051b830101928084116101c657848301915b8483106102535750505050505090565b82356001600160401b0381116101c6578691610274848480948901016101cb565b815201920191610243565b9060406003198301126101c6576001600160401b036004358181116101c657836102ab91600401610200565b926024359182116101c6576101e6916004016101cb565b60005b8381106102d55750506000910152565b81810151838201526020016102c5565b906020916102fe815180928185528580860191016102c2565b601f01601f1916010190565b906020916020815260605180602083015260005b81811061033f575060409293506000838284010152601f8019910116010190565b608081015183820160400152840161031e565b9060206101e69281815201906102e5565b346101c6576103713661027f565b508051600110156103c6576103a06103ae60406103c293015160405192839160208084015260408301906102e5565b03601f198101835282610153565b6040519182916020835260208301906102e5565b0390f35b61090e565b6001600160a01b038116036101c657565b346101c65760403660031901126101c6576004356024356103fc816103cb565b6040516302571be360e01b8152600481018390526001600160a01b03929060209081816024817f000000000000000000000000000000000000000000000000000000000000000089165afa918215610512578591600093610517575b507f0000000000000000000000000000000000000000000000000000000000000000821691831682146104a0575b50506104999061049e9433911614610938565b61093f565b005b6040516331a9108f60e11b81526004810185905295909250908290869060249082905afa80156105125761049e95610499936000926104e5575b505091819550610486565b6105049250803d1061050b575b6104fc8183610153565b810190610d3c565b38806104da565b503d6104f2565b610c44565b8161052f9294503d851161050b576104fc8183610153565b9138610458565b9181601f840112156101c6578235916001600160401b0383116101c657602083818601950101116101c657565b60406003198201126101c6576001600160401b03916004358381116101c6578261058f91600401610536565b939093926024359182116101c6576105a991600401610536565b9091565b346101c6576105d26105fe60006105db6105c636610563565b9691839193019061099b565b948101906109d5565b9492939096916040518097819482936322b2358760e01b84528860048501610c0d565b03916001600160a01b03165afa9283156105125760009361067b575b5082519051908181036106555761064d84610647876103a087604051948593602085015260248401610c50565b30610d51565b602081519101f35b604051632918942560e01b815260048101919091526024810191909152604490fd5b0390fd5b6106999193503d806000833e6106918183610153565b810190610ad2565b913861061a565b346101c6576106c260006106c76106b636610563565b9492909591369161018f565b610849565b9290506001600160e01b03196106dd8383610c75565b16631d9dabef60e11b8114610777576378e5bf0360e11b811461075a57631674750f60e21b811461073d5763bc1c58d160e01b1461072257604051806103c28161030a565b816107389261073092610ca1565b810190610cbe565b611232565b50816107549261074c92610ca1565b810190610ce3565b9061112d565b50816107719261076992610ca1565b810190610ccd565b90610fad565b50816107869261073092610ca1565b610dd0565b346101c6576107993661027f565b508051600110156103c6576103a06107f260406103c293015160208151910151906bffffffffffffffffffffffff199182811691601481106107fe575b50506040805160609290921c6020830152909384925090820190565b60405191829182610352565b8391925060140360031b1b16168038806107d6565b634e487b7160e01b600052601160045260246000fd5b906001820180921161083757565b610813565b9190820180921161083757565b919091805183101561090e576020838201015160f81c8015610902579061088e610889836108836108949561087d89610829565b86610d22565b9661083c565b610829565b90610849565b604080516020810193845290810194909452926108b481606081016103a0565b51902060008181526020819052604090206001600160a01b03906108e0905b546001600160a01b031690565b166108e9579190565b91506101e66108d3836000526000602052604060002090565b50509050600090600090565b634e487b7160e01b600052603260045260246000fd5b80518210156103c65760209160051b010190565b156101c657565b9060207faf930f9068b0eb51ed43cbf5948d6bab0229ebadb371dd850de50b9d6d30106a91836000526000825260406000209060018060a01b031690816bffffffffffffffffffffffff60a01b825416179055604051908152a2565b906020828203126101c65781356001600160401b0381116101c6576101e692016101cb565b35906001600160e01b0319821682036101c657565b9060a0828203126101c65781356109eb816103cb565b926001600160401b03906020848101358381116101c65785019084601f830112156101c657813591610a1c836101e9565b92610a2a6040519485610153565b808452828085019160051b830101918783116101c6578301905b828210610a8c57505050509360408101358381116101c65784610a68918301610200565b93610a75606083016109c0565b9360808301359081116101c6576101e692016101cb565b81358152908301908301610a44565b90929192610aa881610174565b91610ab66040519384610153565b8294828452828201116101c6576020610ad09301906102c2565b565b9060209081838203126101c65782516001600160401b03938482116101c657019080601f830112156101c6578151610b09816101e9565b94604090610b1a6040519788610153565b828752858088019360051b860101948486116101c657868101935b868510610b4757505050505050505090565b84518381116101c657820186603f820112156101c6578891610b7188838886809601519101610a9b565b815201940193610b35565b90815180825260208080930193019160005b828110610b9c575050505090565b835185529381019392810192600101610b8e565b90808251908181526020809101926020808460051b8301019501936000915b848310610bdf5750505050505090565b9091929394958480610bfd600193601f198682030187528a516102e5565b9801930193019194939290610bcf565b91610c3690610c286101e69593606086526060860190610b7c565b908482036020860152610bb0565b9160408184039101526102e5565b6040513d6000823e3d90fd5b9091610c676101e693604084526040840190610bb0565b9160208184039101526102e5565b6001600160e01b03199035818116939260048110610c9257505050565b60040360031b82901b16169150565b90929192836004116101c65783116101c657600401916003190190565b908160209103126101c6573590565b91908260409103126101c6576020823592013590565b91906040838203126101c6578235926020810135906001600160401b0382116101c657019080601f830112156101c6578160206101e69335910161018f565b90828101808211610837578251106101c657016020012090565b908160209103126101c657516101e6816103cb565b906101e69160008060405193610d66856100fc565b601e85527f416464726573733a206c6f772d6c6576656c2063616c6c206661696c65640000602086015260208151910182855af13d15610dc8573d91610dab83610174565b92610db96040519485610153565b83523d6000602085013e61196d565b60609161196d565b610e0f610e19610e1483610e0f610e0a610e1e977f0000000000000000000000000000000000000000000000000000000000000000611336565b6113d2565b611449565b61147d565b6114f4565b610e266112f9565b50606081016020918282511015610f9b57600490604090610e63610e5d8351603c88820152878152610e57816100fc565b83611b64565b82611b03565b815194610e6f8661011c565b60008652828201948186515115159182610f90575b5050610f82575b8151600090610eaa906001600160a01b03165b6001600160a01b031690565b8451632d43cbef60e21b815295869182905afa93841561051257600094610f65575b50818101516001600160a01b0316948051966080840197885197865198899263ea9cd3bf60e01b878501526024840192610f0593611567565b0393601f19948581018952610f1a9089610153565b516001600160a01b0316915197518551988994850193610f399461159d565b039081018552610f499085610153565b51630556f18360e41b81529283926106779230600486016116b7565b610f7b9194503d806000833e6106918183610153565b9238610ecc565b610f8b826119fe565b610e8b565b511090508138610e84565b604051631601fac760e31b8152600490fd5b80610e0f610e19610e14610e0f94610e0f610e0a610feb997f0000000000000000000000000000000000000000000000000000000000000000611336565b6040906004825192610ffc8461011c565b600084528083019081515115158061111f575b611111575b835160009061102b906001600160a01b0316610e9e565b8251632d43cbef60e21b815294859182905afa928315610512576000936110ee575b5060208401519293610677936110d691906001600160a01b0316936110ca8151986110b86080850197611096895189519d8e9363ea9cd3bf60e01b602086015260248501611567565b03946110ab601f19968d88820190528d610153565b516001600160a01b031690565b925196518651978894602086016115ee565b03908101845283610153565b51630556f18360e41b815293849330600486016116b7565b610677935061110a6110d6913d806000833e6106918183610153565b935061104d565b61111a846119fe565b611014565b50602060608501511061100f565b909181610e0f610e0a611160937f0000000000000000000000000000000000000000000000000000000000000000611336565b906111696112f9565b5060206040830180516001815180151580611225575b611217575b0190525151116111fe57610e0f82600060606111c49501526111a581611aa8565b610e19610e5d604051610e57816103a06020820190600a602083019252565b906111cd6112f9565b50602060608301511015610f9b57610e5d6111e89183611b64565b604051906111f58261011c565b6000825261175b565b604051630251ce0160e31b815260206004820152602490fd5b611220876119fe565b611184565b508460608801511061117f565b9081610e0f610e0a611264937f0000000000000000000000000000000000000000000000000000000000000000611336565b9061126d6112f9565b50602060408301805160018151801515806112ec575b6112de575b0190525151116111fe57610e0f82600060606112c89501526112a981611aa8565b610e19610e5d604051610e57816103a060208201906003602083019252565b604051906112d58261011c565b60008252611881565b6112e7876119fe565b611288565b5084606088015110611283565b6040519060a082018281106001600160401b0382111761011757604052606060808360008152600060208201528260408201526000838201520152565b61133e6112f9565b5060405161134b81610137565b6020916020825261040092833660208501376040519361136a85610137565b60005b8181106113c35750505060008252600083526040519360a085018581106001600160401b03821117610117576040526001600160a01b039182168552166020840152604083015260006060830152608082015290565b6060868201840152820161136d565b6113da6112f9565b506020604082018051600181518015158061143c575b61142e575b0190525151116111fe576000606082015261140f81611a5c565b6101e6610e5d604051610e57816103a060208201906000602083019252565b611437866119fe565b6113f5565b50846060870151106113f0565b906114526112f9565b50602060608301511015610f9b57610e5d6101e69160405190602082015260208152610e57816100fc565b6114856112f9565b50602060408201805160018151801515806114e7575b6114d9575b0190525151116111fe57600060608201526114ba81611aa8565b6101e6610e5d604051610e57816103a060208201906002602083019252565b6114e2866119fe565b6114a0565b508460608701511061149b565b6114fc6112f9565b5060608101602081511015610f9b576040820190815151600019918282019182116108375761152c828551610924565b51908051938414610837576001840190526001600160fd1b03831683036108375761156392600160fd1b9060031b1c179251610924565b5290565b6001600160a01b0390911681526060602082018190526101e693919261158f91840190610b7c565b916040818403910152610bb0565b926115c56101e695936115d39360018060a01b0316865260a0602087015260a0860190610b7c565b908482036040860152610bb0565b91637a38480d60e11b606082015260808184039101526102e5565b926115c56101e695936116169360018060a01b0316865260a0602087015260a0860190610b7c565b91631c5fc97360e11b606082015260808184039101526102e5565b926115c56101e695936116599360018060a01b0316865260a0602087015260a0860190610b7c565b91636f4d5f2f60e11b606082015260808184039101526102e5565b926115c56101e6959361169c9360018060a01b0316865260a0602087015260a0860190610b7c565b9163fcd2e38160e01b606082015260808184039101526102e5565b92909493919460a084019060018060a01b0316845260209060a06020860152865180915260c0850191602060c08360051b8801019801926000905b83821061172f5750505050508461171491846101e696970360408601526102e5565b632ded548b60e11b60608401529160808184039101526102e5565b9091929398838061174c60019360bf198c82030186528d516102e5565b9b0192019201909392916116f2565b600460408201805151151580611873575b611865575b8251600090611788906001600160a01b0316610e9e565b604051632d43cbef60e21b815293849182905afa91821561051257600092611842575b50602083015191926106779261182891906001600160a01b03169261181c81519761180960808501966117f588516040519c8d9363ea9cd3bf60e01b602086015260248501611567565b03946110ab601f19968781018d528c610153565b9251955160405196879460208601611631565b03908101835282610153565b604051630556f18360e41b815293849330600486016116b7565b610677925061185e611828913d806000833e6106918183610153565b92506117ab565b61186e836119fe565b611771565b50602060608401511061176c565b60046040820180515115158061195f575b611951575b82516000906118ae906001600160a01b0316610e9e565b604051632d43cbef60e21b815293849182905afa9182156105125760009261192e575b50602083015191926106779261182891906001600160a01b03169261181c81519761191b60808501966117f588516040519c8d9363ea9cd3bf60e01b602086015260248501611567565b9251955160405196879460208601611674565b610677925061194a611828913d806000833e6106918183610153565b92506118d1565b61195a836119fe565b611897565b506020606084015110611892565b919290156119cf5750815115611981575090565b3b1561198a5790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156119e25750805190602001fd5b60405162461bcd60e51b81529081906106779060048301610352565b604081019081515160001991828201918211610837576060611a21838651610924565b5191018051938414610837576001840190526001600160fd1b038316830361083757611a599260ff60f81b9060031b1c179251610924565b52565b60408101805151600019808201918211610837576060611a7d838551610924565b5194018051918214610837576001820190526001600160fd1b0381160361083757611a599151610924565b604081019081515160001991828201918211610837576060611acb838651610924565b5191018051938414610837576001840190526001600160fd1b038316830361083757611a5992600160f81b9060031b1c179251610924565b60408101805151909291600019808301928311610837576060611b27848751610924565b5192018051918214610837576001820190526001600160fd1b038116810361083757611a599360ff60f81b9060f81b169060031b1c179251610924565b6080611b8e9193929301519260ff845116938491600183018252611b888383610924565b52610924565b5056fea2646970667358221220f3e6f49d6a4a594b471f7a90fea21a1a972a6bdca7d99ebc7ca3c4c7318ba20464736f6c63430008190033",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b6000803560e01c9081632ec7385a146100905750806338bf92e6146100775780634280bfb51461008b5780635bdaa916146100865780639061b92314610081578063de9abe5e14610077578063f470901a1461007c5763fcd2e3811461007757600080fd5b610363565b61078b565b6106a0565b6105ad565b6103dc565b346100e35760403660031901126100e357600435906001600160401b0382116100e35760406100ce6100c536600486016101cb565b60243590610849565b82519182526001600160a01b03166020820152f35b80fd5b634e487b7160e01b600052604160045260246000fd5b604081019081106001600160401b0382111761011757604052565b6100e6565b602081019081106001600160401b0382111761011757604052565b61042081019081106001600160401b0382111761011757604052565b90601f801991011681019081106001600160401b0382111761011757604052565b6001600160401b03811161011757601f01601f191660200190565b92919261019b82610174565b916101a96040519384610153565b8294818452818301116101c6578281602093846000960137010152565b600080fd5b9080601f830112156101c6578160206101e69335910161018f565b90565b6001600160401b0381116101175760051b60200190565b81601f820112156101c65780359160209161021a846101e9565b936102286040519586610153565b808552838086019160051b830101928084116101c657848301915b8483106102535750505050505090565b82356001600160401b0381116101c6578691610274848480948901016101cb565b815201920191610243565b9060406003198301126101c6576001600160401b036004358181116101c657836102ab91600401610200565b926024359182116101c6576101e6916004016101cb565b60005b8381106102d55750506000910152565b81810151838201526020016102c5565b906020916102fe815180928185528580860191016102c2565b601f01601f1916010190565b906020916020815260605180602083015260005b81811061033f575060409293506000838284010152601f8019910116010190565b608081015183820160400152840161031e565b9060206101e69281815201906102e5565b346101c6576103713661027f565b508051600110156103c6576103a06103ae60406103c293015160405192839160208084015260408301906102e5565b03601f198101835282610153565b6040519182916020835260208301906102e5565b0390f35b61090e565b6001600160a01b038116036101c657565b346101c65760403660031901126101c6576004356024356103fc816103cb565b6040516302571be360e01b8152600481018390526001600160a01b03929060209081816024817f000000000000000000000000000000000000000000000000000000000000000089165afa918215610512578591600093610517575b507f0000000000000000000000000000000000000000000000000000000000000000821691831682146104a0575b50506104999061049e9433911614610938565b61093f565b005b6040516331a9108f60e11b81526004810185905295909250908290869060249082905afa80156105125761049e95610499936000926104e5575b505091819550610486565b6105049250803d1061050b575b6104fc8183610153565b810190610d3c565b38806104da565b503d6104f2565b610c44565b8161052f9294503d851161050b576104fc8183610153565b9138610458565b9181601f840112156101c6578235916001600160401b0383116101c657602083818601950101116101c657565b60406003198201126101c6576001600160401b03916004358381116101c6578261058f91600401610536565b939093926024359182116101c6576105a991600401610536565b9091565b346101c6576105d26105fe60006105db6105c636610563565b9691839193019061099b565b948101906109d5565b9492939096916040518097819482936322b2358760e01b84528860048501610c0d565b03916001600160a01b03165afa9283156105125760009361067b575b5082519051908181036106555761064d84610647876103a087604051948593602085015260248401610c50565b30610d51565b602081519101f35b604051632918942560e01b815260048101919091526024810191909152604490fd5b0390fd5b6106999193503d806000833e6106918183610153565b810190610ad2565b913861061a565b346101c6576106c260006106c76106b636610563565b9492909591369161018f565b610849565b9290506001600160e01b03196106dd8383610c75565b16631d9dabef60e11b8114610777576378e5bf0360e11b811461075a57631674750f60e21b811461073d5763bc1c58d160e01b1461072257604051806103c28161030a565b816107389261073092610ca1565b810190610cbe565b611232565b50816107549261074c92610ca1565b810190610ce3565b9061112d565b50816107719261076992610ca1565b810190610ccd565b90610fad565b50816107869261073092610ca1565b610dd0565b346101c6576107993661027f565b508051600110156103c6576103a06107f260406103c293015160208151910151906bffffffffffffffffffffffff199182811691601481106107fe575b50506040805160609290921c6020830152909384925090820190565b60405191829182610352565b8391925060140360031b1b16168038806107d6565b634e487b7160e01b600052601160045260246000fd5b906001820180921161083757565b610813565b9190820180921161083757565b919091805183101561090e576020838201015160f81c8015610902579061088e610889836108836108949561087d89610829565b86610d22565b9661083c565b610829565b90610849565b604080516020810193845290810194909452926108b481606081016103a0565b51902060008181526020819052604090206001600160a01b03906108e0905b546001600160a01b031690565b166108e9579190565b91506101e66108d3836000526000602052604060002090565b50509050600090600090565b634e487b7160e01b600052603260045260246000fd5b80518210156103c65760209160051b010190565b156101c657565b9060207faf930f9068b0eb51ed43cbf5948d6bab0229ebadb371dd850de50b9d6d30106a91836000526000825260406000209060018060a01b031690816bffffffffffffffffffffffff60a01b825416179055604051908152a2565b906020828203126101c65781356001600160401b0381116101c6576101e692016101cb565b35906001600160e01b0319821682036101c657565b9060a0828203126101c65781356109eb816103cb565b926001600160401b03906020848101358381116101c65785019084601f830112156101c657813591610a1c836101e9565b92610a2a6040519485610153565b808452828085019160051b830101918783116101c6578301905b828210610a8c57505050509360408101358381116101c65784610a68918301610200565b93610a75606083016109c0565b9360808301359081116101c6576101e692016101cb565b81358152908301908301610a44565b90929192610aa881610174565b91610ab66040519384610153565b8294828452828201116101c6576020610ad09301906102c2565b565b9060209081838203126101c65782516001600160401b03938482116101c657019080601f830112156101c6578151610b09816101e9565b94604090610b1a6040519788610153565b828752858088019360051b860101948486116101c657868101935b868510610b4757505050505050505090565b84518381116101c657820186603f820112156101c6578891610b7188838886809601519101610a9b565b815201940193610b35565b90815180825260208080930193019160005b828110610b9c575050505090565b835185529381019392810192600101610b8e565b90808251908181526020809101926020808460051b8301019501936000915b848310610bdf5750505050505090565b9091929394958480610bfd600193601f198682030187528a516102e5565b9801930193019194939290610bcf565b91610c3690610c286101e69593606086526060860190610b7c565b908482036020860152610bb0565b9160408184039101526102e5565b6040513d6000823e3d90fd5b9091610c676101e693604084526040840190610bb0565b9160208184039101526102e5565b6001600160e01b03199035818116939260048110610c9257505050565b60040360031b82901b16169150565b90929192836004116101c65783116101c657600401916003190190565b908160209103126101c6573590565b91908260409103126101c6576020823592013590565b91906040838203126101c6578235926020810135906001600160401b0382116101c657019080601f830112156101c6578160206101e69335910161018f565b90828101808211610837578251106101c657016020012090565b908160209103126101c657516101e6816103cb565b906101e69160008060405193610d66856100fc565b601e85527f416464726573733a206c6f772d6c6576656c2063616c6c206661696c65640000602086015260208151910182855af13d15610dc8573d91610dab83610174565b92610db96040519485610153565b83523d6000602085013e61196d565b60609161196d565b610e0f610e19610e1483610e0f610e0a610e1e977f0000000000000000000000000000000000000000000000000000000000000000611336565b6113d2565b611449565b61147d565b6114f4565b610e266112f9565b50606081016020918282511015610f9b57600490604090610e63610e5d8351603c88820152878152610e57816100fc565b83611b64565b82611b03565b815194610e6f8661011c565b60008652828201948186515115159182610f90575b5050610f82575b8151600090610eaa906001600160a01b03165b6001600160a01b031690565b8451632d43cbef60e21b815295869182905afa93841561051257600094610f65575b50818101516001600160a01b0316948051966080840197885197865198899263ea9cd3bf60e01b878501526024840192610f0593611567565b0393601f19948581018952610f1a9089610153565b516001600160a01b0316915197518551988994850193610f399461159d565b039081018552610f499085610153565b51630556f18360e41b81529283926106779230600486016116b7565b610f7b9194503d806000833e6106918183610153565b9238610ecc565b610f8b826119fe565b610e8b565b511090508138610e84565b604051631601fac760e31b8152600490fd5b80610e0f610e19610e14610e0f94610e0f610e0a610feb997f0000000000000000000000000000000000000000000000000000000000000000611336565b6040906004825192610ffc8461011c565b600084528083019081515115158061111f575b611111575b835160009061102b906001600160a01b0316610e9e565b8251632d43cbef60e21b815294859182905afa928315610512576000936110ee575b5060208401519293610677936110d691906001600160a01b0316936110ca8151986110b86080850197611096895189519d8e9363ea9cd3bf60e01b602086015260248501611567565b03946110ab601f19968d88820190528d610153565b516001600160a01b031690565b925196518651978894602086016115ee565b03908101845283610153565b51630556f18360e41b815293849330600486016116b7565b610677935061110a6110d6913d806000833e6106918183610153565b935061104d565b61111a846119fe565b611014565b50602060608501511061100f565b909181610e0f610e0a611160937f0000000000000000000000000000000000000000000000000000000000000000611336565b906111696112f9565b5060206040830180516001815180151580611225575b611217575b0190525151116111fe57610e0f82600060606111c49501526111a581611aa8565b610e19610e5d604051610e57816103a06020820190600a602083019252565b906111cd6112f9565b50602060608301511015610f9b57610e5d6111e89183611b64565b604051906111f58261011c565b6000825261175b565b604051630251ce0160e31b815260206004820152602490fd5b611220876119fe565b611184565b508460608801511061117f565b9081610e0f610e0a611264937f0000000000000000000000000000000000000000000000000000000000000000611336565b9061126d6112f9565b50602060408301805160018151801515806112ec575b6112de575b0190525151116111fe57610e0f82600060606112c89501526112a981611aa8565b610e19610e5d604051610e57816103a060208201906003602083019252565b604051906112d58261011c565b60008252611881565b6112e7876119fe565b611288565b5084606088015110611283565b6040519060a082018281106001600160401b0382111761011757604052606060808360008152600060208201528260408201526000838201520152565b61133e6112f9565b5060405161134b81610137565b6020916020825261040092833660208501376040519361136a85610137565b60005b8181106113c35750505060008252600083526040519360a085018581106001600160401b03821117610117576040526001600160a01b039182168552166020840152604083015260006060830152608082015290565b6060868201840152820161136d565b6113da6112f9565b506020604082018051600181518015158061143c575b61142e575b0190525151116111fe576000606082015261140f81611a5c565b6101e6610e5d604051610e57816103a060208201906000602083019252565b611437866119fe565b6113f5565b50846060870151106113f0565b906114526112f9565b50602060608301511015610f9b57610e5d6101e69160405190602082015260208152610e57816100fc565b6114856112f9565b50602060408201805160018151801515806114e7575b6114d9575b0190525151116111fe57600060608201526114ba81611aa8565b6101e6610e5d604051610e57816103a060208201906002602083019252565b6114e2866119fe565b6114a0565b508460608701511061149b565b6114fc6112f9565b5060608101602081511015610f9b576040820190815151600019918282019182116108375761152c828551610924565b51908051938414610837576001840190526001600160fd1b03831683036108375761156392600160fd1b9060031b1c179251610924565b5290565b6001600160a01b0390911681526060602082018190526101e693919261158f91840190610b7c565b916040818403910152610bb0565b926115c56101e695936115d39360018060a01b0316865260a0602087015260a0860190610b7c565b908482036040860152610bb0565b91637a38480d60e11b606082015260808184039101526102e5565b926115c56101e695936116169360018060a01b0316865260a0602087015260a0860190610b7c565b91631c5fc97360e11b606082015260808184039101526102e5565b926115c56101e695936116599360018060a01b0316865260a0602087015260a0860190610b7c565b91636f4d5f2f60e11b606082015260808184039101526102e5565b926115c56101e6959361169c9360018060a01b0316865260a0602087015260a0860190610b7c565b9163fcd2e38160e01b606082015260808184039101526102e5565b92909493919460a084019060018060a01b0316845260209060a06020860152865180915260c0850191602060c08360051b8801019801926000905b83821061172f5750505050508461171491846101e696970360408601526102e5565b632ded548b60e11b60608401529160808184039101526102e5565b9091929398838061174c60019360bf198c82030186528d516102e5565b9b0192019201909392916116f2565b600460408201805151151580611873575b611865575b8251600090611788906001600160a01b0316610e9e565b604051632d43cbef60e21b815293849182905afa91821561051257600092611842575b50602083015191926106779261182891906001600160a01b03169261181c81519761180960808501966117f588516040519c8d9363ea9cd3bf60e01b602086015260248501611567565b03946110ab601f19968781018d528c610153565b9251955160405196879460208601611631565b03908101835282610153565b604051630556f18360e41b815293849330600486016116b7565b610677925061185e611828913d806000833e6106918183610153565b92506117ab565b61186e836119fe565b611771565b50602060608401511061176c565b60046040820180515115158061195f575b611951575b82516000906118ae906001600160a01b0316610e9e565b604051632d43cbef60e21b815293849182905afa9182156105125760009261192e575b50602083015191926106779261182891906001600160a01b03169261181c81519761191b60808501966117f588516040519c8d9363ea9cd3bf60e01b602086015260248501611567565b9251955160405196879460208601611674565b610677925061194a611828913d806000833e6106918183610153565b92506118d1565b61195a836119fe565b611897565b506020606084015110611892565b919290156119cf5750815115611981575090565b3b1561198a5790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156119e25750805190602001fd5b60405162461bcd60e51b81529081906106779060048301610352565b604081019081515160001991828201918211610837576060611a21838651610924565b5191018051938414610837576001840190526001600160fd1b038316830361083757611a599260ff60f81b9060031b1c179251610924565b52565b60408101805151600019808201918211610837576060611a7d838551610924565b5194018051918214610837576001820190526001600160fd1b0381160361083757611a599151610924565b604081019081515160001991828201918211610837576060611acb838651610924565b5191018051938414610837576001840190526001600160fd1b038316830361083757611a5992600160f81b9060031b1c179251610924565b60408101805151909291600019808301928311610837576060611b27848751610924565b5192018051918214610837576001820190526001600160fd1b038116810361083757611a599360ff60f81b9060f81b169060031b1c179251610924565b6080611b8e9193929301519260ff845116938491600183018252611b888383610924565b52610924565b5056fea2646970667358221220f3e6f49d6a4a594b471f7a90fea21a1a972a6bdca7d99ebc7ca3c4c7318ba20464736f6c63430008190033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getStorageSlotsCallback(bytes,bytes)": {
        "details": "Internal callback function invoked by CCIP-Read in response to a `getStorageSlots` request."
      },
      "getTarget(bytes,uint256)": {
        "details": "Returns the L2 target address that can answer queries for `name`.",
        "params": {
          "name": "DNS encoded ENS name to query",
          "offset": "The offset of the label to query recursively."
        },
        "returns": {
          "node": "The node of the name",
          "target": "The L2 resolver address to verify against."
        }
      },
      "resolve(bytes,bytes)": {
        "details": "Resolve and verify a record stored in l2 target address. It supports subname by fetching target recursively to the nearlest parent.",
        "params": {
          "data": "The actual calldata",
          "name": "DNS encoded ENS name to query"
        },
        "returns": {
          "result": "result of the call"
        }
      },
      "setTarget(bytes32,address)": {
        "params": {
          "node": "The ENS node to query.",
          "target": "The L2 resolver address to verify against."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "setTarget(bytes32,address)": {
        "notice": "Set target address to verify aagainst"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 13866,
        "contract": "contracts/L1Resolver.sol:L1Resolver",
        "label": "targets",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      }
    }
  }
}