{
  "address": "0x4167C0E7DE2f265A13E2E6B19f26AC4F8C7b4e5f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "urls",
          "type": "string[]"
        },
        {
          "internalType": "address",
          "name": "rollup",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        }
      ],
      "name": "InvalidSlotSize",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "UnknownOpcode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_gatewayURLs",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_rollup",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gatewayURLs",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "commands",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes[]",
          "name": "constants",
          "type": "bytes[]"
        },
        {
          "internalType": "bytes",
          "name": "proof",
          "type": "bytes"
        }
      ],
      "name": "getStorageValues",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "values",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x5155562d6a9a60eb0f2eea306b0460f0f422fa321c18dce842a157b6e1445fa9",
  "receipt": {
    "to": null,
    "from": "0x4a8e79E5258592f208ddba8A8a0d3ffEB051B10A",
    "contractAddress": "0x4167C0E7DE2f265A13E2E6B19f26AC4F8C7b4e5f",
    "transactionIndex": 68,
    "gasUsed": "1452618",
    "logsBloom": "0x
    "blockHash": "0xf1b1fbf0204b320a6c6783a48b1230c80b7fbb0fa65e5a0d1bf4ea94b50f43fb",
    "transactionHash": "0x5155562d6a9a60eb0f2eea306b0460f0f422fa321c18dce842a157b6e1445fa9",
    "logs": [],
    "blockNumber": 5854572,
    "cumulativeGasUsed": "9841680",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "https://linea-ens-gateway.devnet.linea.build"
    ],
    "0xB218f8A4Bc926cF1cA7b3423c154a0D627Bdb7E5"
  ],
  "numDeployments": 1,
  "solcInputHash": "4f2f57ee56ecc7735104c998f416d8c8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"urls\",\"type\":\"string[]\"},{\"internalType\":\"address\",\"name\":\"rollup\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"InvalidSlotSize\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"UnknownOpcode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_gatewayURLs\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rollup\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gatewayURLs\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"commands\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"constants\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"}],\"name\":\"getStorageValues\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"values\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/linea-verifier/LineaSparseProofVerifier.sol\":\"LineaSparseProofVerifier\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/linea-verifier/IEVMVerifier.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.25;\\n\\ninterface IEVMVerifier {\\n    function gatewayURLs() external view returns (string[] memory);\\n\\n    function getStorageValues(\\n        bytes32[] memory commands,\\n        bytes[] memory constants,\\n        bytes memory proof\\n    ) external view returns (bytes[] memory values);\\n}\\n\",\"keccak256\":\"0x9ffc2a113f5f562575a6a8d87669130587a428c16c9f08e35fea56778051ee08\",\"license\":\"MIT\"},\"contracts/linea-verifier/LineaProofHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.25;\\nimport {SparseMerkleProof} from \\\"./lib/SparseMerkleProof.sol\\\";\\n\\nuint256 constant LAST_LEAF_INDEX = 41;\\n\\nstruct AccountProof {\\n    bytes value;\\n    bytes[] proofRelatedNodes;\\n}\\n\\nstruct StorageProof {\\n    bytes32 value;\\n    bytes[] proofRelatedNodes;\\n}\\n\\nstruct AccountProofStruct {\\n    address key;\\n    uint256 leafIndex;\\n    AccountProof proof;\\n}\\n\\nstruct StorageProofStruct {\\n    bytes32 key;\\n    uint256 leafIndex;\\n    StorageProof proof;\\n    bool initialized;\\n}\\n\\nuint8 constant OP_CONSTANT = 0x00;\\nuint8 constant OP_BACKREF = 0x20;\\nuint8 constant FLAG_DYNAMIC = 0x01;\\n\\nlibrary LineaProofHelper {\\n    error AccountNotFound(address);\\n    error UnknownOpcode(uint8);\\n    error InvalidSlotSize(uint256 size);\\n\\n    function executeOperation(\\n        bytes1 operation,\\n        bytes[] memory constants,\\n        bytes[] memory values\\n    ) private pure returns (bytes memory) {\\n        uint8 opcode = uint8(operation) & 0xe0;\\n        uint8 operand = uint8(operation) & 0x1f;\\n\\n        if (opcode == OP_CONSTANT) {\\n            return constants[operand];\\n        } else if (opcode == OP_BACKREF) {\\n            return values[operand];\\n        } else {\\n            revert UnknownOpcode(opcode);\\n        }\\n    }\\n\\n    function computeFirstSlot(\\n        bytes32 command,\\n        bytes[] memory constants,\\n        bytes[] memory values\\n    ) private pure returns (bool isDynamic, uint256 slot) {\\n        uint8 flags = uint8(command[0]);\\n        isDynamic = (flags & FLAG_DYNAMIC) != 0;\\n\\n        bytes memory slotData = executeOperation(command[1], constants, values);\\n        require(slotData.length == 32, \\\"First path element must be 32 bytes\\\");\\n        slot = uint256(bytes32(slotData));\\n\\n        for (uint256 j = 2; j < 32 && command[j] != 0xff; j++) {\\n            bytes memory index = executeOperation(\\n                command[j],\\n                constants,\\n                values\\n            );\\n            slot = uint256(keccak256(abi.encodePacked(index, slot)));\\n        }\\n    }\\n\\n    function getDynamicValue(\\n        uint256 slot,\\n        uint256 proofIdx,\\n        StorageProofStruct[] memory storageProofs,\\n        SparseMerkleProof.Account memory account\\n    ) private pure returns (bytes memory value, uint256 newProofIdx) {\\n        if (!storageProofs[proofIdx].initialized) {\\n            return (\\\"\\\", proofIdx++);\\n        }\\n        bytes32 firstValue = storageProofs[proofIdx].proof.value;\\n        verifyStorageProof(\\n            account,\\n            storageProofs[proofIdx].leafIndex,\\n            storageProofs[proofIdx].proof.proofRelatedNodes,\\n            firstValue,\\n            bytes32(slot)\\n        );\\n        uint256 firstValueUint = uint256(firstValue);\\n        proofIdx++;\\n        if (firstValueUint & 0x01 == 0x01) {\\n            // Long value: first slot is `length * 2 + 1`, following slots are data.\\n            uint256 length = (firstValueUint - 1) / 2;\\n            value = \\\"\\\";\\n            slot = uint256(keccak256(abi.encodePacked(slot)));\\n            while (length > 0) {\\n                verifyStorageProof(\\n                    account,\\n                    storageProofs[proofIdx].leafIndex,\\n                    storageProofs[proofIdx].proof.proofRelatedNodes,\\n                    storageProofs[proofIdx].proof.value,\\n                    bytes32(slot)\\n                );\\n                slot++;\\n\\n                if (length < 32) {\\n                    value = bytes.concat(\\n                        value,\\n                        sliceBytes(\\n                            abi.encode(storageProofs[proofIdx++].proof.value),\\n                            0,\\n                            length\\n                        )\\n                    );\\n\\n                    length = 0;\\n                } else {\\n                    value = bytes.concat(\\n                        value,\\n                        storageProofs[proofIdx++].proof.value\\n                    );\\n\\n                    length -= 32;\\n                }\\n            }\\n            return (value, proofIdx);\\n        } else {\\n            uint256 length = (firstValueUint & 0xFF) / 2;\\n            return (sliceBytes(abi.encode(firstValue), 0, length), proofIdx);\\n        }\\n    }\\n\\n    function sliceBytes(\\n        bytes memory data,\\n        uint256 start,\\n        uint256 length\\n    ) public pure returns (bytes memory) {\\n        require(start + length <= data.length, \\\"sliceBytes: out of range\\\");\\n\\n        bytes memory result = new bytes(length);\\n        for (uint256 i = 0; i < length; i++) {\\n            result[i] = data[i + start];\\n        }\\n\\n        return result;\\n    }\\n\\n    function verifyAccountProof(\\n        AccountProofStruct memory accountProof,\\n        bytes32 stateRoot\\n    ) private pure returns (bool) {\\n        bool accountProofVerified = SparseMerkleProof.verifyProof(\\n            accountProof.proof.proofRelatedNodes,\\n            accountProof.leafIndex,\\n            stateRoot\\n        );\\n\\n        require(\\n            accountProofVerified,\\n            \\\"LineaResolverStub: invalid account proof\\\"\\n        );\\n\\n        bytes32 hAccountValue = SparseMerkleProof.hashAccountValue(\\n            accountProof.proof.value\\n        );\\n\\n        SparseMerkleProof.Leaf memory accountLeaf = SparseMerkleProof.getLeaf(\\n            accountProof.proof.proofRelatedNodes[41]\\n        );\\n\\n        require(\\n            accountLeaf.hValue == hAccountValue,\\n            \\\"LineaResolverStub: account value invalid\\\"\\n        );\\n\\n        return true;\\n    }\\n\\n    function verifyStorageProof(\\n        SparseMerkleProof.Account memory account,\\n        uint256 leafIndex,\\n        bytes[] memory proof,\\n        bytes32 value,\\n        bytes32 key\\n    ) private pure {\\n        bool storageProofVerified = SparseMerkleProof.verifyProof(\\n            proof,\\n            leafIndex,\\n            account.storageRoot\\n        );\\n\\n        require(\\n            storageProofVerified,\\n            \\\"LineaResolverStub: invalid storage proof\\\"\\n        );\\n\\n        SparseMerkleProof.Leaf memory storageLeaf = SparseMerkleProof.getLeaf(\\n            proof[LAST_LEAF_INDEX]\\n        );\\n\\n        // Verify the key\\n        bytes32 hKey = SparseMerkleProof.hashStorageValue(key);\\n        require(storageLeaf.hKey == hKey, \\\"LineaResolverStub: key invalid\\\");\\n\\n        // Verify the storage value\\n        bytes32 hValue = SparseMerkleProof.hashStorageValue(value);\\n        require(\\n            storageLeaf.hValue == hValue,\\n            \\\"LineaResolverStub: value invalid\\\"\\n        );\\n    }\\n\\n    function getStorageValues(\\n        bytes32[] memory commands,\\n        bytes[] memory constants,\\n        bytes32 stateRoot,\\n        AccountProofStruct memory accountProof,\\n        StorageProofStruct[] memory storageProofs\\n    ) internal pure returns (bytes[] memory values) {\\n        verifyAccountProof(accountProof, stateRoot);\\n        SparseMerkleProof.Account memory account = SparseMerkleProof.getAccount(\\n            accountProof.proof.value\\n        );\\n        uint256 proofIdx = 0;\\n        values = new bytes[](commands.length);\\n        for (uint256 i = 0; i < commands.length; i++) {\\n            bytes32 command = commands[i];\\n            (bool isDynamic, uint256 slot) = computeFirstSlot(\\n                command,\\n                constants,\\n                values\\n            );\\n            if (!isDynamic) {\\n                if (!storageProofs[proofIdx].initialized) {\\n                    values[i] = abi.encode(0);\\n                    proofIdx++;\\n                } else {\\n                    verifyStorageProof(\\n                        account,\\n                        storageProofs[proofIdx].leafIndex,\\n                        storageProofs[proofIdx].proof.proofRelatedNodes,\\n                        storageProofs[proofIdx].proof.value,\\n                        bytes32(slot)\\n                    );\\n\\n                    values[i] = abi.encode(\\n                        storageProofs[proofIdx++].proof.value\\n                    );\\n\\n                    if (values[i].length > 32) {\\n                        revert InvalidSlotSize(values[i].length);\\n                    }\\n                }\\n            } else {\\n                (values[i], proofIdx) = getDynamicValue(\\n                    slot,\\n                    proofIdx,\\n                    storageProofs,\\n                    account\\n                );\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe149927b1e2106ae428d4afdd875d2b4f8b76f79008a14f1d876533525d3df2d\",\"license\":\"MIT\"},\"contracts/linea-verifier/LineaSparseProofVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.25;\\n\\nimport {IEVMVerifier} from \\\"./IEVMVerifier.sol\\\";\\nimport {StorageProofStruct, AccountProofStruct, LineaProofHelper} from \\\"./LineaProofHelper.sol\\\";\\n\\ninterface IRollup {\\n    function stateRootHashes(\\n        uint256 l2blockNumber\\n    ) external view returns (bytes32);\\n}\\n\\ncontract LineaSparseProofVerifier is IEVMVerifier {\\n    string[] public _gatewayURLs;\\n    address public _rollup;\\n\\n    constructor(string[] memory urls, address rollup) {\\n        _gatewayURLs = urls;\\n        _rollup = rollup;\\n    }\\n\\n    function getStorageValues(\\n        bytes32[] memory commands,\\n        bytes[] memory constants,\\n        bytes memory proof\\n    ) external view returns (bytes[] memory values) {\\n        (\\n            uint256 blockNo,\\n            AccountProofStruct memory accountProof,\\n            StorageProofStruct[] memory storageProofs\\n        ) = abi.decode(\\n                proof,\\n                (uint256, AccountProofStruct, StorageProofStruct[])\\n            );\\n\\n        bytes32 stateRoot = IRollup(_rollup).stateRootHashes(blockNo);\\n        require(\\n            stateRoot != bytes32(0),\\n            \\\"LineaResolverStub: invalid state root\\\"\\n        );\\n\\n        return\\n            LineaProofHelper.getStorageValues(\\n                commands,\\n                constants,\\n                stateRoot,\\n                accountProof,\\n                storageProofs\\n            );\\n    }\\n\\n    function gatewayURLs() external view override returns (string[] memory) {\\n        return _gatewayURLs;\\n    }\\n}\\n\",\"keccak256\":\"0x795acfa66dbc69506cbfd3bd59d98741e3bc64930b314b9c7356f9d46eb7e934\",\"license\":\"MIT\"},\"contracts/linea-verifier/lib/Mimc.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n// Copyright 2023 Consensys Software Inc.\\n//\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n// you may not use this file except in compliance with the License.\\n// You may obtain a copy of the License at\\n//\\n//     http://www.apache.org/licenses/LICENSE-2.0\\n//\\n// Unless required by applicable law or agreed to in writing, software\\n// distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n// See the License for the specific language governing permissions and\\n// limitations under the License.\\n\\n// Code generated by gnark DO NOT EDIT\\npragma solidity 0.8.25;\\n\\nlibrary Mimc {\\n    uint256 constant FR_FIELD =\\n        8444461749428370424248824938781546531375899335154063827935233455917409239041;\\n\\n    function hash(\\n        bytes calldata _msg\\n    ) external pure returns (bytes32 mimcHash) {\\n        assembly {\\n            let chunks := div(add(_msg.length, 0x1f), 0x20)\\n\\n            for {\\n                let i := 0\\n            } lt(i, sub(chunks, 1)) {\\n                i := add(i, 1)\\n            } {\\n                let offset := add(_msg.offset, mul(i, 0x20))\\n                let chunk := calldataload(offset)\\n\\n                let r := encrypt(mimcHash, chunk)\\n                mimcHash := addmod(\\n                    addmod(mimcHash, r, FR_FIELD),\\n                    chunk,\\n                    FR_FIELD\\n                )\\n            }\\n\\n            let offset := add(_msg.offset, mul(sub(chunks, 1), 0x20))\\n            let lastChunk := calldataload(offset)\\n\\n            if iszero(eq(mod(_msg.length, 0x20), 0)) {\\n                let remaining := mod(_msg.length, 0x20)\\n                lastChunk := shr(mul(sub(0x20, remaining), 0x8), lastChunk)\\n            }\\n\\n            let r := encrypt(mimcHash, lastChunk)\\n            mimcHash := addmod(\\n                addmod(mimcHash, r, FR_FIELD),\\n                lastChunk,\\n                FR_FIELD\\n            )\\n\\n            function encrypt(h, chunk) -> output {\\n                let frField := FR_FIELD\\n                let tmpSum := 0\\n\\n                tmpSum := addmod(\\n                    addmod(chunk, h, frField),\\n                    6780559962679281898511952483033644312910028090361101779689089025541625982996,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    2327326745520207001136649348523057964841679868424949608370212081331899020358,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    6201177823658417253260885485467023993767823924255470286063250782233002635405,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    3401276671970505639801802718275229999176446092725813928949571059366811327963,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    796636033841689627732941016044857384234234277501564259311815186813195010627,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    159507412325830262114089631199386481336725966652415909300570415682233424809,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    1669348614406363339435491723584591316524711695667693315027811919444714635748,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    2220664510675218580883672035712942523468288190837741520497926350441362544422,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    1294712289478715410717626660893541311126892630747701030449280341780183665665,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    6758843230175145783288330173723849603007070607311612566540600202723911987180,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    6271650829101108787041306415787253036818921034903891854433479166754956001513,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    8037654458661109859150348337922011363549131313762043865209663327750426111866,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    2450972517788523786981910980516860147992539249204314270739451472218657823669,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    2707650969937705465351357815756127556801434183777713569980595073268026256128,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    7874262417209200618473337039194351886630571503697269268624099887104149796259,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    3089899920017810079637556867207463807565125948241456751227734590626249857937,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    8231877132811199596376758288825197494440517476607659739835166243301765860904,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    4889925300033981791993403687473437637164964770774352761851347729331041993593,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    506118690894045980182310960875885680782486421163823930266542078948815948062,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    4773308728424659273056201947330432214661646691949138677097247858746575076542,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    6610301125072219342086627276930551094394509958433369744427479834611436778066,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    8062913614098409973923064402439991628739389434149534836396892159147794104642,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    2576406140423312875091927795739341819101209176346955562285186911769083519728,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    6247267546819369987508590432055536928557259658317014243676640822343115627202,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    2354620213005699835215298236574714075068230025566107498090395819138978823906,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    1012123997779098542887516673253442986051441272786218052382513879552027657616,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    220252773286234814215172180118321537145064642853938490221604200051823270477,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    2306037967476458159399202685728266972768173510335885477997450635969358782263,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    5906000615460106310157278190403974694555979202144571560620360962365001056276,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    8029952345415718287377564183334920026617762793749604843629313086537726648143,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    6806091261750378774545720021859645013630360296898036304733359077422908323188,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    3791365032107216523624488143755156784159183778414385385850652127088602339940,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    7713951866326004273632564650741019619975760271948208739458822610304231437565,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    2159153222189174173490067225063044363535871059524538695070191871847470955412,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    3459892854150586819083449948613048924207735017129514254460829121652786324530,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    8165919441562399076732808928206069494664474480220235797297111305840352207764,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    5067127638759272574597184239140007718698192996511162583428330546781376830321,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    7564926180046670501077982861476967417487855218354401587881011340975488196742,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    4793316512087044382791577380686883286681140325373390439122763061600650301139,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    12025027725022723723984202199185080936456585195449250668991990971241927925,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    5056480146405086811789505170440731715530475328844870175949109998024731067467,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    3850822128034659558863504800917443538100103152464488164345952697508772708155,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    5490569542353168488797150359760203713598401616662275350850844170956899716180,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    6809916892509991991280249336166027496157481609693382555884367500846199028644,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    6102228360565846712478499570512196976845845959851353003471378423251561935785,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    7957411254301481793006532646538815862020547208300835763521138686017052464640,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    7577948604138385646013244290592520699579040577712519004775644201729392063846,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    6025758357861563690691793181574484773095829890586160167641973490103511417496,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    2004214547184552249779883547311284063339374005887218065319674453115808726850,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    1316449090346410801845183915381769525990226349513436734911941391785200212382,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    4556285572033080226119128815763547597118327635770271287655822355222839175285,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    2369904002063218534853867482545647755243877244064168179905450676831047307618,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    7451702566176584025980909730992154118931318734166468698682947787653334803016,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    1329300832483899103910420486510886619321904846687482243968569167489052205690,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    3238521361072472828313630322811653086792441312858682853521070248794222258735,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    3475214489590830586915334473771293324307275731565327099797069845161869229357,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    4274287601159036159363576568654710230919275259553081321690187920135177947814,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    6938336600682072955973769075275160235517201022692151378695173193891386346405,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    3998198747256139339077883878547228988120873864712400941893285440315291004215,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    6699213631756936754252081929574788294275116402464654263316543921533804167968,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    6962236729635042756258761323749531146700535903704299930132981735734543600942,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                tmpSum := addmod(\\n                    addmod(output, h, frField),\\n                    6961288456480688271133399693659146309378114560595485436408179085016705585674,\\n                    frField\\n                )\\n                output := mulmod(tmpSum, tmpSum, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(output, output, frField)\\n                output := mulmod(\\n                    mulmod(output, output, frField),\\n                    tmpSum,\\n                    frField\\n                )\\n\\n                output := addmod(output, h, frField)\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x007d24c967bb3667bd66a331e587fcb5477d0836d65dc27f1215cfa03aa0b3e6\",\"license\":\"Apache-2.0\"},\"contracts/linea-verifier/lib/SparseMerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.25;\\n\\nimport {Mimc} from \\\"./Mimc.sol\\\";\\n\\nlibrary SparseMerkleProof {\\n    using Mimc for *;\\n\\n    struct Account {\\n        uint64 nonce;\\n        uint256 balance;\\n        bytes32 storageRoot;\\n        bytes32 mimcCodeHash;\\n        bytes32 keccakCodeHash;\\n        uint64 codeSize;\\n    }\\n\\n    struct Leaf {\\n        uint256 prev;\\n        uint256 next;\\n        bytes32 hKey;\\n        bytes32 hValue;\\n    }\\n\\n    error WrongBytesLength(uint256 expectedLength, uint256 bytesLength);\\n\\n    uint256 internal constant TREE_DEPTH = 40;\\n    bytes32 internal constant ZERO_HASH = 0x0;\\n\\n    /**\\n     * @notice Format input and verify sparse merkle proof\\n     * @param _rawProof Raw sparse merkle tree proof\\n     * @param _leafIndex Index of the leaf\\n     * @param _root Sparse merkle root\\n     */\\n    function verifyProof(\\n        bytes[] calldata _rawProof,\\n        uint256 _leafIndex,\\n        bytes32 _root\\n    ) external pure returns (bool) {\\n        (\\n            bytes32 nextFreeNode,\\n            bytes32 leafHash,\\n            bytes32[] memory proof\\n        ) = _formatProof(_rawProof);\\n        return _verify(proof, leafHash, _leafIndex, _root, nextFreeNode);\\n    }\\n\\n    /**\\n     * @notice Hash a value using MIMC hash\\n     * @param _input Value to hash\\n     * @return {bytes32} Mimc hash\\n     */\\n    function mimcHash(bytes calldata _input) external pure returns (bytes32) {\\n        return Mimc.hash(_input);\\n    }\\n\\n    /**\\n     * @notice Get leaf\\n     * @param _encodedLeaf Encoded leaf bytes (prev, next, hKey, hValue)\\n     * @return Leaf Formatted leaf struct\\n     */\\n    function getLeaf(\\n        bytes calldata _encodedLeaf\\n    ) external pure returns (Leaf memory) {\\n        return _parseLeaf(_encodedLeaf);\\n    }\\n\\n    /**\\n     * @notice Get account\\n     * @param _encodedAccountValue Encoded account value bytes (nonce, balance, storageRoot, mimcCodeHash, keccakCodeHash, codeSize)\\n     * @return Account Formatted account struct\\n     */\\n    function getAccount(\\n        bytes calldata _encodedAccountValue\\n    ) external pure returns (Account memory) {\\n        return _parseAccount(_encodedAccountValue);\\n    }\\n\\n    /**\\n     * @notice Hash account value\\n     * @param _value Encoded account value bytes (nonce, balance, storageRoot, mimcCodeHash, keccakCodeHash, codeSize)\\n     * @return {bytes32} Account value hash\\n     */\\n    function hashAccountValue(\\n        bytes calldata _value\\n    ) external pure returns (bytes32) {\\n        Account memory account = _parseAccount(_value);\\n        (bytes32 msb, bytes32 lsb) = _splitBytes32(account.keccakCodeHash);\\n        return\\n            Mimc.hash(\\n                abi.encode(\\n                    account.nonce,\\n                    account.balance,\\n                    account.storageRoot,\\n                    account.mimcCodeHash,\\n                    lsb,\\n                    msb,\\n                    account.codeSize\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @notice Hash storage value\\n     * @param _value Encoded storage value bytes\\n     * @return {bytes32} Storage value hash\\n     */\\n    function hashStorageValue(bytes32 _value) external pure returns (bytes32) {\\n        (bytes32 msb, bytes32 lsb) = _splitBytes32(_value);\\n        return Mimc.hash(abi.encodePacked(lsb, msb));\\n    }\\n\\n    /**\\n     * @notice Parse leaf value\\n     * @param _encodedLeaf Encoded leaf bytes (prev, next, hKey, hValue)\\n     * @return {Leaf} Formatted leaf struct\\n     */\\n    function _parseLeaf(\\n        bytes calldata _encodedLeaf\\n    ) private pure returns (Leaf memory) {\\n        if (_encodedLeaf.length < 128) {\\n            revert WrongBytesLength(128, _encodedLeaf.length);\\n        }\\n        return abi.decode(_encodedLeaf, (Leaf));\\n    }\\n\\n    /**\\n     * @notice Parse account value\\n     * @param _value Encoded account value bytes (nonce, balance, storageRoot, mimcCodeHash, keccakCodeHash, codeSize)\\n     * @return {Account} Formatted account struct\\n     */\\n    function _parseAccount(\\n        bytes calldata _value\\n    ) private pure returns (Account memory) {\\n        if (_value.length < 192) {\\n            revert WrongBytesLength(192, _value.length);\\n        }\\n        return abi.decode(_value, (Account));\\n    }\\n\\n    /**\\n     * @notice Split bytes32 into two bytes32 taking most significant bits and least significant bits\\n     * @param _b bytes to split\\n     * @return msb Most significant bits\\n     * @return lsb Least significant bits\\n     */\\n    function _splitBytes32(\\n        bytes32 _b\\n    ) private pure returns (bytes32 msb, bytes32 lsb) {\\n        assembly {\\n            msb := shr(128, _b)\\n            lsb := and(_b, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\\n        }\\n    }\\n\\n    /**\\n     * @notice Format proof\\n     * @param _rawProof Non formatted proof array\\n     * @return (bytes32, bytes32, bytes32[]) NextFreeNode, leafHash and formatted proof array\\n     */\\n    function _formatProof(\\n        bytes[] calldata _rawProof\\n    ) private pure returns (bytes32, bytes32, bytes32[] memory) {\\n        uint256 rawProofLength = _rawProof.length;\\n        uint256 formattedProofLength = rawProofLength - 2;\\n\\n        bytes32[] memory proof = new bytes32[](formattedProofLength);\\n        bytes32 nextFreeNode = bytes32(_rawProof[0][:32]);\\n        bytes32 leafHash = Mimc.hash(_rawProof[rawProofLength - 1]);\\n\\n        for (uint256 i = 1; i < formattedProofLength; ) {\\n            proof[formattedProofLength - i] = Mimc.hash(_rawProof[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        // If the sibling leaf (_rawProof[formattedProofLength]) is equal to zero bytes we don't hash it\\n        if (_isZeroBytes(_rawProof[formattedProofLength])) {\\n            proof[0] = ZERO_HASH;\\n        } else {\\n            proof[0] = Mimc.hash(_rawProof[formattedProofLength]);\\n        }\\n\\n        return (nextFreeNode, leafHash, proof);\\n    }\\n\\n    /**\\n     * @notice Check if bytes contain only zero byte elements\\n     * @param _data Bytes to be checked\\n     * @return isZeroBytes true if bytes contain only zero byte elements, false otherwise\\n     */\\n    function _isZeroBytes(\\n        bytes calldata _data\\n    ) private pure returns (bool isZeroBytes) {\\n        isZeroBytes = true;\\n        assembly {\\n            let dataStart := _data.offset\\n\\n            for {\\n                let currentPtr := dataStart\\n            } lt(currentPtr, add(dataStart, _data.length)) {\\n                currentPtr := add(currentPtr, 0x20)\\n            } {\\n                let dataWord := calldataload(currentPtr)\\n\\n                if eq(iszero(dataWord), 0) {\\n                    isZeroBytes := 0\\n                    break\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Verify sparse merkle proof\\n     * @param _proof Sparse merkle tree proof\\n     * @param _leafHash Leaf hash\\n     * @param _leafIndex Index of the leaf\\n     * @param _root Sparse merkle root\\n     * @param _nextFreeNode Next free node\\n     */\\n    function _verify(\\n        bytes32[] memory _proof,\\n        bytes32 _leafHash,\\n        uint256 _leafIndex,\\n        bytes32 _root,\\n        bytes32 _nextFreeNode\\n    ) private pure returns (bool) {\\n        bytes32 computedHash = _leafHash;\\n        uint256 currentIndex = _leafIndex;\\n\\n        for (uint256 height; height < TREE_DEPTH; ++height) {\\n            if ((currentIndex >> height) & 1 == 1)\\n                computedHash = Mimc.hash(\\n                    abi.encodePacked(_proof[height], computedHash)\\n                );\\n            else\\n                computedHash = Mimc.hash(\\n                    abi.encodePacked(computedHash, _proof[height])\\n                );\\n        }\\n\\n        return\\n            Mimc.hash(abi.encodePacked(_nextFreeNode, computedHash)) == _root;\\n    }\\n}\\n\",\"keccak256\":\"0x757a29b38c241c704af3294b5dd142e712584243d8911990e5dccfe3f41c625b\",\"license\":\"AGPL-3.0\"}},\"version\":1}",
  "bytecode": "0x604060806040523461029f57611ab5908138038061001c81610346565b93843982019060408383031261029f5782516001600160401b03919082811161029f57840190601f9284848401121561029f57825195602093828811610289576005938860051b9786610070818b01610346565b809b8152019087829a8501019381851161029f5790818980979695949301925b8584106102a45750505050505001519560018060a01b03871680970361029f57519368010000000000000000851161028957600095865486885580871061021e575b50868052848720939087905b87891061010657600180546001600160a01b0319168b1790556040516116f890816103bd8239f35b805180519086821161020a5790889161011f895461036b565b8781116101d6575b50829087831160011461016f579180600195928695948892610164575b5050600019600383901b1c191690841b1789555b019601980197946100de565b015190503880610144565b8986528386209190601f198416875b8181106101be57509160019693918588979694106101a5575b505050831b83018955610158565b015160001960f88460031b161c19169055388080610197565b8284015185558d96600190950194938401930161017e565b6101fb908a8752848720898086018a1c820192878710610201575b01891c01906103a5565b38610127565b925081926101f1565b634e487b7160e01b84526041600452602484fd5b8780528686892091820191015b81811061023857506100d2565b80896102466001935461036b565b80610254575b50500161022b565b8681118414610268575081555b893861024c565b828252610280878b842092018a1c82018583016103a5565b81835555610261565b634e487b7160e01b600052604160045260246000fd5b600080fd5b9091928094959697505188811161029f57820183603f8201121561029f578a810151898111610331576102de818e01601f19168d01610346565b918183528588838301011161029f579290918c926000945b8186106103195750600090820184015281528b9897969582019493925001610090565b8086018a015183870186015293909401938d936102f6565b60246000634e487b7160e01b81526041600452fd5b6040519190601f01601f191682016001600160401b0381118382101761028957604052565b90600182811c9216801561039b575b602083101461038557565b634e487b7160e01b600052602260045260246000fd5b91607f169161037a565b8181106103b0575050565b600081556001016103a556fe6080604052600436101561001257600080fd5b60003560e01c806322b23587146101c4578063a183bada1461019b578063b50f2fbc146100b55763f36c452e1461004857600080fd5b346100b05760203660031901126100b0576004356000548110156100b0576100986100ac91600080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56301610de5565b604051918291602083526020830190610dc0565b0390f35b600080fd5b346100b05760003660031901126100b0576000546100d281610d24565b906100e06040519283610d03565b8082526000808052602091828401917f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563835b8383106101795750505050604051918083019381845251809452604083019360408160051b85010192916000955b82871061014d5785850386f35b909192938280610169600193603f198a82030186528851610dc0565b9601920196019592919092610140565b600186819261018a859a999a610de5565b815201920192019190959495610112565b346100b05760003660031901126100b0576001546040516001600160a01b039091168152602090f35b346100b05760603660031901126100b0576004356001600160401b0381116100b057366023820112156100b05780600401359061020082610d24565b9161020e6040519384610d03565b8083526024602084019160051b830101913683116100b057602401905b828210610ca257602435846001600160401b0382116100b057366023830112156100b057816004013561025d81610d24565b9261026b6040519485610d03565b8184526024602085019260051b820101903682116100b05760248101925b828410610c735785856044356001600160401b0381116100b0576102b1903690600401610d56565b80518101916060828403126100b0576020820151916040810151906001600160401b0382116100b05760608282018603126100b05760405191606083018381106001600160401b0382111761099957604052818101602001516001600160a01b03811681036100b057835281810160408101516020850152606001516001600160401b0381116100b057604081838501018803126100b0576040519161035683610cb2565b6020828286010101516001600160401b0381116100b057610383906020808b019185858901010101610eb8565b8352604082828601010151916001600160401b0383116100b0576103b292602091828b01938701010101610efd565b602082015260408301526060810151906001600160401b0382116100b05760208601603f8383010112156100b05760208282010151906103f182610d24565b966103ff6040519889610d03565b82885260208801906020810160408560051b8786010101116100b057604085840101915b60408560051b87860101018310610b91575050600154604051638be745d160e01b8152600481019890985260209450879350602492508391506001600160a01b03165afa9283156109b757600093610b5d575b508215610b0a5773310D7A96d8179bf4601b22299643Bf39b3fBcbb8926020806040840151015181840151906104c0604051948593849363662e10f560e11b855260048501610fe7565b0381875af49081156109b757600091610ad0575b5015610a7a576105066020604083015151604051809381926302318a3960e61b83528460048401526024830190610dc0565b0381875af49081156109b757600091610a48575b506105546080610531602060408601510151610f9d565b5160405180938192635ea5a98f60e01b8352602060048401526024830190610dc0565b0381885af480156109b757606091600091610a19575b500151036109c3576105a292604060c0920151519060405180809681946360f0f00f60e01b8352602060048401526024830190610dc0565b03915af49182156109b75760009261090c575b50906000908251906105df6105c983610d24565b926105d76040519485610d03565b808452610d24565b601f190160005b8181106108f957505060005b8451811015610891576106058186610fae565b519361061884898760011a60f81b61159f565b60208151036108405760208151910151906020811061082e575b506002905b6020821089818061080e575b156106bc5750156106a6576106a090610662878c8a861a60f81b61159f565b9061069760408051809360206106818184019788815193849201610d9d565b8201906020820152036020810184520182610d03565b51902091610fc2565b90610637565b634e487b7160e01b600052603260045260246000fd5b91939498978693506001915060001a16156000146107f05760609150836106e291610fae565b51015161072d5750610722600191604051600060208201526020815261070781610cb2565b6107118887610fae565b5261071c8786610fae565b50610fc2565b945b019392936105f2565b61076d906020610740848a999599610fae565b510151602060406107518a8c610fae565b510151015160406107628a8c610fae565b5101515191866112eb565b604061078261077b87610fc2565b9688610fae565b510151516040519060208201526020815261079c81610cb2565b6107a68285610fae565b526107b18184610fae565b5060206107be8285610fae565b5151116107cd57600190610724565b6107d960249184610fae565b5151604051906354d0209160e01b82526004820152fd5b6001936107fc93611094565b95906108088286610fae565b52610724565b9050156106a657896001600160f81b031989851a60f81b81161415610643565b6000199060200360031b1b1689610632565b60405162461bcd60e51b815260206004820152602360248201527f4669727374207061746820656c656d656e74206d75737420626520333220627960448201526274657360e81b6064820152608490fd5b826040518091602082016020835281518091526040830190602060408260051b8601019301916000905b8282106108ca57505050500390f35b919360019193955060206108e98192603f198a82030186528851610dc0565b96019201920185949391926108bb565b60606020828601810191909152016105e6565b90915060c0813d60c0116109af575b8161092860c09383610d03565b810103126100b0576040519060c082018281106001600160401b038211176109995761098d9160a09160405261095d81610f89565b84526020810151602085015260408101516040850152606081015160608501526080810151608085015201610f89565b60a082015290846105b5565b634e487b7160e01b600052604160045260246000fd5b3d915061091b565b6040513d6000823e3d90fd5b60405162461bcd60e51b815260206004820152602860248201527f4c696e65615265736f6c766572537475623a206163636f756e742076616c7565604482015267081a5b9d985b1a5960c21b6064820152608490fd5b610a3b915060803d608011610a41575b610a338183610d03565b810190611058565b8861056a565b503d610a29565b90506020813d602011610a72575b81610a6360209383610d03565b810103126100b057518661051a565b3d9150610a56565b60405162461bcd60e51b815260206004820152602860248201527f4c696e65615265736f6c766572537475623a20696e76616c6964206163636f75604482015267373a10383937b7b360c11b6064820152608490fd5b90506020813d602011610b02575b81610aeb60209383610d03565b810103126100b057610afc90610f7c565b866104d4565b3d9150610ade565b60405162461bcd60e51b815260206004820152602560248201527f4c696e65615265736f6c766572537475623a20696e76616c6964207374617465604482015264081c9bdbdd60da1b6064820152608490fd5b9092506020813d602011610b89575b81610b7960209383610d03565b810103126100b057519185610476565b3d9150610b6c565b82516001600160401b0381116100b057608085880182018403601f1901126100b057604051610bbf81610ccd565b8588018201604081015182526060810151602083015260800151926001600160401b0384116100b0576040878a01840185018603601f1901126100b05760405191610c0983610cb2565b878a018401850160408101518452606001516001600160401b0381116100b05760a08560209695610c4f8c8f610c619660409c8c9b8f938f948e01950101010101610efd565b87820152888501528c8b010101610f7c565b60608201528152019301929050610423565b83356001600160401b0381116100b057602091610c97839260243691870101610d56565b815201930192610289565b813581526020918201910161022b565b604081019081106001600160401b0382111761099957604052565b608081019081106001600160401b0382111761099957604052565b602081019081106001600160401b0382111761099957604052565b90601f801991011681019081106001600160401b0382111761099957604052565b6001600160401b0381116109995760051b60200190565b6001600160401b03811161099957601f01601f191660200190565b81601f820112156100b057803590610d6d82610d3b565b92610d7b6040519485610d03565b828452602083830101116100b057816000926020809301838601378301015290565b60005b838110610db05750506000910152565b8181015183820152602001610da0565b90602091610dd981518092818552858086019101610d9d565b601f01601f1916010190565b9060405190600083549060018260011c9060018416968715610eae575b6020948584108914610e9a5787988489979899529081600014610e785750600114610e39575b505050610e3792500383610d03565b565b600090815285812095935091905b818310610e60575050610e379350820101388080610e28565b85548884018501529485019487945091830191610e47565b92505050610e3794925060ff191682840152151560051b820101388080610e28565b634e487b7160e01b85526022600452602485fd5b91607f1691610e02565b81601f820112156100b0578051610ece81610d3b565b92610edc6040519485610d03565b818452602082840101116100b057610efa9160208085019101610d9d565b90565b81601f820112156100b057805191602091610f1784610d24565b93610f256040519586610d03565b808552838086019160051b830101928084116100b057848301915b848310610f505750505050505090565b82516001600160401b0381116100b0578691610f7184848094890101610eb8565b815201920191610f40565b519081151582036100b057565b51906001600160401b03821682036100b057565b8051602910156106a6576105400190565b80518210156106a65760209160051b010190565b6000198114610fd15760010190565b634e487b7160e01b600052601160045260246000fd5b909392919360608201606083528151809152608083019060808160051b850101926020809101926000905b83821061102c575050505050906040919460208201520152565b90919293948380611049600193607f198b82030186528951610dc0565b97019201920190939291611012565b908160809103126100b05760606040519161107283610ccd565b8051835260208101516020840152604081015160408401520151606082015290565b9190939260606110a48684610fae565b510151156112ca576040806110b98785610fae565b51015151956110f46020916110ef878a856110d4858b610fae565b51015186886110e3878d610fae565b510151015190896112eb565b610fc2565b9660018082160361129d576000198101908111610fd1579187959491939260011c9381519261112284610ce8565b856000946000815297845184810191825284815261113f81610cb2565b519020905b611155575050505050505090509190565b6110ef818461116e8597999b96989a9c61119996610fae565b5101518d8961118e8a82611182858d610fae565b5101510151928a610fae565b51015151918c6112eb565b968984821015611228576111dc61121492876111c06111b989959f610fc2565b9e88610fae565b51015151885190848201528381526111d781610cb2565b611608565b92865193816111f48693518092868087019101610d9d565b820161120882518093868085019101610d9d565b01038084520182610d03565b958495865b9593918a989795939195611144565b858061124561123e611275949c96959c9e610fc2565b9d87610fae565b51015151928151938161126186935180928b8087019101610d9d565b820190888201520386810184520182610d03565b96601f198101908111611289579586611219565b634e487b7160e01b86526011600452602486fd5b919093506112c69450607f92505192818185015283526112bc83610cb2565b60011c1690611608565b9190565b5050506112d682610fc2565b506040516112e381610ce8565b600081529190565b9193909273310D7A96d8179bf4601b22299643Bf39b3fBcbb891856040809501519585519063662e10f560e11b8252818061132f60209a8b9460049d8e8501610fe7565b0381885af49081156114df5760009161156a575b5015611516579060806113596113799493610f9d565b51865180958192635ea5a98f60e01b83528a8c8401526024830190610dc0565b0381875af492831561150b576000936114ea575b5084516333bbbd4160e21b91828252888201528681602481885af49081156114df576000916114b2575b50858401510361146f5790602486928651958693849283528a8301525af491821561146457600092611434575b5060600151036113f357505050565b5162461bcd60e51b815291820181905260248201527f4c696e65615265736f6c766572537475623a2076616c756520696e76616c6964604482015260649150fd5b9091508381813d831161145d575b61144c8183610d03565b810103126100b057519060606113e4565b503d611442565b83513d6000823e3d90fd5b845162461bcd60e51b8152808801879052601e60248201527f4c696e65615265736f6c766572537475623a206b657920696e76616c696400006044820152606490fd5b90508681813d83116114d8575b6114c98183610d03565b810103126100b05751386113b7565b503d6114bf565b86513d6000823e3d90fd5b61150491935060803d608011610a4157610a338183610d03565b913861138d565b85513d6000823e3d90fd5b845162461bcd60e51b8152808801879052602860248201527f4c696e65615265736f6c766572537475623a20696e76616c69642073746f726160448201526733b290383937b7b360c11b6064820152608490fd5b90508681813d8311611598575b6115818183610d03565b810103126100b05761159290610f7c565b38611343565b503d611577565b9291909260f81c92601f60e0851694169184156000146115c957506115c5929350610fae565b5190565b9050602084036115de576115c5929350610fae565b604051632cde2db560e21b815260048101859052602490fd5b9081518110156106a6570160200190565b908151811161167d5761161a81610d3b565b916116286040519384610d03565b818352601f1961163783610d3b565b0136602085013760009060005b838110611652575050505090565b6001906001600160f81b031961166882856115f7565b5116841a61167682886115f7565b5301611644565b60405162461bcd60e51b815260206004820152601860248201527f736c69636542797465733a206f7574206f662072616e676500000000000000006044820152606490fdfea2646970667358221220444f243b2fa86e1fceaa476dcd8b84837104997889acdb9ee05421803213364164736f6c63430008190033",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b60003560e01c806322b23587146101c4578063a183bada1461019b578063b50f2fbc146100b55763f36c452e1461004857600080fd5b346100b05760203660031901126100b0576004356000548110156100b0576100986100ac91600080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56301610de5565b604051918291602083526020830190610dc0565b0390f35b600080fd5b346100b05760003660031901126100b0576000546100d281610d24565b906100e06040519283610d03565b8082526000808052602091828401917f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563835b8383106101795750505050604051918083019381845251809452604083019360408160051b85010192916000955b82871061014d5785850386f35b909192938280610169600193603f198a82030186528851610dc0565b9601920196019592919092610140565b600186819261018a859a999a610de5565b815201920192019190959495610112565b346100b05760003660031901126100b0576001546040516001600160a01b039091168152602090f35b346100b05760603660031901126100b0576004356001600160401b0381116100b057366023820112156100b05780600401359061020082610d24565b9161020e6040519384610d03565b8083526024602084019160051b830101913683116100b057602401905b828210610ca257602435846001600160401b0382116100b057366023830112156100b057816004013561025d81610d24565b9261026b6040519485610d03565b8184526024602085019260051b820101903682116100b05760248101925b828410610c735785856044356001600160401b0381116100b0576102b1903690600401610d56565b80518101916060828403126100b0576020820151916040810151906001600160401b0382116100b05760608282018603126100b05760405191606083018381106001600160401b0382111761099957604052818101602001516001600160a01b03811681036100b057835281810160408101516020850152606001516001600160401b0381116100b057604081838501018803126100b0576040519161035683610cb2565b6020828286010101516001600160401b0381116100b057610383906020808b019185858901010101610eb8565b8352604082828601010151916001600160401b0383116100b0576103b292602091828b01938701010101610efd565b602082015260408301526060810151906001600160401b0382116100b05760208601603f8383010112156100b05760208282010151906103f182610d24565b966103ff6040519889610d03565b82885260208801906020810160408560051b8786010101116100b057604085840101915b60408560051b87860101018310610b91575050600154604051638be745d160e01b8152600481019890985260209450879350602492508391506001600160a01b03165afa9283156109b757600093610b5d575b508215610b0a5773__$af9e7a6d5a7d00c799794b48a877d9c570$__926020806040840151015181840151906104c0604051948593849363662e10f560e11b855260048501610fe7565b0381875af49081156109b757600091610ad0575b5015610a7a576105066020604083015151604051809381926302318a3960e61b83528460048401526024830190610dc0565b0381875af49081156109b757600091610a48575b506105546080610531602060408601510151610f9d565b5160405180938192635ea5a98f60e01b8352602060048401526024830190610dc0565b0381885af480156109b757606091600091610a19575b500151036109c3576105a292604060c0920151519060405180809681946360f0f00f60e01b8352602060048401526024830190610dc0565b03915af49182156109b75760009261090c575b50906000908251906105df6105c983610d24565b926105d76040519485610d03565b808452610d24565b601f190160005b8181106108f957505060005b8451811015610891576106058186610fae565b519361061884898760011a60f81b61159f565b60208151036108405760208151910151906020811061082e575b506002905b6020821089818061080e575b156106bc5750156106a6576106a090610662878c8a861a60f81b61159f565b9061069760408051809360206106818184019788815193849201610d9d565b8201906020820152036020810184520182610d03565b51902091610fc2565b90610637565b634e487b7160e01b600052603260045260246000fd5b91939498978693506001915060001a16156000146107f05760609150836106e291610fae565b51015161072d5750610722600191604051600060208201526020815261070781610cb2565b6107118887610fae565b5261071c8786610fae565b50610fc2565b945b019392936105f2565b61076d906020610740848a999599610fae565b510151602060406107518a8c610fae565b510151015160406107628a8c610fae565b5101515191866112eb565b604061078261077b87610fc2565b9688610fae565b510151516040519060208201526020815261079c81610cb2565b6107a68285610fae565b526107b18184610fae565b5060206107be8285610fae565b5151116107cd57600190610724565b6107d960249184610fae565b5151604051906354d0209160e01b82526004820152fd5b6001936107fc93611094565b95906108088286610fae565b52610724565b9050156106a657896001600160f81b031989851a60f81b81161415610643565b6000199060200360031b1b1689610632565b60405162461bcd60e51b815260206004820152602360248201527f4669727374207061746820656c656d656e74206d75737420626520333220627960448201526274657360e81b6064820152608490fd5b826040518091602082016020835281518091526040830190602060408260051b8601019301916000905b8282106108ca57505050500390f35b919360019193955060206108e98192603f198a82030186528851610dc0565b96019201920185949391926108bb565b60606020828601810191909152016105e6565b90915060c0813d60c0116109af575b8161092860c09383610d03565b810103126100b0576040519060c082018281106001600160401b038211176109995761098d9160a09160405261095d81610f89565b84526020810151602085015260408101516040850152606081015160608501526080810151608085015201610f89565b60a082015290846105b5565b634e487b7160e01b600052604160045260246000fd5b3d915061091b565b6040513d6000823e3d90fd5b60405162461bcd60e51b815260206004820152602860248201527f4c696e65615265736f6c766572537475623a206163636f756e742076616c7565604482015267081a5b9d985b1a5960c21b6064820152608490fd5b610a3b915060803d608011610a41575b610a338183610d03565b810190611058565b8861056a565b503d610a29565b90506020813d602011610a72575b81610a6360209383610d03565b810103126100b057518661051a565b3d9150610a56565b60405162461bcd60e51b815260206004820152602860248201527f4c696e65615265736f6c766572537475623a20696e76616c6964206163636f75604482015267373a10383937b7b360c11b6064820152608490fd5b90506020813d602011610b02575b81610aeb60209383610d03565b810103126100b057610afc90610f7c565b866104d4565b3d9150610ade565b60405162461bcd60e51b815260206004820152602560248201527f4c696e65615265736f6c766572537475623a20696e76616c6964207374617465604482015264081c9bdbdd60da1b6064820152608490fd5b9092506020813d602011610b89575b81610b7960209383610d03565b810103126100b057519185610476565b3d9150610b6c565b82516001600160401b0381116100b057608085880182018403601f1901126100b057604051610bbf81610ccd565b8588018201604081015182526060810151602083015260800151926001600160401b0384116100b0576040878a01840185018603601f1901126100b05760405191610c0983610cb2565b878a018401850160408101518452606001516001600160401b0381116100b05760a08560209695610c4f8c8f610c619660409c8c9b8f938f948e01950101010101610efd565b87820152888501528c8b010101610f7c565b60608201528152019301929050610423565b83356001600160401b0381116100b057602091610c97839260243691870101610d56565b815201930192610289565b813581526020918201910161022b565b604081019081106001600160401b0382111761099957604052565b608081019081106001600160401b0382111761099957604052565b602081019081106001600160401b0382111761099957604052565b90601f801991011681019081106001600160401b0382111761099957604052565b6001600160401b0381116109995760051b60200190565b6001600160401b03811161099957601f01601f191660200190565b81601f820112156100b057803590610d6d82610d3b565b92610d7b6040519485610d03565b828452602083830101116100b057816000926020809301838601378301015290565b60005b838110610db05750506000910152565b8181015183820152602001610da0565b90602091610dd981518092818552858086019101610d9d565b601f01601f1916010190565b9060405190600083549060018260011c9060018416968715610eae575b6020948584108914610e9a5787988489979899529081600014610e785750600114610e39575b505050610e3792500383610d03565b565b600090815285812095935091905b818310610e60575050610e379350820101388080610e28565b85548884018501529485019487945091830191610e47565b92505050610e3794925060ff191682840152151560051b820101388080610e28565b634e487b7160e01b85526022600452602485fd5b91607f1691610e02565b81601f820112156100b0578051610ece81610d3b565b92610edc6040519485610d03565b818452602082840101116100b057610efa9160208085019101610d9d565b90565b81601f820112156100b057805191602091610f1784610d24565b93610f256040519586610d03565b808552838086019160051b830101928084116100b057848301915b848310610f505750505050505090565b82516001600160401b0381116100b0578691610f7184848094890101610eb8565b815201920191610f40565b519081151582036100b057565b51906001600160401b03821682036100b057565b8051602910156106a6576105400190565b80518210156106a65760209160051b010190565b6000198114610fd15760010190565b634e487b7160e01b600052601160045260246000fd5b909392919360608201606083528151809152608083019060808160051b850101926020809101926000905b83821061102c575050505050906040919460208201520152565b90919293948380611049600193607f198b82030186528951610dc0565b97019201920190939291611012565b908160809103126100b05760606040519161107283610ccd565b8051835260208101516020840152604081015160408401520151606082015290565b9190939260606110a48684610fae565b510151156112ca576040806110b98785610fae565b51015151956110f46020916110ef878a856110d4858b610fae565b51015186886110e3878d610fae565b510151015190896112eb565b610fc2565b9660018082160361129d576000198101908111610fd1579187959491939260011c9381519261112284610ce8565b856000946000815297845184810191825284815261113f81610cb2565b519020905b611155575050505050505090509190565b6110ef818461116e8597999b96989a9c61119996610fae565b5101518d8961118e8a82611182858d610fae565b5101510151928a610fae565b51015151918c6112eb565b968984821015611228576111dc61121492876111c06111b989959f610fc2565b9e88610fae565b51015151885190848201528381526111d781610cb2565b611608565b92865193816111f48693518092868087019101610d9d565b820161120882518093868085019101610d9d565b01038084520182610d03565b958495865b9593918a989795939195611144565b858061124561123e611275949c96959c9e610fc2565b9d87610fae565b51015151928151938161126186935180928b8087019101610d9d565b820190888201520386810184520182610d03565b96601f198101908111611289579586611219565b634e487b7160e01b86526011600452602486fd5b919093506112c69450607f92505192818185015283526112bc83610cb2565b60011c1690611608565b9190565b5050506112d682610fc2565b506040516112e381610ce8565b600081529190565b9193909273__$af9e7a6d5a7d00c799794b48a877d9c570$__91856040809501519585519063662e10f560e11b8252818061132f60209a8b9460049d8e8501610fe7565b0381885af49081156114df5760009161156a575b5015611516579060806113596113799493610f9d565b51865180958192635ea5a98f60e01b83528a8c8401526024830190610dc0565b0381875af492831561150b576000936114ea575b5084516333bbbd4160e21b91828252888201528681602481885af49081156114df576000916114b2575b50858401510361146f5790602486928651958693849283528a8301525af491821561146457600092611434575b5060600151036113f357505050565b5162461bcd60e51b815291820181905260248201527f4c696e65615265736f6c766572537475623a2076616c756520696e76616c6964604482015260649150fd5b9091508381813d831161145d575b61144c8183610d03565b810103126100b057519060606113e4565b503d611442565b83513d6000823e3d90fd5b845162461bcd60e51b8152808801879052601e60248201527f4c696e65615265736f6c766572537475623a206b657920696e76616c696400006044820152606490fd5b90508681813d83116114d8575b6114c98183610d03565b810103126100b05751386113b7565b503d6114bf565b86513d6000823e3d90fd5b61150491935060803d608011610a4157610a338183610d03565b913861138d565b85513d6000823e3d90fd5b845162461bcd60e51b8152808801879052602860248201527f4c696e65615265736f6c766572537475623a20696e76616c69642073746f726160448201526733b290383937b7b360c11b6064820152608490fd5b90508681813d8311611598575b6115818183610d03565b810103126100b05761159290610f7c565b38611343565b503d611577565b9291909260f81c92601f60e0851694169184156000146115c957506115c5929350610fae565b5190565b9050602084036115de576115c5929350610fae565b604051632cde2db560e21b815260048101859052602490fd5b9081518110156106a6570160200190565b908151811161167d5761161a81610d3b565b916116286040519384610d03565b818352601f1961163783610d3b565b0136602085013760009060005b838110611652575050505090565b6001906001600160f81b031961166882856115f7565b5116841a61167682886115f7565b5301611644565b60405162461bcd60e51b815260206004820152601860248201527f736c69636542797465733a206f7574206f662072616e676500000000000000006044820152606490fdfea2646970667358221220444f243b2fa86e1fceaa476dcd8b84837104997889acdb9ee05421803213364164736f6c63430008190033",
  "libraries": {
    "SparseMerkleProof": "0x310D7A96d8179bf4601b22299643Bf39b3fBcbb8"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 16110,
        "contract": "contracts/linea-verifier/LineaSparseProofVerifier.sol:LineaSparseProofVerifier",
        "label": "_gatewayURLs",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 16112,
        "contract": "contracts/linea-verifier/LineaSparseProofVerifier.sol:LineaSparseProofVerifier",
        "label": "_rollup",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      }
    }
  }
}